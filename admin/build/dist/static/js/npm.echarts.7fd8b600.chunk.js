(window.webpackJsonp = window.webpackJsonp || []).push([
  [104],
  [
    ,
    ,
    ,
    ,
    function(e, t, n) {
      n(23).__DEV__;
      var i = n(190),
        a = n(2),
        o = n(70),
        r = n(35),
        s = n(284),
        l = n(99),
        u = n(403),
        c = n(417),
        h = n(63),
        d = n(774),
        p = n(775),
        g = n(777),
        f = n(37),
        m = n(38),
        v = n(197),
        y = n(71),
        x = n(6),
        _ = n(18),
        b = n(85).throttle,
        S = n(778),
        w = n(779),
        M = n(780),
        I = n(781),
        A = n(782),
        T = n(783);
      n(373);
      var D = n(293),
        C = a.assert,
        L = a.each,
        P = a.isFunction,
        O = a.isObject,
        k = f.parseClassType,
        N = 1e3,
        R = 1e3,
        E = 3e3,
        V = {
          PROCESSOR: { FILTER: N, SERIES_FILTER: 800, STATISTIC: 5e3 },
          VISUAL: {
            LAYOUT: R,
            PROGRESSIVE_LAYOUT: 1100,
            GLOBAL: 2e3,
            CHART: E,
            POST_CHART_LAYOUT: 3500,
            COMPONENT: 4e3,
            BRUSH: 5e3
          }
        },
        z = '__flagInMainProcess',
        B = '__optionUpdated',
        G = /^[a-zA-Z0-9_]+$/;
      function H(e, t) {
        return function(n, i, a) {
          t || !this._disposed
            ? ((n = n && n.toLowerCase()), l.prototype[e].call(this, n, i, a))
            : this.id;
        };
      }
      function F() {
        l.call(this);
      }
      function W(e, t, n) {
        (n = n || {}), 'string' === typeof t && (t = pe[t]), this.id, this.group, (this._dom = e);
        var o = (this._zr = i.init(e, {
          renderer: n.renderer || 'canvas',
          devicePixelRatio: n.devicePixelRatio,
          width: n.width,
          height: n.height
        }));
        (this._throttledZrFlush = b(a.bind(o.flush, o), 17)),
          (t = a.clone(t)) && p(t, !0),
          (this._theme = t),
          (this._chartsViews = []),
          (this._chartsMap = {}),
          (this._componentsViews = []),
          (this._componentsMap = {}),
          (this._coordSysMgr = new h());
        var r = (this._api = (function(e) {
          var t = e._coordSysMgr;
          return a.extend(new c(e), {
            getCoordinateSystems: a.bind(t.getCoordinateSystems, t),
            getComponentByElement: function(t) {
              for (; t; ) {
                var n = t.__ecComponentInfo;
                if (null != n) return e._model.getComponent(n.mainType, n.index);
                t = t.parent;
              }
            }
          });
        })(this));
        function u(e, t) {
          return e.__prio - t.__prio;
        }
        s(de, u),
          s(ue, u),
          (this._scheduler = new I(this, r, ue, de)),
          l.call(this, (this._ecEventProcessor = new re())),
          (this._messageCenter = new F()),
          this._initEvents(),
          (this.resize = a.bind(this.resize, this)),
          (this._pendingActions = []),
          o.animation.on('frame', this._onframe, this),
          (function(e, t) {
            e.on('rendered', function() {
              t.trigger('rendered'),
                !e.animation.isFinished() ||
                  t[B] ||
                  t._scheduler.unfinished ||
                  t._pendingActions.length ||
                  t.trigger('finished');
            });
          })(o, this),
          a.setAsPrimitive(this);
      }
      (F.prototype.on = H('on', !0)),
        (F.prototype.off = H('off', !0)),
        (F.prototype.one = H('one', !0)),
        a.mixin(F, l);
      var Z = W.prototype;
      function U(e, t, n) {
        if (this._disposed) this.id;
        else {
          var i,
            a = this._model,
            o = this._coordSysMgr.getCoordinateSystems();
          t = _.parseFinder(a, t);
          for (var r = 0; r < o.length; r++) {
            var s = o[r];
            if (s[e] && null != (i = s[e](a, t, n))) return i;
          }
        }
      }
      (Z._onframe = function() {
        if (!this._disposed) {
          var e = this._scheduler;
          if (this[B]) {
            var t = this[B].silent;
            (this[z] = !0),
              j(this),
              Y.update.call(this),
              (this[z] = !1),
              (this[B] = !1),
              J.call(this, t),
              $.call(this, t);
          } else if (e.unfinished) {
            var n = 1,
              i = this._model,
              a = this._api;
            e.unfinished = !1;
            do {
              var o = +new Date();
              e.performSeriesTasks(i),
                e.performDataProcessorTasks(i),
                q(this, i),
                e.performVisualTasks(i),
                ne(this, this._model, a, 'remain'),
                (n -= +new Date() - o);
            } while (n > 0 && e.unfinished);
            e.unfinished || this._zr.flush();
          }
        }
      }),
        (Z.getDom = function() {
          return this._dom;
        }),
        (Z.getZr = function() {
          return this._zr;
        }),
        (Z.setOption = function(e, t, n) {
          if (this._disposed) this.id;
          else {
            var i;
            if (
              (O(t) && ((n = t.lazyUpdate), (i = t.silent), (t = t.notMerge)),
              (this[z] = !0),
              !this._model || t)
            ) {
              var a = new d(this._api),
                o = this._theme,
                r = (this._model = new u());
              (r.scheduler = this._scheduler), r.init(null, null, o, a);
            }
            this._model.setOption(e, ce),
              n
                ? ((this[B] = { silent: i }), (this[z] = !1))
                : (j(this),
                  Y.update.call(this),
                  this._zr.flush(),
                  (this[B] = !1),
                  (this[z] = !1),
                  J.call(this, i),
                  $.call(this, i));
          }
        }),
        (Z.setTheme = function() {
          console.error('ECharts#setTheme() is DEPRECATED in ECharts 3.0');
        }),
        (Z.getModel = function() {
          return this._model;
        }),
        (Z.getOption = function() {
          return this._model && this._model.getOption();
        }),
        (Z.getWidth = function() {
          return this._zr.getWidth();
        }),
        (Z.getHeight = function() {
          return this._zr.getHeight();
        }),
        (Z.getDevicePixelRatio = function() {
          return this._zr.painter.dpr || window.devicePixelRatio || 1;
        }),
        (Z.getRenderedCanvas = function(e) {
          if (r.canvasSupported)
            return (
              ((e = e || {}).pixelRatio = e.pixelRatio || 1),
              (e.backgroundColor = e.backgroundColor || this._model.get('backgroundColor')),
              this._zr.painter.getRenderedCanvas(e)
            );
        }),
        (Z.getSvgDataUrl = function() {
          if (r.svgSupported) {
            var e = this._zr,
              t = e.storage.getDisplayList();
            return (
              a.each(t, function(e) {
                e.stopAnimation(!0);
              }),
              e.painter.pathToDataUrl()
            );
          }
        }),
        (Z.getDataURL = function(e) {
          if (!this._disposed) {
            var t = (e = e || {}).excludeComponents,
              n = this._model,
              i = [],
              a = this;
            L(t, function(e) {
              n.eachComponent({ mainType: e }, function(e) {
                var t = a._componentsMap[e.__viewId];
                t.group.ignore || (i.push(t), (t.group.ignore = !0));
              });
            });
            var o =
              'svg' === this._zr.painter.getType()
                ? this.getSvgDataUrl()
                : this.getRenderedCanvas(e).toDataURL('image/' + ((e && e.type) || 'png'));
            return (
              L(i, function(e) {
                e.group.ignore = !1;
              }),
              o
            );
          }
          this.id;
        }),
        (Z.getConnectedDataURL = function(e) {
          if (this._disposed) this.id;
          else if (r.canvasSupported) {
            var t = this.group,
              n = Math.min,
              o = Math.max;
            if (me[t]) {
              var s = 1 / 0,
                l = 1 / 0,
                u = -1 / 0,
                c = -1 / 0,
                h = [],
                d = (e && e.pixelRatio) || 1;
              a.each(fe, function(i, r) {
                if (i.group === t) {
                  var d = i.getRenderedCanvas(a.clone(e)),
                    p = i.getDom().getBoundingClientRect();
                  (s = n(p.left, s)),
                    (l = n(p.top, l)),
                    (u = o(p.right, u)),
                    (c = o(p.bottom, c)),
                    h.push({ dom: d, left: p.left, top: p.top });
                }
              });
              var p = (u *= d) - (s *= d),
                g = (c *= d) - (l *= d),
                f = a.createCanvas();
              (f.width = p), (f.height = g);
              var m = i.init(f);
              return (
                e.connectedBackgroundColor &&
                  m.add(
                    new x.Rect({
                      shape: { x: 0, y: 0, width: p, height: g },
                      style: { fill: e.connectedBackgroundColor }
                    })
                  ),
                L(h, function(e) {
                  var t = new x.Image({
                    style: { x: e.left * d - s, y: e.top * d - l, image: e.dom }
                  });
                  m.add(t);
                }),
                m.refreshImmediately(),
                f.toDataURL('image/' + ((e && e.type) || 'png'))
              );
            }
            return this.getDataURL(e);
          }
        }),
        (Z.convertToPixel = a.curry(U, 'convertToPixel')),
        (Z.convertFromPixel = a.curry(U, 'convertFromPixel')),
        (Z.containPixel = function(e, t) {
          if (!this._disposed) {
            var n,
              i = this._model;
            return (
              (e = _.parseFinder(i, e)),
              a.each(
                e,
                function(e, i) {
                  i.indexOf('Models') >= 0 &&
                    a.each(
                      e,
                      function(e) {
                        var a = e.coordinateSystem;
                        if (a && a.containPoint) n |= !!a.containPoint(t);
                        else if ('seriesModels' === i) {
                          var o = this._chartsMap[e.__viewId];
                          o && o.containPoint && (n |= o.containPoint(t, e));
                        }
                      },
                      this
                    );
                },
                this
              ),
              !!n
            );
          }
          this.id;
        }),
        (Z.getVisual = function(e, t) {
          var n = this._model,
            i = (e = _.parseFinder(n, e, { defaultMainType: 'series' })).seriesModel.getData(),
            a = e.hasOwnProperty('dataIndexInside')
              ? e.dataIndexInside
              : e.hasOwnProperty('dataIndex')
              ? i.indexOfRawIndex(e.dataIndex)
              : null;
          return null != a ? i.getItemVisual(a, t) : i.getVisual(t);
        }),
        (Z.getViewOfComponentModel = function(e) {
          return this._componentsMap[e.__viewId];
        }),
        (Z.getViewOfSeriesModel = function(e) {
          return this._chartsMap[e.__viewId];
        });
      var Y = {
        prepareAndUpdate: function(e) {
          j(this), Y.update.call(this, e);
        },
        update: function(e) {
          var t = this._model,
            n = this._api,
            i = this._zr,
            a = this._coordSysMgr,
            s = this._scheduler;
          if (t) {
            s.restoreData(t, e),
              s.performSeriesTasks(t),
              a.create(t, n),
              s.performDataProcessorTasks(t, e),
              q(this, t),
              a.update(t, n),
              ee(t),
              s.performVisualTasks(t, e),
              te(this, t, n, e);
            var l = t.get('backgroundColor') || 'transparent';
            if (r.canvasSupported) i.setBackgroundColor(l);
            else {
              var u = o.parse(l);
              (l = o.stringify(u, 'rgb')), 0 === u[3] && (l = 'transparent');
            }
            ie(t, n);
          }
        },
        updateTransform: function(e) {
          var t = this._model,
            n = this,
            i = this._api;
          if (t) {
            var o = [];
            t.eachComponent(function(a, r) {
              var s = n.getViewOfComponentModel(r);
              if (s && s.__alive)
                if (s.updateTransform) {
                  var l = s.updateTransform(r, t, i, e);
                  l && l.update && o.push(s);
                } else o.push(s);
            });
            var r = a.createHashMap();
            t.eachSeries(function(a) {
              var o = n._chartsMap[a.__viewId];
              if (o.updateTransform) {
                var s = o.updateTransform(a, t, i, e);
                s && s.update && r.set(a.uid, 1);
              } else r.set(a.uid, 1);
            }),
              ee(t),
              this._scheduler.performVisualTasks(t, e, { setDirty: !0, dirtyMap: r }),
              ne(n, t, i, e, r),
              ie(t, this._api);
          }
        },
        updateView: function(e) {
          var t = this._model;
          t &&
            (y.markUpdateMethod(e, 'updateView'),
            ee(t),
            this._scheduler.performVisualTasks(t, e, { setDirty: !0 }),
            te(this, this._model, this._api, e),
            ie(t, this._api));
        },
        updateVisual: function(e) {
          Y.update.call(this, e);
        },
        updateLayout: function(e) {
          Y.update.call(this, e);
        }
      };
      function j(e) {
        var t = e._model,
          n = e._scheduler;
        n.restorePipelines(t),
          n.prepareStageTasks(),
          Q(e, 'component', t, n),
          Q(e, 'chart', t, n),
          n.plan();
      }
      function X(e, t, n, i, o) {
        var r = e._model;
        if (i) {
          var s = {};
          (s[i + 'Id'] = n[i + 'Id']),
            (s[i + 'Index'] = n[i + 'Index']),
            (s[i + 'Name'] = n[i + 'Name']);
          var l = { mainType: i, query: s };
          o && (l.subType = o);
          var u = n.excludeSeriesId;
          null != u && (u = a.createHashMap(_.normalizeToArray(u))),
            r &&
              r.eachComponent(
                l,
                function(t) {
                  (u && null != u.get(t.id)) ||
                    c(e['series' === i ? '_chartsMap' : '_componentsMap'][t.__viewId]);
                },
                e
              );
        } else L(e._componentsViews.concat(e._chartsViews), c);
        function c(i) {
          i && i.__alive && i[t] && i[t](i.__model, r, e._api, n);
        }
      }
      function q(e, t) {
        var n = e._chartsMap,
          i = e._scheduler;
        t.eachSeries(function(e) {
          i.updateStreamModes(e, n[e.__viewId]);
        });
      }
      function K(e, t) {
        var n = e.type,
          i = e.escapeConnect,
          o = se[n],
          r = o.actionInfo,
          s = (r.update || 'update').split(':'),
          l = s.pop();
        (s = null != s[0] && k(s[0])), (this[z] = !0);
        var u = [e],
          c = !1;
        e.batch &&
          ((c = !0),
          (u = a.map(e.batch, function(t) {
            return ((t = a.defaults(a.extend({}, t), e)).batch = null), t;
          })));
        var h,
          d = [],
          p = 'highlight' === n || 'downplay' === n;
        L(
          u,
          function(e) {
            ((h = (h = o.action(e, this._model, this._api)) || a.extend({}, e)).type =
              r.event || h.type),
              d.push(h),
              p ? X(this, l, e, 'series') : s && X(this, l, e, s.main, s.sub);
          },
          this
        ),
          'none' === l ||
            p ||
            s ||
            (this[B] ? (j(this), Y.update.call(this, e), (this[B] = !1)) : Y[l].call(this, e)),
          (h = c ? { type: r.event || n, escapeConnect: i, batch: d } : d[0]),
          (this[z] = !1),
          !t && this._messageCenter.trigger(h.type, h);
      }
      function J(e) {
        for (var t = this._pendingActions; t.length; ) {
          var n = t.shift();
          K.call(this, n, e);
        }
      }
      function $(e) {
        !e && this.trigger('updated');
      }
      function Q(e, t, n, i) {
        for (
          var a = 'component' === t,
            o = a ? e._componentsViews : e._chartsViews,
            r = a ? e._componentsMap : e._chartsMap,
            s = e._zr,
            l = e._api,
            u = 0;
          u < o.length;
          u++
        )
          o[u].__alive = !1;
        function c(e) {
          var t = '_ec_' + e.id + '_' + e.type,
            u = r[t];
          if (!u) {
            var c = k(e.type);
            (u = new (a ? v.getClass(c.main, c.sub) : y.getClass(c.sub))()).init(n, l),
              (r[t] = u),
              o.push(u),
              s.add(u.group);
          }
          (e.__viewId = u.__id = t),
            (u.__alive = !0),
            (u.__model = e),
            (u.group.__ecComponentInfo = { mainType: e.mainType, index: e.componentIndex }),
            !a && i.prepareView(u, e, n, l);
        }
        a
          ? n.eachComponent(function(e, t) {
              'series' !== e && c(t);
            })
          : n.eachSeries(c);
        for (u = 0; u < o.length; ) {
          var h = o[u];
          h.__alive
            ? u++
            : (!a && h.renderTask.dispose(),
              s.remove(h.group),
              h.dispose(n, l),
              o.splice(u, 1),
              delete r[h.__id],
              (h.__id = h.group.__ecComponentInfo = null));
        }
      }
      function ee(e) {
        e.clearColorPalette(),
          e.eachSeries(function(e) {
            e.clearColorPalette();
          });
      }
      function te(e, t, n, i) {
        !(function(e, t, n, i, a) {
          L(a || e._componentsViews, function(e) {
            var a = e.__model;
            e.render(a, t, n, i), oe(a, e);
          });
        })(e, t, n, i),
          L(e._chartsViews, function(e) {
            e.__alive = !1;
          }),
          ne(e, t, n, i),
          L(e._chartsViews, function(e) {
            e.__alive || e.remove(t, n);
          });
      }
      function ne(e, t, n, i, a) {
        var o,
          s = e._scheduler;
        t.eachSeries(function(t) {
          var n = e._chartsMap[t.__viewId];
          n.__alive = !0;
          var r = n.renderTask;
          s.updatePayload(r, i),
            a && a.get(t.uid) && r.dirty(),
            (o |= r.perform(s.getPerformArgs(r))),
            (n.group.silent = !!t.get('silent')),
            oe(t, n),
            (function(e, t) {
              var n = e.get('blendMode') || null;
              t.group.traverse(function(e) {
                e.isGroup || (e.style.blend !== n && e.setStyle('blend', n)),
                  e.eachPendingDisplayable &&
                    e.eachPendingDisplayable(function(e) {
                      e.setStyle('blend', n);
                    });
              });
            })(t, n);
        }),
          (s.unfinished |= o),
          (function(e, t) {
            var n = e._zr.storage,
              i = 0;
            n.traverse(function(e) {
              i++;
            }),
              i > t.get('hoverLayerThreshold') &&
                !r.node &&
                t.eachSeries(function(t) {
                  if (!t.preventUsingHoverLayer) {
                    var n = e._chartsMap[t.__viewId];
                    n.__alive &&
                      n.group.traverse(function(e) {
                        e.useHoverLayer = !0;
                      });
                  }
                });
          })(e, t),
          w(e._zr.dom, t);
      }
      function ie(e, t) {
        L(he, function(n) {
          n(e, t);
        });
      }
      (Z.resize = function(e) {
        if (this._disposed) this.id;
        else {
          this._zr.resize(e);
          var t = this._model;
          if ((this._loadingFX && this._loadingFX.resize(), t)) {
            var n = t.resetOption('media'),
              i = e && e.silent;
            (this[z] = !0),
              n && j(this),
              Y.update.call(this),
              (this[z] = !1),
              J.call(this, i),
              $.call(this, i);
          }
        }
      }),
        (Z.showLoading = function(e, t) {
          if (this._disposed) this.id;
          else if ((O(e) && ((t = e), (e = '')), (e = e || 'default'), this.hideLoading(), ge[e])) {
            var n = ge[e](this._api, t),
              i = this._zr;
            (this._loadingFX = n), i.add(n);
          }
        }),
        (Z.hideLoading = function() {
          this._disposed
            ? this.id
            : (this._loadingFX && this._zr.remove(this._loadingFX), (this._loadingFX = null));
        }),
        (Z.makeActionFromEvent = function(e) {
          var t = a.extend({}, e);
          return (t.type = le[e.type]), t;
        }),
        (Z.dispatchAction = function(e, t) {
          this._disposed
            ? this.id
            : (O(t) || (t = { silent: !!t }),
              se[e.type] &&
                this._model &&
                (this[z]
                  ? this._pendingActions.push(e)
                  : (K.call(this, e, t.silent),
                    t.flush
                      ? this._zr.flush(!0)
                      : !1 !== t.flush && r.browser.weChat && this._throttledZrFlush(),
                    J.call(this, t.silent),
                    $.call(this, t.silent))));
        }),
        (Z.appendData = function(e) {
          if (this._disposed) this.id;
          else {
            var t = e.seriesIndex;
            this.getModel()
              .getSeriesByIndex(t)
              .appendData(e),
              (this._scheduler.unfinished = !0);
          }
        }),
        (Z.on = H('on', !1)),
        (Z.off = H('off', !1)),
        (Z.one = H('one', !1));
      var ae = [
        'click',
        'dblclick',
        'mouseover',
        'mouseout',
        'mousemove',
        'mousedown',
        'mouseup',
        'globalout',
        'contextmenu'
      ];
      function oe(e, t) {
        var n = e.get('z'),
          i = e.get('zlevel');
        t.group.traverse(function(e) {
          'group' !== e.type && (null != n && (e.z = n), null != i && (e.zlevel = i));
        });
      }
      function re() {
        this.eventInfo;
      }
      (Z._initEvents = function() {
        L(
          ae,
          function(e) {
            var t = function(t) {
              var n,
                i = this.getModel(),
                o = t.target;
              if ('globalout' === e) n = {};
              else if (o && null != o.dataIndex) {
                var r = o.dataModel || i.getSeriesByIndex(o.seriesIndex);
                n = (r && r.getDataParams(o.dataIndex, o.dataType, o)) || {};
              } else o && o.eventData && (n = a.extend({}, o.eventData));
              if (n) {
                var s = n.componentType,
                  l = n.componentIndex;
                ('markLine' !== s && 'markPoint' !== s && 'markArea' !== s) ||
                  ((s = 'series'), (l = n.seriesIndex));
                var u = s && null != l && i.getComponent(s, l),
                  c =
                    u &&
                    this['series' === u.mainType ? '_chartsMap' : '_componentsMap'][u.__viewId];
                (n.event = t),
                  (n.type = e),
                  (this._ecEventProcessor.eventInfo = {
                    targetEl: o,
                    packedEvent: n,
                    model: u,
                    view: c
                  }),
                  this.trigger(e, n);
              }
            };
            (t.zrEventfulCallAtLast = !0), this._zr.on(e, t, this);
          },
          this
        ),
          L(
            le,
            function(e, t) {
              this._messageCenter.on(
                t,
                function(e) {
                  this.trigger(t, e);
                },
                this
              );
            },
            this
          );
      }),
        (Z.isDisposed = function() {
          return this._disposed;
        }),
        (Z.clear = function() {
          this._disposed ? this.id : this.setOption({ series: [] }, !0);
        }),
        (Z.dispose = function() {
          if (this._disposed) this.id;
          else {
            (this._disposed = !0), _.setAttribute(this.getDom(), xe, '');
            var e = this._api,
              t = this._model;
            L(this._componentsViews, function(n) {
              n.dispose(t, e);
            }),
              L(this._chartsViews, function(n) {
                n.dispose(t, e);
              }),
              this._zr.dispose(),
              delete fe[this.id];
          }
        }),
        a.mixin(W, l),
        (re.prototype = {
          constructor: re,
          normalizeQuery: function(e) {
            var t = {},
              n = {},
              i = {};
            if (a.isString(e)) {
              var o = k(e);
              (t.mainType = o.main || null), (t.subType = o.sub || null);
            } else {
              var r = ['Index', 'Name', 'Id'],
                s = { name: 1, dataIndex: 1, dataType: 1 };
              a.each(e, function(e, a) {
                for (var o = !1, l = 0; l < r.length; l++) {
                  var u = r[l],
                    c = a.lastIndexOf(u);
                  if (c > 0 && c === a.length - u.length) {
                    var h = a.slice(0, c);
                    'data' !== h && ((t.mainType = h), (t[u.toLowerCase()] = e), (o = !0));
                  }
                }
                s.hasOwnProperty(a) && ((n[a] = e), (o = !0)), o || (i[a] = e);
              });
            }
            return { cptQuery: t, dataQuery: n, otherQuery: i };
          },
          filter: function(e, t, n) {
            var i = this.eventInfo;
            if (!i) return !0;
            var a = i.targetEl,
              o = i.packedEvent,
              r = i.model,
              s = i.view;
            if (!r || !s) return !0;
            var l = t.cptQuery,
              u = t.dataQuery;
            return (
              c(l, r, 'mainType') &&
              c(l, r, 'subType') &&
              c(l, r, 'index', 'componentIndex') &&
              c(l, r, 'name') &&
              c(l, r, 'id') &&
              c(u, o, 'name') &&
              c(u, o, 'dataIndex') &&
              c(u, o, 'dataType') &&
              (!s.filterForExposedEvent || s.filterForExposedEvent(e, t.otherQuery, a, o))
            );
            function c(e, t, n, i) {
              return null == e[n] || t[i || n] === e[n];
            }
          },
          afterTrigger: function() {
            this.eventInfo = null;
          }
        });
      var se = {},
        le = {},
        ue = [],
        ce = [],
        he = [],
        de = [],
        pe = {},
        ge = {},
        fe = {},
        me = {},
        ve = new Date() - 0,
        ye = new Date() - 0,
        xe = '_echarts_instance_';
      function _e(e) {
        me[e] = !1;
      }
      var be = _e;
      function Se(e) {
        return fe[_.getAttribute(e, xe)];
      }
      function we(e, t) {
        pe[e] = t;
      }
      function Me(e) {
        ce.push(e);
      }
      function Ie(e, t) {
        De(ue, e, t, N);
      }
      function Ae(e, t, n) {
        'function' === typeof t && ((n = t), (t = ''));
        var i = O(e) ? e.type : [e, (e = { event: t })][0];
        (e.event = (e.event || i).toLowerCase()),
          (t = e.event),
          C(G.test(i) && G.test(t)),
          se[i] || (se[i] = { action: n, actionInfo: e }),
          (le[t] = i);
      }
      function Te(e, t) {
        De(de, e, t, E, 'visual');
      }
      function De(e, t, n, i, a) {
        (P(t) || O(t)) && ((n = t), (t = i));
        var o = I.wrapStageHandler(n, a);
        return (o.__prio = t), (o.__raw = n), e.push(o), o;
      }
      function Ce(e, t) {
        ge[e] = t;
      }
      Te(2e3, S),
        Me(p),
        Ie(900, g),
        Ce('default', M),
        Ae({ type: 'highlight', event: 'highlight', update: 'highlight' }, a.noop),
        Ae({ type: 'downplay', event: 'downplay', update: 'downplay' }, a.noop),
        we('light', A),
        we('dark', T);
      (t.version = '4.5.0'),
        (t.dependencies = { zrender: '4.1.2' }),
        (t.PRIORITY = V),
        (t.init = function(e, t, n) {
          var i = Se(e);
          if (i) return i;
          var a = new W(e, t, n);
          return (
            (a.id = 'ec_' + ve++),
            (fe[a.id] = a),
            _.setAttribute(e, xe, a.id),
            (function(e) {
              var t = '__connectUpdateStatus';
              function n(e, n) {
                for (var i = 0; i < e.length; i++) {
                  e[i][t] = n;
                }
              }
              L(le, function(i, a) {
                e._messageCenter.on(a, function(i) {
                  if (me[e.group] && 0 !== e[t]) {
                    if (i && i.escapeConnect) return;
                    var a = e.makeActionFromEvent(i),
                      o = [];
                    L(fe, function(t) {
                      t !== e && t.group === e.group && o.push(t);
                    }),
                      n(o, 0),
                      L(o, function(e) {
                        1 !== e[t] && e.dispatchAction(a);
                      }),
                      n(o, 2);
                  }
                });
              });
            })(a),
            a
          );
        }),
        (t.connect = function(e) {
          if (a.isArray(e)) {
            var t = e;
            (e = null),
              L(t, function(t) {
                null != t.group && (e = t.group);
              }),
              (e = e || 'g_' + ye++),
              L(t, function(t) {
                t.group = e;
              });
          }
          return (me[e] = !0), e;
        }),
        (t.disConnect = _e),
        (t.disconnect = be),
        (t.dispose = function(e) {
          'string' === typeof e ? (e = fe[e]) : e instanceof W || (e = Se(e)),
            e instanceof W && !e.isDisposed() && e.dispose();
        }),
        (t.getInstanceByDom = Se),
        (t.getInstanceById = function(e) {
          return fe[e];
        }),
        (t.registerTheme = we),
        (t.registerPreprocessor = Me),
        (t.registerProcessor = Ie),
        (t.registerPostUpdate = function(e) {
          he.push(e);
        }),
        (t.registerAction = Ae),
        (t.registerCoordinateSystem = function(e, t) {
          h.register(e, t);
        }),
        (t.getCoordinateSystemDimensions = function(e) {
          var t = h.get(e);
          if (t) return t.getDimensionsInfo ? t.getDimensionsInfo() : t.dimensions.slice();
        }),
        (t.registerLayout = function(e, t) {
          De(de, e, t, R, 'layout');
        }),
        (t.registerVisual = Te),
        (t.registerLoading = Ce),
        (t.extendComponentModel = function(e) {
          return f.extend(e);
        }),
        (t.extendComponentView = function(e) {
          return v.extend(e);
        }),
        (t.extendSeriesModel = function(e) {
          return m.extend(e);
        }),
        (t.extendChartView = function(e) {
          return y.extend(e);
        }),
        (t.setCanvasCreator = function(e) {
          a.$override('createCanvas', e);
        }),
        (t.registerMap = function(e, t, n) {
          D.registerMap(e, t, n);
        }),
        (t.getMap = function(e) {
          var t = D.retrieveMap(e);
          return t && t[0] && { geoJson: t[0].geoJSON, specialAreas: t[0].specialAreas };
        }),
        (t.dataTool = {});
      var Le = n(419);
      !(function() {
        for (var e in Le) Le.hasOwnProperty(e) && (t[e] = Le[e]);
      })();
    },
    ,
    function(e, t, n) {
      var i = n(2),
        a = n(404),
        o = n(70),
        r = n(42),
        s = n(28),
        l = n(33),
        u = n(283),
        c = n(119);
      t.Image = c;
      var h = n(118);
      t.Group = h;
      var d = n(100);
      t.Text = d;
      var p = n(409);
      t.Circle = p;
      var g = n(763);
      t.Sector = g;
      var f = n(764);
      t.Ring = f;
      var m = n(411);
      t.Polygon = m;
      var v = n(413);
      t.Polyline = v;
      var y = n(287);
      t.Rect = y;
      var x = n(414);
      t.Line = x;
      var _ = n(767);
      t.BezierCurve = _;
      var b = n(768);
      t.Arc = b;
      var S = n(769);
      t.CompoundPath = S;
      var w = n(289);
      t.LinearGradient = w;
      var M = n(770);
      t.RadialGradient = M;
      var I = n(29);
      t.BoundingRect = I;
      var A = n(290);
      t.IncrementalDisplayable = A;
      var T = n(288),
        D = Math.max,
        C = Math.min,
        L = {},
        P = 1,
        O = 'emphasis',
        k = 'normal',
        N = 1,
        R = {},
        E = {};
      function V(e, t) {
        E[e] = t;
      }
      function z(e, t, n, i) {
        var o = a.createFromString(e, t);
        return n && ('center' === i && (n = B(n, o.getBoundingRect())), H(o, n)), o;
      }
      function B(e, t) {
        var n,
          i = t.width / t.height,
          a = e.height * i;
        return (
          (n = a <= e.width ? e.height : (a = e.width) / i),
          { x: e.x + e.width / 2 - a / 2, y: e.y + e.height / 2 - n / 2, width: a, height: n }
        );
      }
      var G = a.mergePath;
      function H(e, t) {
        if (e.applyTransform) {
          var n = e.getBoundingRect().calculateTransform(t);
          e.applyTransform(n);
        }
      }
      var F = T.subPixelOptimize;
      function W(e) {
        return null != e && 'none' !== e;
      }
      var Z = i.createHashMap(),
        U = 0;
      function Y(e) {
        var t = e.__hoverStl;
        if (t && !e.__highlighted) {
          var n = e.__zr,
            i = e.useHoverLayer && n && 'canvas' === n.painter.type;
          if (
            ((e.__highlighted = i ? 'layer' : 'plain'), !(e.isGroup || (!n && e.useHoverLayer)))
          ) {
            var a = e,
              o = e.style;
            i && (o = (a = n.addHover(e)).style),
              le(o),
              i ||
                (function(e) {
                  if (e.__hoverStlDirty) {
                    e.__hoverStlDirty = !1;
                    var t = e.__hoverStl;
                    if (t) {
                      var n = (e.__cachedNormalStl = {});
                      e.__cachedNormalZ2 = e.z2;
                      var i = e.style;
                      for (var a in t) null != t[a] && (n[a] = i[a]);
                      (n.fill = i.fill), (n.stroke = i.stroke);
                    } else e.__cachedNormalStl = e.__cachedNormalZ2 = null;
                  }
                })(a),
              o.extendFrom(t),
              j(o, t, 'fill'),
              j(o, t, 'stroke'),
              se(o),
              i || (e.dirty(!1), (e.z2 += P));
          }
        }
      }
      function j(e, t, n) {
        !W(t[n]) &&
          W(e[n]) &&
          (e[n] = (function(e) {
            if ('string' !== typeof e) return e;
            var t = Z.get(e);
            return t || ((t = o.lift(e, -0.1)), U < 1e4 && (Z.set(e, t), U++)), t;
          })(e[n]));
      }
      function X(e) {
        var t = e.__highlighted;
        if (t && ((e.__highlighted = !1), !e.isGroup))
          if ('layer' === t) e.__zr && e.__zr.removeHover(e);
          else {
            var n = e.style,
              i = e.__cachedNormalStl;
            i && (le(n), e.setStyle(i), se(n));
            var a = e.__cachedNormalZ2;
            null != a && e.z2 - a === P && (e.z2 = a);
          }
      }
      function q(e, t, n) {
        var i,
          a = k,
          o = k;
        e.__highlighted && ((a = O), (i = !0)),
          t(e, n),
          e.__highlighted && ((o = O), (i = !0)),
          e.isGroup &&
            e.traverse(function(e) {
              !e.isGroup && t(e, n);
            }),
          i && e.__highDownOnUpdate && e.__highDownOnUpdate(a, o);
      }
      function K(e, t) {
        (t = e.__hoverStl = !1 !== t && (e.hoverStyle || t || {})),
          (e.__hoverStlDirty = !0),
          e.__highlighted && ((e.__cachedNormalStl = null), X(e), Y(e));
      }
      function J(e) {
        !te(this, e) && !this.__highByOuter && q(this, Y);
      }
      function $(e) {
        !te(this, e) && !this.__highByOuter && q(this, X);
      }
      function Q(e) {
        (this.__highByOuter |= 1 << (e || 0)), q(this, Y);
      }
      function ee(e) {
        !(this.__highByOuter &= ~(1 << (e || 0))) && q(this, X);
      }
      function te(e, t) {
        return e.__highDownSilentOnTouch && t.zrByTouch;
      }
      function ne(e, t) {
        var n = !1 === t;
        if (
          ((e.__highDownSilentOnTouch = e.highDownSilentOnTouch),
          (e.__highDownOnUpdate = e.highDownOnUpdate),
          !n || e.__highDownDispatcher)
        ) {
          var i = n ? 'off' : 'on';
          e[i]('mouseover', J)[i]('mouseout', $),
            e[i]('emphasis', Q)[i]('normal', ee),
            (e.__highByOuter = e.__highByOuter || 0),
            (e.__highDownDispatcher = !n);
        }
      }
      function ie(e, t, n, a, o) {
        return ae(e, t, a, o), n && i.extend(e, n), e;
      }
      function ae(e, t, n, a) {
        if ((n = n || L).isRectText) {
          var o;
          n.getTextPosition
            ? (o = n.getTextPosition(t, a))
            : 'outside' === (o = t.getShallow('position') || (a ? null : 'inside')) && (o = 'top'),
            (e.textPosition = o),
            (e.textOffset = t.getShallow('offset'));
          var r = t.getShallow('rotate');
          null != r && (r *= Math.PI / 180),
            (e.textRotation = r),
            (e.textDistance = i.retrieve2(t.getShallow('distance'), a ? null : 5));
        }
        var s,
          l = t.ecModel,
          u = l && l.option.textStyle,
          c = (function(e) {
            var t;
            for (; e && e !== e.ecModel; ) {
              var n = (e.option || L).rich;
              if (n) for (var i in ((t = t || {}), n)) n.hasOwnProperty(i) && (t[i] = 1);
              e = e.parentModel;
            }
            return t;
          })(t);
        if (c)
          for (var h in ((s = {}), c))
            if (c.hasOwnProperty(h)) {
              var d = t.getModel(['rich', h]);
              oe((s[h] = {}), d, u, n, a);
            }
        return (
          (e.rich = s), oe(e, t, u, n, a, !0), n.forceRich && !n.textStyle && (n.textStyle = {}), e
        );
      }
      function oe(e, t, n, a, o, r) {
        (n = (!o && n) || L),
          (e.textFill = re(t.getShallow('color'), a) || n.color),
          (e.textStroke = re(t.getShallow('textBorderColor'), a) || n.textBorderColor),
          (e.textStrokeWidth = i.retrieve2(t.getShallow('textBorderWidth'), n.textBorderWidth)),
          o ||
            (r && ((e.insideRollbackOpt = a), se(e)),
            null == e.textFill && (e.textFill = a.autoColor)),
          (e.fontStyle = t.getShallow('fontStyle') || n.fontStyle),
          (e.fontWeight = t.getShallow('fontWeight') || n.fontWeight),
          (e.fontSize = t.getShallow('fontSize') || n.fontSize),
          (e.fontFamily = t.getShallow('fontFamily') || n.fontFamily),
          (e.textAlign = t.getShallow('align')),
          (e.textVerticalAlign = t.getShallow('verticalAlign') || t.getShallow('baseline')),
          (e.textLineHeight = t.getShallow('lineHeight')),
          (e.textWidth = t.getShallow('width')),
          (e.textHeight = t.getShallow('height')),
          (e.textTag = t.getShallow('tag')),
          (r && a.disableBox) ||
            ((e.textBackgroundColor = re(t.getShallow('backgroundColor'), a)),
            (e.textPadding = t.getShallow('padding')),
            (e.textBorderColor = re(t.getShallow('borderColor'), a)),
            (e.textBorderWidth = t.getShallow('borderWidth')),
            (e.textBorderRadius = t.getShallow('borderRadius')),
            (e.textBoxShadowColor = t.getShallow('shadowColor')),
            (e.textBoxShadowBlur = t.getShallow('shadowBlur')),
            (e.textBoxShadowOffsetX = t.getShallow('shadowOffsetX')),
            (e.textBoxShadowOffsetY = t.getShallow('shadowOffsetY'))),
          (e.textShadowColor = t.getShallow('textShadowColor') || n.textShadowColor),
          (e.textShadowBlur = t.getShallow('textShadowBlur') || n.textShadowBlur),
          (e.textShadowOffsetX = t.getShallow('textShadowOffsetX') || n.textShadowOffsetX),
          (e.textShadowOffsetY = t.getShallow('textShadowOffsetY') || n.textShadowOffsetY);
      }
      function re(e, t) {
        return 'auto' !== e ? e : t && t.autoColor ? t.autoColor : null;
      }
      function se(e) {
        var t,
          n = e.textPosition,
          i = e.insideRollbackOpt;
        if (i && null == e.textFill) {
          var a = i.autoColor,
            o = i.isRectText,
            r = i.useInsideStyle,
            s =
              !1 !== r &&
              (!0 === r || (o && n && 'string' === typeof n && n.indexOf('inside') >= 0)),
            l = !s && null != a;
          (s || l) &&
            (t = {
              textFill: e.textFill,
              textStroke: e.textStroke,
              textStrokeWidth: e.textStrokeWidth
            }),
            s &&
              ((e.textFill = '#fff'),
              null == e.textStroke &&
                ((e.textStroke = a), null == e.textStrokeWidth && (e.textStrokeWidth = 2))),
            l && (e.textFill = a);
        }
        e.insideRollback = t;
      }
      function le(e) {
        var t = e.insideRollback;
        t &&
          ((e.textFill = t.textFill),
          (e.textStroke = t.textStroke),
          (e.textStrokeWidth = t.textStrokeWidth),
          (e.insideRollback = null));
      }
      function ue(e, t, n, i, a, o) {
        if (('function' === typeof a && ((o = a), (a = null)), i && i.isAnimationEnabled())) {
          var r = e ? 'Update' : '',
            s = i.getShallow('animationDuration' + r),
            l = i.getShallow('animationEasing' + r),
            u = i.getShallow('animationDelay' + r);
          'function' === typeof u &&
            (u = u(a, i.getAnimationDelayParams ? i.getAnimationDelayParams(t, a) : null)),
            'function' === typeof s && (s = s(a)),
            s > 0 ? t.animateTo(n, s, u || 0, l, o, !!o) : (t.stopAnimation(), t.attr(n), o && o());
        } else t.stopAnimation(), t.attr(n), o && o();
      }
      function ce(e, t, n, i, a) {
        ue(!0, e, t, n, i, a);
      }
      function he(e, t, n) {
        return (
          t && !i.isArrayLike(t) && (t = u.getLocalTransform(t)),
          n && (t = r.invert([], t)),
          s.applyTransform([], e, t)
        );
      }
      function de(e, t, n, i, a, o, r, s) {
        var l,
          u = n - e,
          c = i - t,
          h = r - a,
          d = s - o,
          p = pe(h, d, u, c);
        if ((l = p) <= 1e-6 && l >= -1e-6) return !1;
        var g = e - a,
          f = t - o,
          m = pe(g, f, u, c) / p;
        if (m < 0 || m > 1) return !1;
        var v = pe(g, f, h, d) / p;
        return !(v < 0 || v > 1);
      }
      function pe(e, t, n, i) {
        return e * i - n * t;
      }
      V('circle', p),
        V('sector', g),
        V('ring', f),
        V('polygon', m),
        V('polyline', v),
        V('rect', y),
        V('line', x),
        V('bezierCurve', _),
        V('arc', b),
        (t.Z2_EMPHASIS_LIFT = P),
        (t.CACHED_LABEL_STYLE_PROPERTIES = {
          color: 'textFill',
          textBorderColor: 'textStroke',
          textBorderWidth: 'textStrokeWidth'
        }),
        (t.extendShape = function(e) {
          return l.extend(e);
        }),
        (t.extendPath = function(e, t) {
          return a.extendFromString(e, t);
        }),
        (t.registerShape = V),
        (t.getShapeClass = function(e) {
          if (E.hasOwnProperty(e)) return E[e];
        }),
        (t.makePath = z),
        (t.makeImage = function(e, t, n) {
          var i = new c({
            style: { image: e, x: t.x, y: t.y, width: t.width, height: t.height },
            onload: function(e) {
              if ('center' === n) {
                var a = { width: e.width, height: e.height };
                i.setStyle(B(t, a));
              }
            }
          });
          return i;
        }),
        (t.mergePath = G),
        (t.resizePath = H),
        (t.subPixelOptimizeLine = function(e) {
          return T.subPixelOptimizeLine(e.shape, e.shape, e.style), e;
        }),
        (t.subPixelOptimizeRect = function(e) {
          return T.subPixelOptimizeRect(e.shape, e.shape, e.style), e;
        }),
        (t.subPixelOptimize = F),
        (t.setElementHoverStyle = K),
        (t.setHoverStyle = function(e, t) {
          ne(e, !0), q(e, K, t);
        }),
        (t.setAsHighDownDispatcher = ne),
        (t.isHighDownDispatcher = function(e) {
          return !(!e || !e.__highDownDispatcher);
        }),
        (t.getHighlightDigit = function(e) {
          var t = R[e];
          return null == t && N <= 32 && (t = R[e] = N++), t;
        }),
        (t.setLabelStyle = function(e, t, n, a, o, r, s) {
          var l,
            u = (o = o || L).labelFetcher,
            c = o.labelDataIndex,
            h = o.labelDimIndex,
            d = n.getShallow('show'),
            p = a.getShallow('show');
          (d || p) &&
            (u && (l = u.getFormattedLabel(c, 'normal', null, h)),
            null == l && (l = i.isFunction(o.defaultText) ? o.defaultText(c, o) : o.defaultText));
          var g = d ? l : null,
            f = p ? i.retrieve2(u ? u.getFormattedLabel(c, 'emphasis', null, h) : null, l) : null;
          (null == g && null == f) || (ie(e, n, r, o), ie(t, a, s, o, !0)),
            (e.text = g),
            (t.text = f);
        }),
        (t.modifyLabelStyle = function(e, t, n) {
          var a = e.style;
          t && (le(a), e.setStyle(t), se(a)),
            (a = e.__hoverStl),
            n && a && (le(a), i.extend(a, n), se(a));
        }),
        (t.setTextStyle = ie),
        (t.setText = function(e, t, n) {
          var i,
            a = { isRectText: !0 };
          !1 === n ? (i = !0) : (a.autoColor = n), ae(e, t, a, i);
        }),
        (t.getFont = function(e, t) {
          var n = t || t.getModel('textStyle');
          return i.trim(
            [
              e.fontStyle || (n && n.getShallow('fontStyle')) || '',
              e.fontWeight || (n && n.getShallow('fontWeight')) || '',
              (e.fontSize || (n && n.getShallow('fontSize')) || 12) + 'px',
              e.fontFamily || (n && n.getShallow('fontFamily')) || 'sans-serif'
            ].join(' ')
          );
        }),
        (t.updateProps = ce),
        (t.initProps = function(e, t, n, i, a) {
          ue(!1, e, t, n, i, a);
        }),
        (t.getTransform = function(e, t) {
          for (var n = r.identity([]); e && e !== t; )
            r.mul(n, e.getLocalTransform(), n), (e = e.parent);
          return n;
        }),
        (t.applyTransform = he),
        (t.transformDirection = function(e, t, n) {
          var i = 0 === t[4] || 0 === t[5] || 0 === t[0] ? 1 : Math.abs((2 * t[4]) / t[0]),
            a = 0 === t[4] || 0 === t[5] || 0 === t[2] ? 1 : Math.abs((2 * t[4]) / t[2]),
            o = [
              'left' === e ? -i : 'right' === e ? i : 0,
              'top' === e ? -a : 'bottom' === e ? a : 0
            ];
          return (
            (o = he(o, t, n)),
            Math.abs(o[0]) > Math.abs(o[1])
              ? o[0] > 0
                ? 'right'
                : 'left'
              : o[1] > 0
              ? 'bottom'
              : 'top'
          );
        }),
        (t.groupTransition = function(e, t, n, a) {
          if (e && t) {
            var o = (function(e) {
              var t = {};
              return (
                e.traverse(function(e) {
                  !e.isGroup && e.anid && (t[e.anid] = e);
                }),
                t
              );
            })(e);
            t.traverse(function(e) {
              if (!e.isGroup && e.anid) {
                var t = o[e.anid];
                if (t) {
                  var i = r(e);
                  e.attr(r(t)), ce(e, i, n, e.dataIndex);
                }
              }
            });
          }
          function r(e) {
            var t = { position: s.clone(e.position), rotation: e.rotation };
            return e.shape && (t.shape = i.extend({}, e.shape)), t;
          }
        }),
        (t.clipPointsByRect = function(e, t) {
          return i.map(e, function(e) {
            var n = e[0];
            (n = D(n, t.x)), (n = C(n, t.x + t.width));
            var i = e[1];
            return (i = D(i, t.y)), [n, (i = C(i, t.y + t.height))];
          });
        }),
        (t.clipRectByRect = function(e, t) {
          var n = D(e.x, t.x),
            i = C(e.x + e.width, t.x + t.width),
            a = D(e.y, t.y),
            o = C(e.y + e.height, t.y + t.height);
          if (i >= n && o >= a) return { x: n, y: a, width: i - n, height: o - a };
        }),
        (t.createIcon = function(e, t, n) {
          var a = ((t = i.extend({ rectHover: !0 }, t)).style = { strokeNoScale: !0 });
          if (((n = n || { x: -1, y: -1, width: 2, height: 2 }), e))
            return 0 === e.indexOf('image://')
              ? ((a.image = e.slice(8)), i.defaults(a, n), new c(t))
              : z(e.replace('path://', ''), t, n, 'center');
        }),
        (t.linePolygonIntersect = function(e, t, n, i, a) {
          for (var o = 0, r = a[a.length - 1]; o < a.length; o++) {
            var s = a[o];
            if (de(e, t, n, i, s[0], s[1], r[0], r[1])) return !0;
            r = s;
          }
        }),
        (t.lineLineIntersect = de);
    },
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    function(e, t, n) {
      var i = n(2),
        a = 1e-4;
      var o = /^(?:(\d{4})(?:[-\/](\d{1,2})(?:[-\/](\d{1,2})(?:[T ](\d{1,2})(?::(\d\d)(?::(\d\d)(?:[.,](\d+))?)?)?(Z|[\+\-]\d\d:?\d\d)?)?)?)?)?$/;
      function r(e) {
        if (0 === e) return 0;
        var t = Math.floor(Math.log(e) / Math.LN10);
        return e / Math.pow(10, t) >= 10 && t++, t;
      }
      (t.linearMap = function(e, t, n, i) {
        var a = t[1] - t[0],
          o = n[1] - n[0];
        if (0 === a) return 0 === o ? n[0] : (n[0] + n[1]) / 2;
        if (i)
          if (a > 0) {
            if (e <= t[0]) return n[0];
            if (e >= t[1]) return n[1];
          } else {
            if (e >= t[0]) return n[0];
            if (e <= t[1]) return n[1];
          }
        else {
          if (e === t[0]) return n[0];
          if (e === t[1]) return n[1];
        }
        return ((e - t[0]) / a) * o + n[0];
      }),
        (t.parsePercent = function(e, t) {
          switch (e) {
            case 'center':
            case 'middle':
              e = '50%';
              break;
            case 'left':
            case 'top':
              e = '0%';
              break;
            case 'right':
            case 'bottom':
              e = '100%';
          }
          return 'string' === typeof e
            ? ((n = e), n.replace(/^\s+|\s+$/g, '')).match(/%$/)
              ? (parseFloat(e) / 100) * t
              : parseFloat(e)
            : null == e
            ? NaN
            : +e;
          var n;
        }),
        (t.round = function(e, t, n) {
          return (
            null == t && (t = 10),
            (t = Math.min(Math.max(0, t), 20)),
            (e = (+e).toFixed(t)),
            n ? e : +e
          );
        }),
        (t.asc = function(e) {
          return (
            e.sort(function(e, t) {
              return e - t;
            }),
            e
          );
        }),
        (t.getPrecision = function(e) {
          if (((e = +e), isNaN(e))) return 0;
          for (var t = 1, n = 0; Math.round(e * t) / t !== e; ) (t *= 10), n++;
          return n;
        }),
        (t.getPrecisionSafe = function(e) {
          var t = e.toString(),
            n = t.indexOf('e');
          if (n > 0) {
            var i = +t.slice(n + 1);
            return i < 0 ? -i : 0;
          }
          var a = t.indexOf('.');
          return a < 0 ? 0 : t.length - 1 - a;
        }),
        (t.getPixelPrecision = function(e, t) {
          var n = Math.log,
            i = Math.LN10,
            a = Math.floor(n(e[1] - e[0]) / i),
            o = Math.round(n(Math.abs(t[1] - t[0])) / i),
            r = Math.min(Math.max(-a + o, 0), 20);
          return isFinite(r) ? r : 20;
        }),
        (t.getPercentWithPrecision = function(e, t, n) {
          if (!e[t]) return 0;
          var a = i.reduce(
            e,
            function(e, t) {
              return e + (isNaN(t) ? 0 : t);
            },
            0
          );
          if (0 === a) return 0;
          for (
            var o = Math.pow(10, n),
              r = i.map(e, function(e) {
                return ((isNaN(e) ? 0 : e) / a) * o * 100;
              }),
              s = 100 * o,
              l = i.map(r, function(e) {
                return Math.floor(e);
              }),
              u = i.reduce(
                l,
                function(e, t) {
                  return e + t;
                },
                0
              ),
              c = i.map(r, function(e, t) {
                return e - l[t];
              });
            u < s;

          ) {
            for (var h = Number.NEGATIVE_INFINITY, d = null, p = 0, g = c.length; p < g; ++p)
              c[p] > h && ((h = c[p]), (d = p));
            ++l[d], (c[d] = 0), ++u;
          }
          return l[t] / o;
        }),
        (t.MAX_SAFE_INTEGER = 9007199254740991),
        (t.remRadian = function(e) {
          var t = 2 * Math.PI;
          return ((e % t) + t) % t;
        }),
        (t.isRadianAroundZero = function(e) {
          return e > -a && e < a;
        }),
        (t.parseDate = function(e) {
          if (e instanceof Date) return e;
          if ('string' === typeof e) {
            var t = o.exec(e);
            if (!t) return new Date(NaN);
            if (t[8]) {
              var n = +t[4] || 0;
              return (
                'Z' !== t[8].toUpperCase() && (n -= t[8].slice(0, 3)),
                new Date(
                  Date.UTC(
                    +t[1],
                    +(t[2] || 1) - 1,
                    +t[3] || 1,
                    n,
                    +(t[5] || 0),
                    +t[6] || 0,
                    +t[7] || 0
                  )
                )
              );
            }
            return new Date(
              +t[1],
              +(t[2] || 1) - 1,
              +t[3] || 1,
              +t[4] || 0,
              +(t[5] || 0),
              +t[6] || 0,
              +t[7] || 0
            );
          }
          return null == e ? new Date(NaN) : new Date(Math.round(e));
        }),
        (t.quantity = function(e) {
          return Math.pow(10, r(e));
        }),
        (t.quantityExponent = r),
        (t.nice = function(e, t) {
          var n = r(e),
            i = Math.pow(10, n),
            a = e / i;
          return (
            (e =
              (t
                ? a < 1.5
                  ? 1
                  : a < 2.5
                  ? 2
                  : a < 4
                  ? 3
                  : a < 7
                  ? 5
                  : 10
                : a < 1
                ? 1
                : a < 2
                ? 2
                : a < 3
                ? 3
                : a < 5
                ? 5
                : 10) * i),
            n >= -20 ? +e.toFixed(n < 0 ? -n : 0) : e
          );
        }),
        (t.quantile = function(e, t) {
          var n = (e.length - 1) * t + 1,
            i = Math.floor(n),
            a = +e[i - 1],
            o = n - i;
          return o ? a + o * (e[i] - a) : a;
        }),
        (t.reformIntervals = function(e) {
          e.sort(function(e, t) {
            return (function e(t, n, i) {
              return (
                t.interval[i] < n.interval[i] ||
                (t.interval[i] === n.interval[i] &&
                  (t.close[i] - n.close[i] === (i ? -1 : 1) || (!i && e(t, n, 1))))
              );
            })(e, t, 0)
              ? -1
              : 1;
          });
          for (var t = -1 / 0, n = 1, i = 0; i < e.length; ) {
            for (var a = e[i].interval, o = e[i].close, r = 0; r < 2; r++)
              a[r] <= t && ((a[r] = t), (o[r] = r ? 1 : 1 - n)), (t = a[r]), (n = o[r]);
            a[0] === a[1] && o[0] * o[1] !== 1 ? e.splice(i, 1) : i++;
          }
          return e;
        }),
        (t.isNumeric = function(e) {
          return e - parseFloat(e) >= 0;
        });
    },
    ,
    function(e, t, n) {
      var i = n(2),
        a = n(35),
        o = i.each,
        r = i.isObject,
        s = i.isArray,
        l = 'series\0';
      function u(e) {
        return e instanceof Array ? e : null == e ? [] : [e];
      }
      function c(e) {
        return r(e) && e.id && 0 === (e.id + '').indexOf('\0_ec_\0');
      }
      var h = 0;
      function d(e, t) {
        return e && e.hasOwnProperty(t);
      }
      (t.normalizeToArray = u),
        (t.defaultEmphasis = function(e, t, n) {
          if (e) {
            (e[t] = e[t] || {}),
              (e.emphasis = e.emphasis || {}),
              (e.emphasis[t] = e.emphasis[t] || {});
            for (var i = 0, a = n.length; i < a; i++) {
              var o = n[i];
              !e.emphasis[t].hasOwnProperty(o) &&
                e[t].hasOwnProperty(o) &&
                (e.emphasis[t][o] = e[t][o]);
            }
          }
        }),
        (t.TEXT_STYLE_OPTIONS = [
          'fontStyle',
          'fontWeight',
          'fontSize',
          'fontFamily',
          'rich',
          'tag',
          'color',
          'textBorderColor',
          'textBorderWidth',
          'width',
          'height',
          'lineHeight',
          'align',
          'verticalAlign',
          'baseline',
          'shadowColor',
          'shadowBlur',
          'shadowOffsetX',
          'shadowOffsetY',
          'textShadowColor',
          'textShadowBlur',
          'textShadowOffsetX',
          'textShadowOffsetY',
          'backgroundColor',
          'borderColor',
          'borderWidth',
          'borderRadius',
          'padding'
        ]),
        (t.getDataItemValue = function(e) {
          return !r(e) || s(e) || e instanceof Date ? e : e.value;
        }),
        (t.isDataItemOption = function(e) {
          return r(e) && !(e instanceof Array);
        }),
        (t.mappingToExists = function(e, t) {
          t = (t || []).slice();
          var n = i.map(e || [], function(e, t) {
            return { exist: e };
          });
          return (
            o(t, function(e, i) {
              if (r(e)) {
                for (var a = 0; a < n.length; a++)
                  if (!n[a].option && null != e.id && n[a].exist.id === e.id + '')
                    return (n[a].option = e), void (t[i] = null);
                for (a = 0; a < n.length; a++) {
                  var o = n[a].exist;
                  if (
                    !n[a].option &&
                    (null == o.id || null == e.id) &&
                    null != e.name &&
                    !c(e) &&
                    !c(o) &&
                    o.name === e.name + ''
                  )
                    return (n[a].option = e), void (t[i] = null);
                }
              }
            }),
            o(t, function(e, t) {
              if (r(e)) {
                for (var i = 0; i < n.length; i++) {
                  var a = n[i].exist;
                  if (!n[i].option && !c(a) && null == e.id) {
                    n[i].option = e;
                    break;
                  }
                }
                i >= n.length && n.push({ option: e });
              }
            }),
            n
          );
        }),
        (t.makeIdAndName = function(e) {
          var t = i.createHashMap();
          o(e, function(e, n) {
            var i = e.exist;
            i && t.set(i.id, e);
          }),
            o(e, function(e, n) {
              var a = e.option;
              i.assert(
                !a || null == a.id || !t.get(a.id) || t.get(a.id) === e,
                'id duplicates: ' + (a && a.id)
              ),
                a && null != a.id && t.set(a.id, e),
                !e.keyInfo && (e.keyInfo = {});
            }),
            o(e, function(e, n) {
              var i = e.exist,
                a = e.option,
                o = e.keyInfo;
              if (r(a)) {
                if (((o.name = null != a.name ? a.name + '' : i ? i.name : l + n), i)) o.id = i.id;
                else if (null != a.id) o.id = a.id + '';
                else {
                  var s = 0;
                  do {
                    o.id = '\0' + o.name + '\0' + s++;
                  } while (t.get(o.id));
                }
                t.set(o.id, e);
              }
            });
        }),
        (t.isNameSpecified = function(e) {
          var t = e.name;
          return !(!t || !t.indexOf(l));
        }),
        (t.isIdInner = c),
        (t.compressBatches = function(e, t) {
          var n = {},
            i = {};
          return a(e || [], n), a(t || [], i, n), [o(n), o(i)];
          function a(e, t, n) {
            for (var i = 0, a = e.length; i < a; i++)
              for (
                var o = e[i].seriesId, r = u(e[i].dataIndex), s = n && n[o], l = 0, c = r.length;
                l < c;
                l++
              ) {
                var h = r[l];
                s && s[h] ? (s[h] = null) : ((t[o] || (t[o] = {}))[h] = 1);
              }
          }
          function o(e, t) {
            var n = [];
            for (var i in e)
              if (e.hasOwnProperty(i) && null != e[i])
                if (t) n.push(+i);
                else {
                  var a = o(e[i], !0);
                  a.length && n.push({ seriesId: i, dataIndex: a });
                }
            return n;
          }
        }),
        (t.queryDataIndex = function(e, t) {
          return null != t.dataIndexInside
            ? t.dataIndexInside
            : null != t.dataIndex
            ? i.isArray(t.dataIndex)
              ? i.map(t.dataIndex, function(t) {
                  return e.indexOfRawIndex(t);
                })
              : e.indexOfRawIndex(t.dataIndex)
            : null != t.name
            ? i.isArray(t.name)
              ? i.map(t.name, function(t) {
                  return e.indexOfName(t);
                })
              : e.indexOfName(t.name)
            : void 0;
        }),
        (t.makeInner = function() {
          var e = '__\0ec_inner_' + h++ + '_' + Math.random().toFixed(5);
          return function(t) {
            return t[e] || (t[e] = {});
          };
        }),
        (t.parseFinder = function(e, t, n) {
          if (i.isString(t)) {
            var a = {};
            (a[t + 'Index'] = 0), (t = a);
          }
          var r = n && n.defaultMainType;
          !r || d(t, r + 'Index') || d(t, r + 'Id') || d(t, r + 'Name') || (t[r + 'Index'] = 0);
          var s = {};
          return (
            o(t, function(a, o) {
              a = t[o];
              if ('dataIndex' !== o && 'dataIndexInside' !== o) {
                var r = o.match(/^(\w+)(Index|Id|Name)$/) || [],
                  l = r[1],
                  u = (r[2] || '').toLowerCase();
                if (
                  !(
                    !l ||
                    !u ||
                    null == a ||
                    ('index' === u && 'none' === a) ||
                    (n && n.includeMainTypes && i.indexOf(n.includeMainTypes, l) < 0)
                  )
                ) {
                  var c = { mainType: l };
                  ('index' === u && 'all' === a) || (c[u] = a);
                  var h = e.queryComponents(c);
                  (s[l + 'Models'] = h), (s[l + 'Model'] = h[0]);
                }
              } else s[o] = a;
            }),
            s
          );
        }),
        (t.setAttribute = function(e, t, n) {
          e.setAttribute ? e.setAttribute(t, n) : (e[t] = n);
        }),
        (t.getAttribute = function(e, t) {
          return e.getAttribute ? e.getAttribute(t) : e[t];
        }),
        (t.getTooltipRenderMode = function(e) {
          return 'auto' === e ? (a.domSupported ? 'html' : 'richText') : e || 'html';
        }),
        (t.groupData = function(e, t) {
          var n = i.createHashMap(),
            a = [];
          return (
            i.each(e, function(e) {
              var i = t(e);
              (n.get(i) || (a.push(i), n.set(i, []))).push(e);
            }),
            { keys: a, buckets: n }
          );
        });
    },
    ,
    ,
    ,
    ,
    function(e, t, n) {
      (function(e) {
        var n;
        'undefined' !== typeof window
          ? (n = window.__DEV__)
          : 'undefined' !== typeof e && (n = e.__DEV__),
          'undefined' === typeof n && (n = !0);
        var i = n;
        t.__DEV__ = i;
      }.call(this, n(93)));
    },
    ,
    function(e, t, n) {
      var i = n(2),
        a = n(29),
        o = n(16).parsePercent,
        r = n(30),
        s = i.each,
        l = ['left', 'right', 'top', 'bottom', 'width', 'height'],
        u = [
          ['width', 'left', 'right'],
          ['height', 'top', 'bottom']
        ];
      function c(e, t, n, i, a) {
        var o = 0,
          r = 0;
        null == i && (i = 1 / 0), null == a && (a = 1 / 0);
        var s = 0;
        t.eachChild(function(l, u) {
          var c,
            h,
            d = l.position,
            p = l.getBoundingRect(),
            g = t.childAt(u + 1),
            f = g && g.getBoundingRect();
          if ('horizontal' === e) {
            var m = p.width + (f ? -f.x + p.x : 0);
            (c = o + m) > i || l.newline
              ? ((o = 0), (c = m), (r += s + n), (s = p.height))
              : (s = Math.max(s, p.height));
          } else {
            var v = p.height + (f ? -f.y + p.y : 0);
            (h = r + v) > a || l.newline
              ? ((o += s + n), (r = 0), (h = v), (s = p.width))
              : (s = Math.max(s, p.width));
          }
          l.newline || ((d[0] = o), (d[1] = r), 'horizontal' === e ? (o = c + n) : (r = h + n));
        });
      }
      var h = c,
        d = i.curry(c, 'vertical'),
        p = i.curry(c, 'horizontal');
      function g(e, t, n) {
        n = r.normalizeCssArray(n || 0);
        var i = t.width,
          s = t.height,
          l = o(e.left, i),
          u = o(e.top, s),
          c = o(e.right, i),
          h = o(e.bottom, s),
          d = o(e.width, i),
          p = o(e.height, s),
          g = n[2] + n[0],
          f = n[1] + n[3],
          m = e.aspect;
        switch (
          (isNaN(d) && (d = i - c - f - l),
          isNaN(p) && (p = s - h - g - u),
          null != m &&
            (isNaN(d) && isNaN(p) && (m > i / s ? (d = 0.8 * i) : (p = 0.8 * s)),
            isNaN(d) && (d = m * p),
            isNaN(p) && (p = d / m)),
          isNaN(l) && (l = i - c - d - f),
          isNaN(u) && (u = s - h - p - g),
          e.left || e.right)
        ) {
          case 'center':
            l = i / 2 - d / 2 - n[3];
            break;
          case 'right':
            l = i - d - f;
        }
        switch (e.top || e.bottom) {
          case 'middle':
          case 'center':
            u = s / 2 - p / 2 - n[0];
            break;
          case 'bottom':
            u = s - p - g;
        }
        (l = l || 0),
          (u = u || 0),
          isNaN(d) && (d = i - f - l - (c || 0)),
          isNaN(p) && (p = s - g - u - (h || 0));
        var v = new a(l + n[3], u + n[0], d, p);
        return (v.margin = n), v;
      }
      function f(e, t) {
        return (
          t &&
            e &&
            s(l, function(n) {
              t.hasOwnProperty(n) && (e[n] = t[n]);
            }),
          e
        );
      }
      (t.LOCATION_PARAMS = l),
        (t.HV_NAMES = u),
        (t.box = h),
        (t.vbox = d),
        (t.hbox = p),
        (t.getAvailableSize = function(e, t, n) {
          var i = t.width,
            a = t.height,
            s = o(e.x, i),
            l = o(e.y, a),
            u = o(e.x2, i),
            c = o(e.y2, a);
          return (
            (isNaN(s) || isNaN(parseFloat(e.x))) && (s = 0),
            (isNaN(u) || isNaN(parseFloat(e.x2))) && (u = i),
            (isNaN(l) || isNaN(parseFloat(e.y))) && (l = 0),
            (isNaN(c) || isNaN(parseFloat(e.y2))) && (c = a),
            (n = r.normalizeCssArray(n || 0)),
            { width: Math.max(u - s - n[1] - n[3], 0), height: Math.max(c - l - n[0] - n[2], 0) }
          );
        }),
        (t.getLayoutRect = g),
        (t.positionElement = function(e, t, n, o, r) {
          var s = !r || !r.hv || r.hv[0],
            l = !r || !r.hv || r.hv[1],
            u = (r && r.boundingMode) || 'all';
          if (s || l) {
            var c;
            if ('raw' === u)
              c =
                'group' === e.type
                  ? new a(0, 0, +t.width || 0, +t.height || 0)
                  : e.getBoundingRect();
            else if (((c = e.getBoundingRect()), e.needLocalTransform())) {
              var h = e.getLocalTransform();
              (c = c.clone()).applyTransform(h);
            }
            t = g(i.defaults({ width: c.width, height: c.height }, t), n, o);
            var d = e.position,
              p = s ? t.x - c.x : 0,
              f = l ? t.y - c.y : 0;
            e.attr('position', 'raw' === u ? [p, f] : [d[0] + p, d[1] + f]);
          }
        }),
        (t.sizeCalculable = function(e, t) {
          return null != e[u[t][0]] || (null != e[u[t][1]] && null != e[u[t][2]]);
        }),
        (t.mergeLayoutParam = function(e, t, n) {
          !i.isObject(n) && (n = {});
          var a = n.ignoreSize;
          !i.isArray(a) && (a = [a, a]);
          var o = l(u[0], 0),
            r = l(u[1], 1);
          function l(n, i) {
            var o = {},
              r = 0,
              l = {},
              u = 0;
            if (
              (s(n, function(t) {
                l[t] = e[t];
              }),
              s(n, function(e) {
                c(t, e) && (o[e] = l[e] = t[e]), h(o, e) && r++, h(l, e) && u++;
              }),
              a[i])
            )
              return h(t, n[1]) ? (l[n[2]] = null) : h(t, n[2]) && (l[n[1]] = null), l;
            if (2 !== u && r) {
              if (r >= 2) return o;
              for (var d = 0; d < n.length; d++) {
                var p = n[d];
                if (!c(o, p) && c(e, p)) {
                  o[p] = e[p];
                  break;
                }
              }
              return o;
            }
            return l;
          }
          function c(e, t) {
            return e.hasOwnProperty(t);
          }
          function h(e, t) {
            return null != e[t] && 'auto' !== e[t];
          }
          function d(e, t, n) {
            s(e, function(e) {
              t[e] = n[e];
            });
          }
          d(u[0], e, o), d(u[1], e, r);
        }),
        (t.getLayoutParams = function(e) {
          return f({}, e);
        }),
        (t.copyLayoutParams = f);
    },
    ,
    ,
    ,
    ,
    function(e, t, n) {
      var i = n(2),
        a = n(52),
        o = n(16);
      var r = i.normalizeCssArray,
        s = /([&<>"'])/g,
        l = { '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#39;' };
      function u(e) {
        return null == e
          ? ''
          : (e + '').replace(s, function(e, t) {
              return l[t];
            });
      }
      var c = ['a', 'b', 'c', 'd', 'e', 'f', 'g'],
        h = function(e, t) {
          return '{' + e + (null == t ? '' : t) + '}';
        };
      function d(e, t) {
        return '0000'.substr(0, t - (e += '').length) + e;
      }
      var p = a.truncateText;
      (t.addCommas = function(e) {
        return isNaN(e)
          ? '-'
          : (e = (e + '').split('.'))[0].replace(/(\d{1,3})(?=(?:\d{3})+(?!\d))/g, '$1,') +
              (e.length > 1 ? '.' + e[1] : '');
      }),
        (t.toCamelCase = function(e, t) {
          return (
            (e = (e || '').toLowerCase().replace(/-(.)/g, function(e, t) {
              return t.toUpperCase();
            })),
            t && e && (e = e.charAt(0).toUpperCase() + e.slice(1)),
            e
          );
        }),
        (t.normalizeCssArray = r),
        (t.encodeHTML = u),
        (t.formatTpl = function(e, t, n) {
          i.isArray(t) || (t = [t]);
          var a = t.length;
          if (!a) return '';
          for (var o = t[0].$vars || [], r = 0; r < o.length; r++) {
            var s = c[r];
            e = e.replace(h(s), h(s, 0));
          }
          for (var l = 0; l < a; l++)
            for (var d = 0; d < o.length; d++) {
              var p = t[l][o[d]];
              e = e.replace(h(c[d], l), n ? u(p) : p);
            }
          return e;
        }),
        (t.formatTplSimple = function(e, t, n) {
          return (
            i.each(t, function(t, i) {
              e = e.replace('{' + i + '}', n ? u(t) : t);
            }),
            e
          );
        }),
        (t.getTooltipMarker = function(e, t) {
          var n = (e = i.isString(e) ? { color: e, extraCssText: t } : e || {}).color,
            a = e.type,
            o = ((t = e.extraCssText), e.renderMode || 'html'),
            r = e.markerId || 'X';
          return n
            ? 'html' === o
              ? 'subItem' === a
                ? '<span style="display:inline-block;vertical-align:middle;margin-right:8px;margin-left:3px;border-radius:4px;width:4px;height:4px;background-color:' +
                  u(n) +
                  ';' +
                  (t || '') +
                  '"></span>'
                : '<span style="display:inline-block;margin-right:5px;border-radius:10px;width:10px;height:10px;background-color:' +
                  u(n) +
                  ';' +
                  (t || '') +
                  '"></span>'
              : { renderMode: o, content: '{marker' + r + '|}  ', style: { color: n } }
            : '';
        }),
        (t.formatTime = function(e, t, n) {
          ('week' !== e && 'month' !== e && 'quarter' !== e && 'half-year' !== e && 'year' !== e) ||
            (e = 'MM-dd\nyyyy');
          var i = o.parseDate(t),
            a = n ? 'UTC' : '',
            r = i['get' + a + 'FullYear'](),
            s = i['get' + a + 'Month']() + 1,
            l = i['get' + a + 'Date'](),
            u = i['get' + a + 'Hours'](),
            c = i['get' + a + 'Minutes'](),
            h = i['get' + a + 'Seconds'](),
            p = i['get' + a + 'Milliseconds']();
          return (e = e
            .replace('MM', d(s, 2))
            .replace('M', s)
            .replace('yyyy', r)
            .replace('yy', r % 100)
            .replace('dd', d(l, 2))
            .replace('d', l)
            .replace('hh', d(u, 2))
            .replace('h', u)
            .replace('mm', d(c, 2))
            .replace('m', c)
            .replace('ss', d(h, 2))
            .replace('s', h)
            .replace('SSS', d(p, 3)));
        }),
        (t.capitalFirst = function(e) {
          return e ? e.charAt(0).toUpperCase() + e.substr(1) : e;
        }),
        (t.truncateText = p),
        (t.getTextBoundingRect = function(e) {
          return a.getBoundingRect(
            e.text,
            e.font,
            e.textAlign,
            e.textVerticalAlign,
            e.textPadding,
            e.textLineHeight,
            e.rich,
            e.truncate
          );
        }),
        (t.getTextRect = function(e, t, n, i, o, r, s, l) {
          return a.getBoundingRect(e, t, n, i, o, l, r, s);
        });
    },
    ,
    ,
    ,
    ,
    ,
    function(e, t, n) {
      var i = n(2),
        a = n(35),
        o = n(18).makeInner,
        r = n(78),
        s = r.enableClassExtend,
        l = r.enableClassCheck,
        u = n(756),
        c = n(757),
        h = n(758),
        d = n(771),
        p = i.mixin,
        g = o();
      function f(e, t, n) {
        (this.parentModel = t), (this.ecModel = n), (this.option = e);
      }
      function m(e, t, n) {
        for (
          var i = 0;
          i < t.length && (!t[i] || null != (e = e && 'object' === typeof e ? e[t[i]] : null));
          i++
        );
        return null == e && n && (e = n.get(t)), e;
      }
      function v(e, t) {
        var n = g(e).getParent;
        return n ? n.call(e, t) : e.parentModel;
      }
      (f.prototype = {
        constructor: f,
        init: null,
        mergeOption: function(e) {
          i.merge(this.option, e, !0);
        },
        get: function(e, t) {
          return null == e ? this.option : m(this.option, this.parsePath(e), !t && v(this, e));
        },
        getShallow: function(e, t) {
          var n = this.option,
            i = null == n ? n : n[e],
            a = !t && v(this, e);
          return null == i && a && (i = a.getShallow(e)), i;
        },
        getModel: function(e, t) {
          var n;
          return new f(
            null == e ? this.option : m(this.option, (e = this.parsePath(e))),
            (t = t || ((n = v(this, e)) && n.getModel(e))),
            this.ecModel
          );
        },
        isEmpty: function() {
          return null == this.option;
        },
        restoreData: function() {},
        clone: function() {
          return new (0, this.constructor)(i.clone(this.option));
        },
        setReadOnly: function(e) {},
        parsePath: function(e) {
          return 'string' === typeof e && (e = e.split('.')), e;
        },
        customizeGetParent: function(e) {
          g(this).getParent = e;
        },
        isAnimationEnabled: function() {
          if (!a.node) {
            if (null != this.option.animation) return !!this.option.animation;
            if (this.parentModel) return this.parentModel.isAnimationEnabled();
          }
        }
      }),
        s(f),
        l(f),
        p(f, u),
        p(f, c),
        p(f, h),
        p(f, d);
      var y = f;
      e.exports = y;
    },
    function(e, t, n) {
      var i = n(2),
        a = n(36),
        o = n(149),
        r = n(78),
        s = r.enableClassManagement,
        l = r.parseClassType,
        u = n(18).makeInner,
        c = n(25),
        h = n(772),
        d = u(),
        p = a.extend({
          type: 'component',
          id: '',
          name: '',
          mainType: '',
          subType: '',
          componentIndex: 0,
          defaultOption: null,
          ecModel: null,
          dependentModels: [],
          uid: null,
          layoutMode: null,
          $constructor: function(e, t, n, i) {
            a.call(this, e, t, n, i), (this.uid = o.getUID('ec_cpt_model'));
          },
          init: function(e, t, n, i) {
            this.mergeDefaultAndTheme(e, n);
          },
          mergeDefaultAndTheme: function(e, t) {
            var n = this.layoutMode,
              a = n ? c.getLayoutParams(e) : {},
              o = t.getTheme();
            i.merge(e, o.get(this.mainType)),
              i.merge(e, this.getDefaultOption()),
              n && c.mergeLayoutParam(e, a, n);
          },
          mergeOption: function(e, t) {
            i.merge(this.option, e, !0);
            var n = this.layoutMode;
            n && c.mergeLayoutParam(this.option, e, n);
          },
          optionUpdated: function(e, t) {},
          getDefaultOption: function() {
            var e = d(this);
            if (!e.defaultOption) {
              for (var t = [], n = this.constructor; n; ) {
                var a = n.prototype.defaultOption;
                a && t.push(a), (n = n.superClass);
              }
              for (var o = {}, r = t.length - 1; r >= 0; r--) o = i.merge(o, t[r], !0);
              e.defaultOption = o;
            }
            return e.defaultOption;
          },
          getReferringComponents: function(e) {
            return this.ecModel.queryComponents({
              mainType: e,
              index: this.get(e + 'Index', !0),
              id: this.get(e + 'Id', !0)
            });
          }
        });
      s(p, { registerWhenExtend: !0 }),
        o.enableSubTypeDefaulter(p),
        o.enableTopologicalTravel(p, function(e) {
          var t = [];
          i.each(p.getClassesByMainType(e), function(e) {
            t = t.concat(e.prototype.dependencies || []);
          }),
            (t = i.map(t, function(e) {
              return l(e).main;
            })),
            'dataset' !== e && i.indexOf(t, 'dataset') <= 0 && t.unshift('dataset');
          return t;
        }),
        i.mixin(p, h);
      var g = p;
      e.exports = g;
    },
    function(e, t, n) {
      n(23).__DEV__;
      var i = n(2),
        a = n(35),
        o = n(30),
        r = o.formatTime,
        s = o.encodeHTML,
        l = o.addCommas,
        u = o.getTooltipMarker,
        c = n(18),
        h = n(37),
        d = n(415),
        p = n(291),
        g = n(25),
        f = g.getLayoutParams,
        m = g.mergeLayoutParam,
        v = n(292).createTask,
        y = n(196),
        x = y.prepareSource,
        _ = y.getSource,
        b = n(101).retrieveRawValue,
        S = c.makeInner(),
        w = h.extend({
          type: 'series.__base__',
          seriesIndex: 0,
          coordinateSystem: null,
          defaultOption: null,
          legendDataProvider: null,
          visualColorAccessPath: 'itemStyle.color',
          visualBorderColorAccessPath: 'itemStyle.borderColor',
          layoutMode: null,
          init: function(e, t, n, i) {
            (this.seriesIndex = this.componentIndex),
              (this.dataTask = v({ count: I, reset: A })),
              (this.dataTask.context = { model: this }),
              this.mergeDefaultAndTheme(e, n),
              x(this);
            var a = this.getInitialData(e, n);
            D(a, this),
              (this.dataTask.context.data = a),
              (S(this).dataBeforeProcessed = a),
              M(this);
          },
          mergeDefaultAndTheme: function(e, t) {
            var n = this.layoutMode,
              a = n ? f(e) : {},
              o = this.subType;
            h.hasClass(o) && (o += 'Series'),
              i.merge(e, t.getTheme().get(this.subType)),
              i.merge(e, this.getDefaultOption()),
              c.defaultEmphasis(e, 'label', ['show']),
              this.fillDataTextStyle(e.data),
              n && m(e, a, n);
          },
          mergeOption: function(e, t) {
            (e = i.merge(this.option, e, !0)), this.fillDataTextStyle(e.data);
            var n = this.layoutMode;
            n && m(this.option, e, n), x(this);
            var a = this.getInitialData(e, t);
            D(a, this),
              this.dataTask.dirty(),
              (this.dataTask.context.data = a),
              (S(this).dataBeforeProcessed = a),
              M(this);
          },
          fillDataTextStyle: function(e) {
            if (e && !i.isTypedArray(e))
              for (var t = ['show'], n = 0; n < e.length; n++)
                e[n] && e[n].label && c.defaultEmphasis(e[n], 'label', t);
          },
          getInitialData: function() {},
          appendData: function(e) {
            this.getRawData().appendData(e.data);
          },
          getData: function(e) {
            var t = L(this);
            if (t) {
              var n = t.context.data;
              return null == e ? n : n.getLinkedData(e);
            }
            return S(this).data;
          },
          setData: function(e) {
            var t = L(this);
            if (t) {
              var n = t.context;
              n.data !== e && t.modifyOutputEnd && t.setOutputEnd(e.count()),
                (n.outputData = e),
                t !== this.dataTask && (n.data = e);
            }
            S(this).data = e;
          },
          getSource: function() {
            return _(this);
          },
          getRawData: function() {
            return S(this).dataBeforeProcessed;
          },
          getBaseAxis: function() {
            var e = this.coordinateSystem;
            return e && e.getBaseAxis && e.getBaseAxis();
          },
          formatTooltip: function(e, t, n, a) {
            var o = this,
              h = 'html' === (a = a || 'html') ? '<br/>' : '\n',
              d = 'richText' === a,
              p = {},
              g = 0;
            function f(e) {
              return { renderMode: a, content: s(l(e)), style: p };
            }
            var m = this.getData(),
              v = m.mapDimension('defaultedTooltip', !0),
              y = v.length,
              x = this.getRawValue(e),
              _ = i.isArray(x),
              S = m.getItemVisual(e, 'color');
            i.isObject(S) && S.colorStops && (S = (S.colorStops[0] || {}).color),
              (S = S || 'transparent');
            var w = (y > 1 || (_ && !y)
                ? (function(n) {
                    var c = i.reduce(
                        n,
                        function(e, t, n) {
                          var i = m.getDimensionInfo(n);
                          return e | (i && !1 !== i.tooltip && null != i.displayName);
                        },
                        0
                      ),
                      h = [];
                    function f(e, n) {
                      var i = m.getDimensionInfo(n);
                      if (i && !1 !== i.otherDims.tooltip) {
                        var f = i.type,
                          v = 'sub' + o.seriesIndex + 'at' + g,
                          y = u({ color: S, type: 'subItem', renderMode: a, markerId: v }),
                          x = 'string' === typeof y ? y : y.content,
                          _ =
                            (c ? x + s(i.displayName || '-') + ': ' : '') +
                            s(
                              'ordinal' === f
                                ? e + ''
                                : 'time' === f
                                ? t
                                  ? ''
                                  : r('yyyy/MM/dd hh:mm:ss', e)
                                : l(e)
                            );
                        _ && h.push(_), d && ((p[v] = S), ++g);
                      }
                    }
                    v.length
                      ? i.each(v, function(t) {
                          f(b(m, e, t), t);
                        })
                      : i.each(n, f);
                    var y = c ? (d ? '\n' : '<br/>') : '',
                      x = y + h.join(y || ', ');
                    return { renderMode: a, content: x, style: p };
                  })(x)
                : f(y ? b(m, e, v[0]) : _ ? x[0] : x)
              ).content,
              M = o.seriesIndex + 'at' + g,
              I = u({ color: S, type: 'item', renderMode: a, markerId: M });
            (p[M] = S), ++g;
            var A = m.getName(e),
              T = this.name;
            c.isNameSpecified(this) || (T = ''), (T = T ? s(T) + (t ? ': ' : h) : '');
            var D = 'string' === typeof I ? I : I.content;
            return { html: t ? D + T + w : T + D + (A ? s(A) + ': ' + w : w), markers: p };
          },
          isAnimationEnabled: function() {
            if (a.node) return !1;
            var e = this.getShallow('animation');
            return (
              e && this.getData().count() > this.getShallow('animationThreshold') && (e = !1), e
            );
          },
          restoreData: function() {
            this.dataTask.dirty();
          },
          getColorFromPalette: function(e, t, n) {
            var i = this.ecModel,
              a = d.getColorFromPalette.call(this, e, t, n);
            return a || (a = i.getColorFromPalette(e, t, n)), a;
          },
          coordDimToDataDim: function(e) {
            return this.getRawData().mapDimension(e, !0);
          },
          getProgressive: function() {
            return this.get('progressive');
          },
          getProgressiveThreshold: function() {
            return this.get('progressiveThreshold');
          },
          getAxisTooltipData: null,
          getTooltipPosition: null,
          pipeTask: null,
          preventIncremental: null,
          pipelineContext: null
        });
      function M(e) {
        var t = e.name;
        c.isNameSpecified(e) ||
          (e.name =
            (function(e) {
              var t = e.getRawData(),
                n = t.mapDimension('seriesName', !0),
                a = [];
              return (
                i.each(n, function(e) {
                  var n = t.getDimensionInfo(e);
                  n.displayName && a.push(n.displayName);
                }),
                a.join(' ')
              );
            })(e) || t);
      }
      function I(e) {
        return e.model.getRawData().count();
      }
      function A(e) {
        var t = e.model;
        return t.setData(t.getRawData().cloneShallow()), T;
      }
      function T(e, t) {
        e.end > t.outputData.count() && t.model.getRawData().cloneShallow(t.outputData);
      }
      function D(e, t) {
        i.each(e.CHANGABLE_METHODS, function(n) {
          e.wrapMethod(n, i.curry(C, t));
        });
      }
      function C(e) {
        var t = L(e);
        t && t.setOutputEnd(this.count());
      }
      function L(e) {
        var t = (e.ecModel || {}).scheduler,
          n = t && t.getPipeline(e.uid);
        if (n) {
          var i = n.currentTask;
          if (i) {
            var a = i.agentStubMap;
            a && (i = a.get(e.uid));
          }
          return i;
        }
      }
      i.mixin(w, p), i.mixin(w, d);
      var P = w;
      e.exports = P;
    },
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    function(e, t, n) {
      n(23).__DEV__;
      var i = n(2),
        a = n(36),
        o = n(102),
        r = n(150),
        s = n(101),
        l = s.defaultDimValueGetters,
        u = s.DefaultDataProvider,
        c = n(152).summarizeDimensions,
        h = i.isObject,
        d = -1,
        p = 'e\0\0',
        g = {
          float: 'undefined' === typeof Float64Array ? Array : Float64Array,
          int: 'undefined' === typeof Int32Array ? Array : Int32Array,
          ordinal: Array,
          number: Array,
          time: Array
        },
        f = 'undefined' === typeof Uint32Array ? Array : Uint32Array,
        m = 'undefined' === typeof Int32Array ? Array : Int32Array,
        v = 'undefined' === typeof Uint16Array ? Array : Uint16Array;
      function y(e) {
        return e._rawCount > 65535 ? f : v;
      }
      function x(e) {
        var t = e.constructor;
        return t === Array ? e.slice() : new t(e);
      }
      var _ = [
          'hasItemOption',
          '_nameList',
          '_idList',
          '_invertedIndicesMap',
          '_rawData',
          '_chunkSize',
          '_chunkCount',
          '_dimValueGetter',
          '_count',
          '_rawCount',
          '_nameDimIdx',
          '_idDimIdx'
        ],
        b = ['_extent', '_approximateExtent', '_rawExtent'];
      function S(e, t) {
        i.each(_.concat(t.__wrappedMethods || []), function(n) {
          t.hasOwnProperty(n) && (e[n] = t[n]);
        }),
          (e.__wrappedMethods = t.__wrappedMethods),
          i.each(b, function(n) {
            e[n] = i.clone(t[n]);
          }),
          (e._calculationInfo = i.extend(t._calculationInfo));
      }
      var w = function(e, t) {
          e = e || ['x', 'y'];
          for (var n = {}, a = [], o = {}, r = 0; r < e.length; r++) {
            var s = e[r];
            i.isString(s) && (s = { name: s });
            var l = s.name;
            (s.type = s.type || 'float'),
              s.coordDim || ((s.coordDim = l), (s.coordDimIndex = 0)),
              (s.otherDims = s.otherDims || {}),
              a.push(l),
              (n[l] = s),
              (s.index = r),
              s.createInvertedIndices && (o[l] = []);
          }
          (this.dimensions = a),
            (this._dimensionInfos = n),
            (this.hostModel = t),
            this.dataType,
            (this._indices = null),
            (this._count = 0),
            (this._rawCount = 0),
            (this._storage = {}),
            (this._nameList = []),
            (this._idList = []),
            (this._optionModels = []),
            (this._visual = {}),
            (this._layout = {}),
            (this._itemVisuals = []),
            (this.hasItemVisual = {}),
            (this._itemLayouts = []),
            (this._graphicEls = []),
            (this._chunkSize = 1e5),
            (this._chunkCount = 0),
            this._rawData,
            (this._rawExtent = {}),
            (this._extent = {}),
            (this._approximateExtent = {}),
            (this._dimensionsSummary = c(this)),
            (this._invertedIndicesMap = o),
            (this._calculationInfo = {}),
            (this.userOutput = this._dimensionsSummary.userOutput);
        },
        M = w.prototype;
      function I(e, t, n, i, a) {
        var o = g[t.type],
          r = i - 1,
          s = t.name,
          l = e[s][r];
        if (l && l.length < n) {
          for (var u = new o(Math.min(a - r * n, n)), c = 0; c < l.length; c++) u[c] = l[c];
          e[s][r] = u;
        }
        for (var h = i * n; h < a; h += n) e[s].push(new o(Math.min(a - h, n)));
      }
      function A(e) {
        var t = e._invertedIndicesMap;
        i.each(t, function(n, i) {
          var a = e._dimensionInfos[i].ordinalMeta;
          if (a) {
            n = t[i] = new m(a.categories.length);
            for (var o = 0; o < n.length; o++) n[o] = d;
            for (o = 0; o < e._count; o++) n[e.get(i, o)] = o;
          }
        });
      }
      function T(e, t, n) {
        var i;
        if (null != t) {
          var a = e._chunkSize,
            o = Math.floor(n / a),
            r = n % a,
            s = e.dimensions[t],
            l = e._storage[s][o];
          if (l) {
            i = l[r];
            var u = e._dimensionInfos[s].ordinalMeta;
            u && u.categories.length && (i = u.categories[i]);
          }
        }
        return i;
      }
      function D(e) {
        return e;
      }
      function C(e) {
        return e < this._count && e >= 0 ? this._indices[e] : -1;
      }
      function L(e, t) {
        var n = e._idList[t];
        return null == n && (n = T(e, e._idDimIdx, t)), null == n && (n = p + t), n;
      }
      function P(e) {
        return i.isArray(e) || (e = [e]), e;
      }
      function O(e, t) {
        var n = e.dimensions,
          a = new w(i.map(n, e.getDimensionInfo, e), e.hostModel);
        S(a, e);
        for (var o = (a._storage = {}), r = e._storage, s = 0; s < n.length; s++) {
          var l = n[s];
          r[l] &&
            (i.indexOf(t, l) >= 0
              ? ((o[l] = k(r[l])), (a._rawExtent[l] = N()), (a._extent[l] = null))
              : (o[l] = r[l]));
        }
        return a;
      }
      function k(e) {
        for (var t = new Array(e.length), n = 0; n < e.length; n++) t[n] = x(e[n]);
        return t;
      }
      function N() {
        return [1 / 0, -1 / 0];
      }
      (M.type = 'list'),
        (M.hasItemOption = !0),
        (M.getDimension = function(e) {
          return (
            ('number' !== typeof e && (isNaN(e) || this._dimensionInfos.hasOwnProperty(e))) ||
              (e = this.dimensions[e]),
            e
          );
        }),
        (M.getDimensionInfo = function(e) {
          return this._dimensionInfos[this.getDimension(e)];
        }),
        (M.getDimensionsOnCoord = function() {
          return this._dimensionsSummary.dataDimsOnCoord.slice();
        }),
        (M.mapDimension = function(e, t) {
          var n = this._dimensionsSummary;
          if (null == t) return n.encodeFirstDimNotExtra[e];
          var i = n.encode[e];
          return !0 === t ? (i || []).slice() : i && i[t];
        }),
        (M.initData = function(e, t, n) {
          (r.isInstance(e) || i.isArrayLike(e)) && (e = new u(e, this.dimensions.length)),
            (this._rawData = e),
            (this._storage = {}),
            (this._indices = null),
            (this._nameList = t || []),
            (this._idList = []),
            (this._nameRepeatCount = {}),
            n || (this.hasItemOption = !1),
            (this.defaultDimValueGetter = l[this._rawData.getSource().sourceFormat]),
            (this._dimValueGetter = n = n || this.defaultDimValueGetter),
            (this._dimValueGetterArrayRows = l.arrayRows),
            (this._rawExtent = {}),
            this._initDataFromProvider(0, e.count()),
            e.pure && (this.hasItemOption = !1);
        }),
        (M.getProvider = function() {
          return this._rawData;
        }),
        (M.appendData = function(e) {
          var t = this._rawData,
            n = this.count();
          t.appendData(e);
          var i = t.count();
          t.persistent || (i += n), this._initDataFromProvider(n, i);
        }),
        (M.appendValues = function(e, t) {
          for (
            var n = this._chunkSize,
              i = this._storage,
              a = this.dimensions,
              o = a.length,
              r = this._rawExtent,
              s = this.count(),
              l = s + Math.max(e.length, t ? t.length : 0),
              u = this._chunkCount,
              c = 0;
            c < o;
            c++
          ) {
            r[(v = a[c])] || (r[v] = N()),
              i[v] || (i[v] = []),
              I(i, this._dimensionInfos[v], n, u, l),
              (this._chunkCount = i[v].length);
          }
          for (var h = new Array(o), d = s; d < l; d++) {
            for (var p = d - s, g = Math.floor(d / n), f = d % n, m = 0; m < o; m++) {
              var v = a[m],
                y = this._dimValueGetterArrayRows(e[p] || h, v, p, m);
              i[v][g][f] = y;
              var x = r[v];
              y < x[0] && (x[0] = y), y > x[1] && (x[1] = y);
            }
            t && (this._nameList[d] = t[p]);
          }
          (this._rawCount = this._count = l), (this._extent = {}), A(this);
        }),
        (M._initDataFromProvider = function(e, t) {
          if (!(e >= t)) {
            for (
              var n,
                i = this._chunkSize,
                a = this._rawData,
                o = this._storage,
                r = this.dimensions,
                s = r.length,
                l = this._dimensionInfos,
                u = this._nameList,
                c = this._idList,
                h = this._rawExtent,
                d = (this._nameRepeatCount = {}),
                p = this._chunkCount,
                g = 0;
              g < s;
              g++
            ) {
              h[(b = r[g])] || (h[b] = N());
              var f = l[b];
              0 === f.otherDims.itemName && (n = this._nameDimIdx = g),
                0 === f.otherDims.itemId && (this._idDimIdx = g),
                o[b] || (o[b] = []),
                I(o, f, i, p, t),
                (this._chunkCount = o[b].length);
            }
            for (var m = new Array(s), v = e; v < t; v++) {
              m = a.getItem(v, m);
              for (var y = Math.floor(v / i), x = v % i, _ = 0; _ < s; _++) {
                var b,
                  S = o[(b = r[_])][y],
                  w = this._dimValueGetter(m, b, v, _);
                S[x] = w;
                var M = h[b];
                w < M[0] && (M[0] = w), w > M[1] && (M[1] = w);
              }
              if (!a.pure) {
                var T = u[v];
                if (m && null == T)
                  if (null != m.name) u[v] = T = m.name;
                  else if (null != n) {
                    var D = r[n],
                      C = o[D][y];
                    if (C) {
                      T = C[x];
                      var L = l[D].ordinalMeta;
                      L && L.categories.length && (T = L.categories[T]);
                    }
                  }
                var P = null == m ? null : m.id;
                null == P &&
                  null != T &&
                  ((d[T] = d[T] || 0), (P = T), d[T] > 0 && (P += '__ec__' + d[T]), d[T]++),
                  null != P && (c[v] = P);
              }
            }
            !a.persistent && a.clean && a.clean(),
              (this._rawCount = this._count = t),
              (this._extent = {}),
              A(this);
          }
        }),
        (M.count = function() {
          return this._count;
        }),
        (M.getIndices = function() {
          var e = this._indices;
          if (e) {
            var t = e.constructor,
              n = this._count;
            if (t === Array) {
              a = new t(n);
              for (var i = 0; i < n; i++) a[i] = e[i];
            } else a = new t(e.buffer, 0, n);
          } else {
            var a = new (t = y(this))(this.count());
            for (i = 0; i < a.length; i++) a[i] = i;
          }
          return a;
        }),
        (M.get = function(e, t) {
          if (!(t >= 0 && t < this._count)) return NaN;
          var n = this._storage;
          if (!n[e]) return NaN;
          t = this.getRawIndex(t);
          var i = Math.floor(t / this._chunkSize),
            a = t % this._chunkSize;
          return n[e][i][a];
        }),
        (M.getByRawIndex = function(e, t) {
          if (!(t >= 0 && t < this._rawCount)) return NaN;
          var n = this._storage[e];
          if (!n) return NaN;
          var i = Math.floor(t / this._chunkSize),
            a = t % this._chunkSize;
          return n[i][a];
        }),
        (M._getFast = function(e, t) {
          var n = Math.floor(t / this._chunkSize),
            i = t % this._chunkSize;
          return this._storage[e][n][i];
        }),
        (M.getValues = function(e, t) {
          var n = [];
          i.isArray(e) || ((t = e), (e = this.dimensions));
          for (var a = 0, o = e.length; a < o; a++) n.push(this.get(e[a], t));
          return n;
        }),
        (M.hasValue = function(e) {
          for (var t = this._dimensionsSummary.dataDimsOnCoord, n = 0, i = t.length; n < i; n++)
            if (isNaN(this.get(t[n], e))) return !1;
          return !0;
        }),
        (M.getDataExtent = function(e) {
          e = this.getDimension(e);
          var t = this._storage[e],
            n = N();
          if (!t) return n;
          var i,
            a = this.count();
          if (!this._indices) return this._rawExtent[e].slice();
          if ((i = this._extent[e])) return i.slice();
          for (var o = (i = n)[0], r = i[1], s = 0; s < a; s++) {
            var l = this._getFast(e, this.getRawIndex(s));
            l < o && (o = l), l > r && (r = l);
          }
          return (i = [o, r]), (this._extent[e] = i), i;
        }),
        (M.getApproximateExtent = function(e) {
          return (e = this.getDimension(e)), this._approximateExtent[e] || this.getDataExtent(e);
        }),
        (M.setApproximateExtent = function(e, t) {
          (t = this.getDimension(t)), (this._approximateExtent[t] = e.slice());
        }),
        (M.getCalculationInfo = function(e) {
          return this._calculationInfo[e];
        }),
        (M.setCalculationInfo = function(e, t) {
          h(e) ? i.extend(this._calculationInfo, e) : (this._calculationInfo[e] = t);
        }),
        (M.getSum = function(e) {
          var t = 0;
          if (this._storage[e])
            for (var n = 0, i = this.count(); n < i; n++) {
              var a = this.get(e, n);
              isNaN(a) || (t += a);
            }
          return t;
        }),
        (M.getMedian = function(e) {
          var t = [];
          this.each(e, function(e, n) {
            isNaN(e) || t.push(e);
          });
          var n = [].concat(t).sort(function(e, t) {
              return e - t;
            }),
            i = this.count();
          return 0 === i ? 0 : i % 2 === 1 ? n[(i - 1) / 2] : (n[i / 2] + n[i / 2 - 1]) / 2;
        }),
        (M.rawIndexOf = function(e, t) {
          var n = (e && this._invertedIndicesMap[e])[t];
          return null == n || isNaN(n) ? d : n;
        }),
        (M.indexOfName = function(e) {
          for (var t = 0, n = this.count(); t < n; t++) if (this.getName(t) === e) return t;
          return -1;
        }),
        (M.indexOfRawIndex = function(e) {
          if (e >= this._rawCount || e < 0) return -1;
          if (!this._indices) return e;
          var t = this._indices,
            n = t[e];
          if (null != n && n < this._count && n === e) return e;
          for (var i = 0, a = this._count - 1; i <= a; ) {
            var o = ((i + a) / 2) | 0;
            if (t[o] < e) i = o + 1;
            else {
              if (!(t[o] > e)) return o;
              a = o - 1;
            }
          }
          return -1;
        }),
        (M.indicesOfNearest = function(e, t, n) {
          var i = [];
          if (!this._storage[e]) return i;
          null == n && (n = 1 / 0);
          for (var a = Number.MAX_VALUE, o = -1, r = 0, s = this.count(); r < s; r++) {
            var l = t - this.get(e, r),
              u = Math.abs(l);
            l <= n &&
              u <= a &&
              ((u < a || (l >= 0 && o < 0)) && ((a = u), (o = l), (i.length = 0)), i.push(r));
          }
          return i;
        }),
        (M.getRawIndex = D),
        (M.getRawDataItem = function(e) {
          if (this._rawData.persistent) return this._rawData.getItem(this.getRawIndex(e));
          for (var t = [], n = 0; n < this.dimensions.length; n++) {
            var i = this.dimensions[n];
            t.push(this.get(i, e));
          }
          return t;
        }),
        (M.getName = function(e) {
          var t = this.getRawIndex(e);
          return this._nameList[t] || T(this, this._nameDimIdx, t) || '';
        }),
        (M.getId = function(e) {
          return L(this, this.getRawIndex(e));
        }),
        (M.each = function(e, t, n, a) {
          'use strict';
          if (this._count) {
            'function' === typeof e && ((a = n), (n = t), (t = e), (e = [])), (n = n || a || this);
            for (
              var o = (e = i.map(P(e), this.getDimension, this)).length, r = 0;
              r < this.count();
              r++
            )
              switch (o) {
                case 0:
                  t.call(n, r);
                  break;
                case 1:
                  t.call(n, this.get(e[0], r), r);
                  break;
                case 2:
                  t.call(n, this.get(e[0], r), this.get(e[1], r), r);
                  break;
                default:
                  for (var s = 0, l = []; s < o; s++) l[s] = this.get(e[s], r);
                  (l[s] = r), t.apply(n, l);
              }
          }
        }),
        (M.filterSelf = function(e, t, n, a) {
          'use strict';
          if (this._count) {
            'function' === typeof e && ((a = n), (n = t), (t = e), (e = [])),
              (n = n || a || this),
              (e = i.map(P(e), this.getDimension, this));
            for (
              var o = this.count(),
                r = new (y(this))(o),
                s = [],
                l = e.length,
                u = 0,
                c = e[0],
                h = 0;
              h < o;
              h++
            ) {
              var d,
                p = this.getRawIndex(h);
              if (0 === l) d = t.call(n, h);
              else if (1 === l) {
                var g = this._getFast(c, p);
                d = t.call(n, g, h);
              } else {
                for (var f = 0; f < l; f++) s[f] = this._getFast(c, p);
                (s[f] = h), (d = t.apply(n, s));
              }
              d && (r[u++] = p);
            }
            return (
              u < o && (this._indices = r),
              (this._count = u),
              (this._extent = {}),
              (this.getRawIndex = this._indices ? C : D),
              this
            );
          }
        }),
        (M.selectRange = function(e) {
          'use strict';
          if (this._count) {
            var t = [];
            for (var n in e) e.hasOwnProperty(n) && t.push(n);
            var i = t.length;
            if (i) {
              var a = this.count(),
                o = new (y(this))(a),
                r = 0,
                s = t[0],
                l = e[s][0],
                u = e[s][1],
                c = !1;
              if (!this._indices) {
                var h = 0;
                if (1 === i) {
                  for (var d = this._storage[t[0]], p = 0; p < this._chunkCount; p++)
                    for (
                      var g = d[p],
                        f = Math.min(this._count - p * this._chunkSize, this._chunkSize),
                        m = 0;
                      m < f;
                      m++
                    ) {
                      (((S = g[m]) >= l && S <= u) || isNaN(S)) && (o[r++] = h), h++;
                    }
                  c = !0;
                } else if (2 === i) {
                  d = this._storage[s];
                  var v = this._storage[t[1]],
                    x = e[t[1]][0],
                    _ = e[t[1]][1];
                  for (p = 0; p < this._chunkCount; p++) {
                    g = d[p];
                    var b = v[p];
                    for (
                      f = Math.min(this._count - p * this._chunkSize, this._chunkSize), m = 0;
                      m < f;
                      m++
                    ) {
                      var S = g[m],
                        w = b[m];
                      ((S >= l && S <= u) || isNaN(S)) &&
                        ((w >= x && w <= _) || isNaN(w)) &&
                        (o[r++] = h),
                        h++;
                    }
                  }
                  c = !0;
                }
              }
              if (!c)
                if (1 === i)
                  for (m = 0; m < a; m++) {
                    var M = this.getRawIndex(m);
                    (((S = this._getFast(s, M)) >= l && S <= u) || isNaN(S)) && (o[r++] = M);
                  }
                else
                  for (m = 0; m < a; m++) {
                    var I = !0;
                    for (M = this.getRawIndex(m), p = 0; p < i; p++) {
                      var A = t[p];
                      ((S = this._getFast(n, M)) < e[A][0] || S > e[A][1]) && (I = !1);
                    }
                    I && (o[r++] = this.getRawIndex(m));
                  }
              return (
                r < a && (this._indices = o),
                (this._count = r),
                (this._extent = {}),
                (this.getRawIndex = this._indices ? C : D),
                this
              );
            }
          }
        }),
        (M.mapArray = function(e, t, n, i) {
          'use strict';
          'function' === typeof e && ((i = n), (n = t), (t = e), (e = [])), (n = n || i || this);
          var a = [];
          return (
            this.each(
              e,
              function() {
                a.push(t && t.apply(this, arguments));
              },
              n
            ),
            a
          );
        }),
        (M.map = function(e, t, n, a) {
          'use strict';
          n = n || a || this;
          var o = O(this, (e = i.map(P(e), this.getDimension, this)));
          (o._indices = this._indices), (o.getRawIndex = o._indices ? C : D);
          for (
            var r = o._storage,
              s = [],
              l = this._chunkSize,
              u = e.length,
              c = this.count(),
              h = [],
              d = o._rawExtent,
              p = 0;
            p < c;
            p++
          ) {
            for (var g = 0; g < u; g++) h[g] = this.get(e[g], p);
            h[u] = p;
            var f = t && t.apply(n, h);
            if (null != f) {
              'object' !== typeof f && ((s[0] = f), (f = s));
              for (
                var m = this.getRawIndex(p), v = Math.floor(m / l), y = m % l, x = 0;
                x < f.length;
                x++
              ) {
                var _ = e[x],
                  b = f[x],
                  S = d[_],
                  w = r[_];
                w && (w[v][y] = b), b < S[0] && (S[0] = b), b > S[1] && (S[1] = b);
              }
            }
          }
          return o;
        }),
        (M.downSample = function(e, t, n, i) {
          for (
            var a = O(this, [e]),
              o = a._storage,
              r = [],
              s = Math.floor(1 / t),
              l = o[e],
              u = this.count(),
              c = this._chunkSize,
              h = a._rawExtent[e],
              d = new (y(this))(u),
              p = 0,
              g = 0;
            g < u;
            g += s
          ) {
            s > u - g && ((s = u - g), (r.length = s));
            for (var f = 0; f < s; f++) {
              var m = this.getRawIndex(g + f),
                v = Math.floor(m / c),
                x = m % c;
              r[f] = l[v][x];
            }
            var _ = n(r),
              b = this.getRawIndex(Math.min(g + i(r, _) || 0, u - 1)),
              S = b % c;
            (l[Math.floor(b / c)][S] = _),
              _ < h[0] && (h[0] = _),
              _ > h[1] && (h[1] = _),
              (d[p++] = b);
          }
          return (a._count = p), (a._indices = d), (a.getRawIndex = C), a;
        }),
        (M.getItemModel = function(e) {
          var t = this.hostModel;
          return new a(this.getRawDataItem(e), t, t && t.ecModel);
        }),
        (M.diff = function(e) {
          var t = this;
          return new o(
            e ? e.getIndices() : [],
            this.getIndices(),
            function(t) {
              return L(e, t);
            },
            function(e) {
              return L(t, e);
            }
          );
        }),
        (M.getVisual = function(e) {
          var t = this._visual;
          return t && t[e];
        }),
        (M.setVisual = function(e, t) {
          if (h(e)) for (var n in e) e.hasOwnProperty(n) && this.setVisual(n, e[n]);
          else (this._visual = this._visual || {}), (this._visual[e] = t);
        }),
        (M.setLayout = function(e, t) {
          if (h(e)) for (var n in e) e.hasOwnProperty(n) && this.setLayout(n, e[n]);
          else this._layout[e] = t;
        }),
        (M.getLayout = function(e) {
          return this._layout[e];
        }),
        (M.getItemLayout = function(e) {
          return this._itemLayouts[e];
        }),
        (M.setItemLayout = function(e, t, n) {
          this._itemLayouts[e] = n ? i.extend(this._itemLayouts[e] || {}, t) : t;
        }),
        (M.clearItemLayouts = function() {
          this._itemLayouts.length = 0;
        }),
        (M.getItemVisual = function(e, t, n) {
          var i = this._itemVisuals[e],
            a = i && i[t];
          return null != a || n ? a : this.getVisual(t);
        }),
        (M.setItemVisual = function(e, t, n) {
          var i = this._itemVisuals[e] || {},
            a = this.hasItemVisual;
          if (((this._itemVisuals[e] = i), h(t)))
            for (var o in t) t.hasOwnProperty(o) && ((i[o] = t[o]), (a[o] = !0));
          else (i[t] = n), (a[t] = !0);
        }),
        (M.clearAllVisual = function() {
          (this._visual = {}), (this._itemVisuals = []), (this.hasItemVisual = {});
        });
      var R = function(e) {
        (e.seriesIndex = this.seriesIndex),
          (e.dataIndex = this.dataIndex),
          (e.dataType = this.dataType);
      };
      (M.setItemGraphicEl = function(e, t) {
        var n = this.hostModel;
        t &&
          ((t.dataIndex = e),
          (t.dataType = this.dataType),
          (t.seriesIndex = n && n.seriesIndex),
          'group' === t.type && t.traverse(R, t)),
          (this._graphicEls[e] = t);
      }),
        (M.getItemGraphicEl = function(e) {
          return this._graphicEls[e];
        }),
        (M.eachItemGraphicEl = function(e, t) {
          i.each(this._graphicEls, function(n, i) {
            n && e && e.call(t, n, i);
          });
        }),
        (M.cloneShallow = function(e) {
          if (!e) {
            var t = i.map(this.dimensions, this.getDimensionInfo, this);
            e = new w(t, this.hostModel);
          }
          if (((e._storage = this._storage), S(e, this), this._indices)) {
            var n = this._indices.constructor;
            e._indices = new n(this._indices);
          } else e._indices = null;
          return (e.getRawIndex = e._indices ? C : D), e;
        }),
        (M.wrapMethod = function(e, t) {
          var n = this[e];
          'function' === typeof n &&
            ((this.__wrappedMethods = this.__wrappedMethods || []),
            this.__wrappedMethods.push(e),
            (this[e] = function() {
              var e = n.apply(this, arguments);
              return t.apply(this, [e].concat(i.slice(arguments)));
            }));
        }),
        (M.TRANSFERABLE_METHODS = ['cloneShallow', 'downSample', 'map']),
        (M.CHANGABLE_METHODS = ['filterSelf', 'selectRange']);
      var E = w;
      e.exports = E;
    },
    function(e, t, n) {
      var i = n(2),
        a = n(6),
        o = n(29),
        r = n(52).calculateTextPosition,
        s = a.extendShape({
          type: 'triangle',
          shape: { cx: 0, cy: 0, width: 0, height: 0 },
          buildPath: function(e, t) {
            var n = t.cx,
              i = t.cy,
              a = t.width / 2,
              o = t.height / 2;
            e.moveTo(n, i - o), e.lineTo(n + a, i + o), e.lineTo(n - a, i + o), e.closePath();
          }
        }),
        l = a.extendShape({
          type: 'diamond',
          shape: { cx: 0, cy: 0, width: 0, height: 0 },
          buildPath: function(e, t) {
            var n = t.cx,
              i = t.cy,
              a = t.width / 2,
              o = t.height / 2;
            e.moveTo(n, i - o),
              e.lineTo(n + a, i),
              e.lineTo(n, i + o),
              e.lineTo(n - a, i),
              e.closePath();
          }
        }),
        u = a.extendShape({
          type: 'pin',
          shape: { x: 0, y: 0, width: 0, height: 0 },
          buildPath: function(e, t) {
            var n = t.x,
              i = t.y,
              a = (t.width / 5) * 3,
              o = Math.max(a, t.height),
              r = a / 2,
              s = (r * r) / (o - r),
              l = i - o + r + s,
              u = Math.asin(s / r),
              c = Math.cos(u) * r,
              h = Math.sin(u),
              d = Math.cos(u),
              p = 0.6 * r,
              g = 0.7 * r;
            e.moveTo(n - c, l + s),
              e.arc(n, l, r, Math.PI - u, 2 * Math.PI + u),
              e.bezierCurveTo(n + c - h * p, l + s + d * p, n, i - g, n, i),
              e.bezierCurveTo(n, i - g, n - c + h * p, l + s + d * p, n - c, l + s),
              e.closePath();
          }
        }),
        c = a.extendShape({
          type: 'arrow',
          shape: { x: 0, y: 0, width: 0, height: 0 },
          buildPath: function(e, t) {
            var n = t.height,
              i = t.width,
              a = t.x,
              o = t.y,
              r = (i / 3) * 2;
            e.moveTo(a, o),
              e.lineTo(a + r, o + n),
              e.lineTo(a, o + (n / 4) * 3),
              e.lineTo(a - r, o + n),
              e.lineTo(a, o),
              e.closePath();
          }
        }),
        h = {
          line: a.Line,
          rect: a.Rect,
          roundRect: a.Rect,
          square: a.Rect,
          circle: a.Circle,
          diamond: l,
          pin: u,
          arrow: c,
          triangle: s
        },
        d = {
          line: function(e, t, n, i, a) {
            (a.x1 = e), (a.y1 = t + i / 2), (a.x2 = e + n), (a.y2 = t + i / 2);
          },
          rect: function(e, t, n, i, a) {
            (a.x = e), (a.y = t), (a.width = n), (a.height = i);
          },
          roundRect: function(e, t, n, i, a) {
            (a.x = e), (a.y = t), (a.width = n), (a.height = i), (a.r = Math.min(n, i) / 4);
          },
          square: function(e, t, n, i, a) {
            var o = Math.min(n, i);
            (a.x = e), (a.y = t), (a.width = o), (a.height = o);
          },
          circle: function(e, t, n, i, a) {
            (a.cx = e + n / 2), (a.cy = t + i / 2), (a.r = Math.min(n, i) / 2);
          },
          diamond: function(e, t, n, i, a) {
            (a.cx = e + n / 2), (a.cy = t + i / 2), (a.width = n), (a.height = i);
          },
          pin: function(e, t, n, i, a) {
            (a.x = e + n / 2), (a.y = t + i / 2), (a.width = n), (a.height = i);
          },
          arrow: function(e, t, n, i, a) {
            (a.x = e + n / 2), (a.y = t + i / 2), (a.width = n), (a.height = i);
          },
          triangle: function(e, t, n, i, a) {
            (a.cx = e + n / 2), (a.cy = t + i / 2), (a.width = n), (a.height = i);
          }
        },
        p = {};
      i.each(h, function(e, t) {
        p[t] = new e();
      });
      var g = a.extendShape({
        type: 'symbol',
        shape: { symbolType: '', x: 0, y: 0, width: 0, height: 0 },
        calculateTextPosition: function(e, t, n) {
          var i = r(e, t, n),
            a = this.shape;
          return (
            a &&
              'pin' === a.symbolType &&
              'inside' === t.textPosition &&
              (i.y = n.y + 0.4 * n.height),
            i
          );
        },
        buildPath: function(e, t, n) {
          var i = t.symbolType;
          if ('none' !== i) {
            var a = p[i];
            a || (a = p[(i = 'rect')]),
              d[i](t.x, t.y, t.width, t.height, a.shape),
              a.buildPath(e, a.shape, n);
          }
        }
      });
      function f(e, t) {
        if ('image' !== this.type) {
          var n = this.style,
            i = this.shape;
          i && 'line' === i.symbolType
            ? (n.stroke = e)
            : this.__isEmptyBrush
            ? ((n.stroke = e), (n.fill = t || '#fff'))
            : (n.fill && (n.fill = e), n.stroke && (n.stroke = e)),
            this.dirty(!1);
        }
      }
      t.createSymbol = function(e, t, n, i, r, s, l) {
        var u,
          c = 0 === e.indexOf('empty');
        return (
          c && (e = e.substr(5, 1).toLowerCase() + e.substr(6)),
          ((u =
            0 === e.indexOf('image://')
              ? a.makeImage(e.slice(8), new o(t, n, i, r), l ? 'center' : 'cover')
              : 0 === e.indexOf('path://')
              ? a.makePath(e.slice(7), {}, new o(t, n, i, r), l ? 'center' : 'cover')
              : new g({
                  shape: { symbolType: e, x: t, y: n, width: i, height: r }
                })).__isEmptyBrush = c),
          (u.setColor = f),
          u.setColor(s),
          u
        );
      };
    },
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    function(e, t, n) {
      var i = n(2),
        a = {};
      function o() {
        this._coordinateSystems = [];
      }
      (o.prototype = {
        constructor: o,
        create: function(e, t) {
          var n = [];
          i.each(a, function(i, a) {
            var o = i.create(e, t);
            n = n.concat(o || []);
          }),
            (this._coordinateSystems = n);
        },
        update: function(e, t) {
          i.each(this._coordinateSystems, function(n) {
            n.update && n.update(e, t);
          });
        },
        getCoordinateSystems: function() {
          return this._coordinateSystems.slice();
        }
      }),
        (o.register = function(e, t) {
          a[e] = t;
        }),
        (o.get = function(e) {
          return a[e];
        });
      var r = o;
      e.exports = r;
    },
    function(e, t, n) {
      n(23).__DEV__;
      var i = n(2),
        a = n(786),
        o = n(199),
        r = n(198),
        s = n(16),
        l = n(200),
        u = l.prepareLayoutBarSeries,
        c = l.makeColumnLayout,
        h = l.retrieveColumnLayout,
        d = n(29);
      function p(e, t) {
        var n,
          a,
          o,
          r = e.type,
          l = t.getMin(),
          d = t.getMax(),
          p = null != l,
          g = null != d,
          f = e.getExtent();
        'ordinal' === r
          ? (n = t.getCategories().length)
          : ((a = t.get('boundaryGap')),
            i.isArray(a) || (a = [a || 0, a || 0]),
            'boolean' === typeof a[0] && (a = [0, 0]),
            (a[0] = s.parsePercent(a[0], 1)),
            (a[1] = s.parsePercent(a[1], 1)),
            (o = f[1] - f[0] || Math.abs(f[0]))),
          null == l && (l = 'ordinal' === r ? (n ? 0 : NaN) : f[0] - a[0] * o),
          null == d && (d = 'ordinal' === r ? (n ? n - 1 : NaN) : f[1] + a[1] * o),
          'dataMin' === l
            ? (l = f[0])
            : 'function' === typeof l && (l = l({ min: f[0], max: f[1] })),
          'dataMax' === d
            ? (d = f[1])
            : 'function' === typeof d && (d = d({ min: f[0], max: f[1] })),
          (null == l || !isFinite(l)) && (l = NaN),
          (null == d || !isFinite(d)) && (d = NaN),
          e.setBlank(
            i.eqNaN(l) || i.eqNaN(d) || ('ordinal' === r && !e.getOrdinalMeta().categories.length)
          ),
          t.getNeedCrossZero() &&
            (l > 0 && d > 0 && !p && (l = 0), l < 0 && d < 0 && !g && (d = 0));
        var m = t.ecModel;
        if (m && 'time' === r) {
          var v,
            y = u('bar', m);
          if (
            (i.each(y, function(e) {
              v |= e.getBaseAxis() === t.axis;
            }),
            v)
          ) {
            var x = c(y),
              _ = (function(e, t, n, a) {
                var o = n.axis.getExtent(),
                  r = o[1] - o[0],
                  s = h(a, n.axis);
                if (void 0 === s) return { min: e, max: t };
                var l = 1 / 0;
                i.each(s, function(e) {
                  l = Math.min(e.offset, l);
                });
                var u = -1 / 0;
                i.each(s, function(e) {
                  u = Math.max(e.offset + e.width, u);
                }),
                  (l = Math.abs(l)),
                  (u = Math.abs(u));
                var c = l + u,
                  d = t - e,
                  p = d / (1 - (l + u) / r) - d;
                return { min: (e -= p * (l / c)), max: (t += p * (u / c)) };
              })(l, d, t, x);
            (l = _.min), (d = _.max);
          }
        }
        return [l, d];
      }
      function g(e) {
        var t,
          n = e.getLabelModel().get('formatter'),
          i = 'category' === e.type ? e.scale.getExtent()[0] : null;
        return 'string' === typeof n
          ? ((t = n),
            (n = function(n) {
              return (n = e.scale.getLabel(n)), t.replace('{value}', null != n ? n : '');
            }))
          : 'function' === typeof n
          ? function(t, a) {
              return null != i && (a = t - i), n(f(e, t), a);
            }
          : function(t) {
              return e.scale.getLabel(t);
            };
      }
      function f(e, t) {
        return 'category' === e.type ? e.scale.getLabel(t) : t;
      }
      function m(e, t) {
        var n = (t * Math.PI) / 180,
          i = e.plain(),
          a = i.width,
          o = i.height,
          r = a * Math.cos(n) + o * Math.sin(n),
          s = a * Math.sin(n) + o * Math.cos(n);
        return new d(i.x, i.y, r, s);
      }
      function v(e) {
        var t = e.get('interval');
        return null == t ? 'auto' : t;
      }
      n(787),
        n(422),
        (t.getScaleExtent = p),
        (t.niceScaleExtent = function(e, t) {
          var n = p(e, t),
            i = null != t.getMin(),
            a = null != t.getMax(),
            o = t.get('splitNumber');
          'log' === e.type && (e.base = t.get('logBase'));
          var r = e.type;
          e.setExtent(n[0], n[1]),
            e.niceExtent({
              splitNumber: o,
              fixMin: i,
              fixMax: a,
              minInterval: 'interval' === r || 'time' === r ? t.get('minInterval') : null,
              maxInterval: 'interval' === r || 'time' === r ? t.get('maxInterval') : null
            });
          var s = t.get('interval');
          null != s && e.setInterval && e.setInterval(s);
        }),
        (t.createScaleByModel = function(e, t) {
          if ((t = t || e.get('type')))
            switch (t) {
              case 'category':
                return new a(e.getOrdinalMeta ? e.getOrdinalMeta() : e.getCategories(), [
                  1 / 0,
                  -1 / 0
                ]);
              case 'value':
                return new o();
              default:
                return (r.getClass(t) || o).create(e);
            }
        }),
        (t.ifAxisCrossZero = function(e) {
          var t = e.scale.getExtent(),
            n = t[0],
            i = t[1];
          return !((n > 0 && i > 0) || (n < 0 && i < 0));
        }),
        (t.makeLabelFormatter = g),
        (t.getAxisRawValue = f),
        (t.estimateLabelUnionRect = function(e) {
          var t = e.model,
            n = e.scale;
          if (t.get('axisLabel.show') && !n.isBlank()) {
            var i,
              a,
              o = 'category' === e.type,
              r = n.getExtent();
            a = o ? n.count() : (i = n.getTicks()).length;
            var s,
              l = e.getLabelModel(),
              u = g(e),
              c = 1;
            a > 40 && (c = Math.ceil(a / 40));
            for (var h = 0; h < a; h += c) {
              var d = u(i ? i[h] : r[0] + h),
                p = m(l.getTextRect(d), l.get('rotate') || 0);
              s ? s.union(p) : (s = p);
            }
            return s;
          }
        }),
        (t.getOptionCategoryInterval = v),
        (t.shouldShowAllLabels = function(e) {
          return 'category' === e.type && 0 === v(e.getLabelModel());
        });
    },
    ,
    ,
    ,
    ,
    ,
    ,
    function(e, t, n) {
      var i = n(2).each,
        a = n(118),
        o = n(149),
        r = n(78),
        s = n(18),
        l = n(6),
        u = n(292).createTask,
        c = n(122),
        h = s.makeInner(),
        d = c();
      function p() {
        (this.group = new a()),
          (this.uid = o.getUID('viewChart')),
          (this.renderTask = u({ plan: v, reset: y })),
          (this.renderTask.context = { view: this });
      }
      p.prototype = {
        type: 'chart',
        init: function(e, t) {},
        render: function(e, t, n, i) {},
        highlight: function(e, t, n, i) {
          m(e.getData(), i, 'emphasis');
        },
        downplay: function(e, t, n, i) {
          m(e.getData(), i, 'normal');
        },
        remove: function(e, t) {
          this.group.removeAll();
        },
        dispose: function() {},
        incrementalPrepareRender: null,
        incrementalRender: null,
        updateTransform: null,
        filterForExposedEvent: null
      };
      var g = p.prototype;
      function f(e, t, n) {
        if (e && (e.trigger(t, n), e.isGroup && !l.isHighDownDispatcher(e)))
          for (var i = 0, a = e.childCount(); i < a; i++) f(e.childAt(i), t, n);
      }
      function m(e, t, n) {
        var a = s.queryDataIndex(e, t),
          o = t && null != t.highlightKey ? l.getHighlightDigit(t.highlightKey) : null;
        null != a
          ? i(s.normalizeToArray(a), function(t) {
              f(e.getItemGraphicEl(t), n, o);
            })
          : e.eachItemGraphicEl(function(e) {
              f(e, n, o);
            });
      }
      function v(e) {
        return d(e.model);
      }
      function y(e) {
        var t = e.model,
          n = e.ecModel,
          i = e.api,
          a = e.payload,
          o = t.pipelineContext.progressiveRender,
          r = e.view,
          s = a && h(a).updateMethod,
          l = o ? 'incrementalPrepareRender' : s && r[s] ? s : 'render';
        return 'render' !== l && r[l](t, n, i, a), x[l];
      }
      (g.updateView = g.updateLayout = g.updateVisual = function(e, t, n, i) {
        this.render(e, t, n, i);
      }),
        r.enableClassExtend(p, ['dispose']),
        r.enableClassManagement(p, { registerWhenExtend: !0 }),
        (p.markUpdateMethod = function(e, t) {
          h(e).updateMethod = t;
        });
      var x = {
          incrementalPrepareRender: {
            progress: function(e, t) {
              t.view.incrementalRender(e, t.model, t.ecModel, t.api, t.payload);
            }
          },
          render: {
            forceFirstProgress: !0,
            progress: function(e, t) {
              t.view.render(t.model, t.ecModel, t.api, t.payload);
            }
          }
        },
        _ = p;
      e.exports = _;
    },
    function(e, t, n) {
      var i = n(2),
        a = i.each,
        o = i.isString;
      function r(e, t) {
        return !!t && t === e.getCalculationInfo('stackedDimension');
      }
      (t.enableDataStack = function(e, t, n) {
        var i,
          r,
          s,
          l,
          u = (n = n || {}).byIndex,
          c = n.stackedCoordDimension,
          h = !(!e || !e.get('stack'));
        if (
          (a(t, function(e, n) {
            o(e) && (t[n] = e = { name: e }),
              h &&
                !e.isExtraCoord &&
                (u || i || !e.ordinalMeta || (i = e),
                r ||
                  'ordinal' === e.type ||
                  'time' === e.type ||
                  (c && c !== e.coordDim) ||
                  (r = e));
          }),
          !r || u || i || (u = !0),
          r)
        ) {
          (s = '__\0ecstackresult'), (l = '__\0ecstackedover'), i && (i.createInvertedIndices = !0);
          var d = r.coordDim,
            p = r.type,
            g = 0;
          a(t, function(e) {
            e.coordDim === d && g++;
          }),
            t.push({
              name: s,
              coordDim: d,
              coordDimIndex: g,
              type: p,
              isExtraCoord: !0,
              isCalculationCoord: !0
            }),
            g++,
            t.push({
              name: l,
              coordDim: l,
              coordDimIndex: g,
              type: p,
              isExtraCoord: !0,
              isCalculationCoord: !0
            });
        }
        return {
          stackedDimension: r && r.name,
          stackedByDimension: i && i.name,
          isStackedByIndex: u,
          stackedOverDimension: l,
          stackResultDimension: s
        };
      }),
        (t.isDimensionStacked = r),
        (t.getStackedDimension = function(e, t) {
          return r(e, t) ? e.getCalculationInfo('stackResultDimension') : t;
        });
    },
    ,
    ,
    ,
    ,
    ,
    function(e, t, n) {
      n(23).__DEV__;
      var i = n(2),
        a = '.',
        o = '___EC__COMPONENT__CONTAINER___';
      function r(e) {
        var t = { main: '', sub: '' };
        return e && ((e = e.split(a)), (t.main = e[0] || ''), (t.sub = e[1] || '')), t;
      }
      var s = 0;
      function l(e, t) {
        var n = i.slice(arguments, 2);
        return this.superClass.prototype[t].apply(e, n);
      }
      function u(e, t, n) {
        return this.superClass.prototype[t].apply(e, n);
      }
      (t.parseClassType = r),
        (t.enableClassExtend = function(e, t) {
          (e.$constructor = e),
            (e.extend = function(e) {
              var t = this,
                n = function() {
                  e.$constructor ? e.$constructor.apply(this, arguments) : t.apply(this, arguments);
                };
              return (
                i.extend(n.prototype, e),
                (n.extend = this.extend),
                (n.superCall = l),
                (n.superApply = u),
                i.inherits(n, this),
                (n.superClass = t),
                n
              );
            });
        }),
        (t.enableClassCheck = function(e) {
          var t = ['__\0is_clz', s++, Math.random().toFixed(3)].join('_');
          (e.prototype[t] = !0),
            (e.isInstance = function(e) {
              return !(!e || !e[t]);
            });
        }),
        (t.enableClassManagement = function(e, t) {
          t = t || {};
          var n = {};
          if (
            ((e.registerClass = function(e, t) {
              if (t)
                if (
                  ((function(e) {
                    i.assert(
                      /^[a-zA-Z0-9_]+([.][a-zA-Z0-9_]+)?$/.test(e),
                      'componentType "' + e + '" illegal'
                    );
                  })(t),
                  (t = r(t)).sub)
                ) {
                  if (t.sub !== o) {
                    (function(e) {
                      var t = n[e.main];
                      (t && t[o]) || ((t = n[e.main] = {})[o] = !0);
                      return t;
                    })(t)[t.sub] = e;
                  }
                } else n[t.main] = e;
              return e;
            }),
            (e.getClass = function(e, t, i) {
              var a = n[e];
              if ((a && a[o] && (a = t ? a[t] : null), i && !a))
                throw new Error(
                  t
                    ? 'Component ' + e + '.' + (t || '') + ' not exists. Load it first.'
                    : e + '.type should be specified.'
                );
              return a;
            }),
            (e.getClassesByMainType = function(e) {
              e = r(e);
              var t = [],
                a = n[e.main];
              return (
                a && a[o]
                  ? i.each(a, function(e, n) {
                      n !== o && t.push(e);
                    })
                  : t.push(a),
                t
              );
            }),
            (e.hasClass = function(e) {
              return (e = r(e)), !!n[e.main];
            }),
            (e.getAllClassMainTypes = function() {
              var e = [];
              return (
                i.each(n, function(t, n) {
                  e.push(n);
                }),
                e
              );
            }),
            (e.hasSubTypes = function(e) {
              e = r(e);
              var t = n[e.main];
              return t && t[o];
            }),
            (e.parseClassType = r),
            t.registerWhenExtend)
          ) {
            var a = e.extend;
            a &&
              (e.extend = function(t) {
                var n = a.call(this, t);
                return e.registerClass(n, t.type);
              });
          }
          return e;
        }),
        (t.setReadOnly = function(e, t) {});
    },
    function(e, t, n) {
      var i = n(2),
        a = n(53),
        o = n(123),
        r = n(151).SOURCE_FORMAT_ORIGINAL,
        s = n(152).getDimensionTypeByAxis,
        l = n(18).getDataItemValue,
        u = n(63),
        c = n(416).getCoordSysDefineBySeries,
        h = n(150),
        d = n(72).enableDataStack;
      var p = function(e, t, n) {
        (n = n || {}), h.isInstance(e) || (e = h.seriesDataToSource(e));
        var p,
          g = t.get('coordinateSystem'),
          f = u.get(g),
          m = c(t);
        m &&
          (p = i.map(m.coordSysDims, function(e) {
            var t = { name: e },
              n = m.axisMap.get(e);
            if (n) {
              var i = n.get('type');
              t.type = s(i);
            }
            return t;
          })),
          p ||
            (p = (f && (f.getDimensionsInfo ? f.getDimensionsInfo() : f.dimensions.slice())) || [
              'x',
              'y'
            ]);
        var v,
          y,
          x = o(e, { coordDimensions: p, generateCoord: n.generateCoord });
        m &&
          i.each(x, function(e, t) {
            var n = e.coordDim,
              i = m.categoryAxisMap.get(n);
            i && (null == v && (v = t), (e.ordinalMeta = i.getOrdinalMeta())),
              null != e.otherDims.itemName && (y = !0);
          }),
          y || null == v || (x[v].otherDims.itemName = 0);
        var _ = d(t, x),
          b = new a(x, t);
        b.setCalculationInfo(_);
        var S =
          null != v &&
          (function(e) {
            if (e.sourceFormat === r) {
              var t = (function(e) {
                var t = 0;
                for (; t < e.length && null == e[t]; ) t++;
                return e[t];
              })(e.data || []);
              return null != t && !i.isArray(l(t));
            }
          })(e)
            ? function(e, t, n, i) {
                return i === v ? n : this.defaultDimValueGetter(e, t, n, i);
              }
            : null;
        return (b.hasItemOption = !1), b.initData(e, null, S), b;
      };
      e.exports = p;
    },
    ,
    ,
    ,
    ,
    ,
    function(e, t) {
      var n = '\0__throttleOriginMethod',
        i = '\0__throttleRate',
        a = '\0__throttleType';
      function o(e, t, n) {
        var i,
          a,
          o,
          r,
          s,
          l = 0,
          u = 0,
          c = null;
        function h() {
          (u = new Date().getTime()), (c = null), e.apply(o, r || []);
        }
        t = t || 0;
        var d = function() {
          (i = new Date().getTime()), (o = this), (r = arguments);
          var e = s || t,
            d = s || n;
          (s = null),
            (a = i - (d ? l : u) - e),
            clearTimeout(c),
            d ? (c = setTimeout(h, e)) : a >= 0 ? h() : (c = setTimeout(h, -a)),
            (l = i);
        };
        return (
          (d.clear = function() {
            c && (clearTimeout(c), (c = null));
          }),
          (d.debounceNextCall = function(e) {
            s = e;
          }),
          d
        );
      }
      (t.throttle = o),
        (t.createOrUpdate = function(e, t, r, s) {
          var l = e[t];
          if (l) {
            var u = l[n] || l,
              c = l[a];
            if (l[i] !== r || c !== s) {
              if (null == r || !s) return (e[t] = u);
              ((l = e[t] = o(u, r, 'debounce' === s))[n] = u), (l[a] = s), (l[i] = r);
            }
            return l;
          }
        }),
        (t.clear = function(e, t) {
          var i = e[t];
          i && i[n] && (e[t] = i[n]);
        });
    },
    function(e, t) {
      e.exports = {
        legend: { selector: { all: '\u5168\u9009', inverse: '\u53cd\u9009' } },
        toolbox: {
          brush: {
            title: {
              rect: '\u77e9\u5f62\u9009\u62e9',
              polygon: '\u5708\u9009',
              lineX: '\u6a2a\u5411\u9009\u62e9',
              lineY: '\u7eb5\u5411\u9009\u62e9',
              keep: '\u4fdd\u6301\u9009\u62e9',
              clear: '\u6e05\u9664\u9009\u62e9'
            }
          },
          dataView: {
            title: '\u6570\u636e\u89c6\u56fe',
            lang: ['\u6570\u636e\u89c6\u56fe', '\u5173\u95ed', '\u5237\u65b0']
          },
          dataZoom: {
            title: {
              zoom: '\u533a\u57df\u7f29\u653e',
              back: '\u533a\u57df\u7f29\u653e\u8fd8\u539f'
            }
          },
          magicType: {
            title: {
              line: '\u5207\u6362\u4e3a\u6298\u7ebf\u56fe',
              bar: '\u5207\u6362\u4e3a\u67f1\u72b6\u56fe',
              stack: '\u5207\u6362\u4e3a\u5806\u53e0',
              tiled: '\u5207\u6362\u4e3a\u5e73\u94fa'
            }
          },
          restore: { title: '\u8fd8\u539f' },
          saveAsImage: {
            title: '\u4fdd\u5b58\u4e3a\u56fe\u7247',
            lang: ['\u53f3\u952e\u53e6\u5b58\u4e3a\u56fe\u7247']
          }
        },
        series: {
          typeNames: {
            pie: '\u997c\u56fe',
            bar: '\u67f1\u72b6\u56fe',
            line: '\u6298\u7ebf\u56fe',
            scatter: '\u6563\u70b9\u56fe',
            effectScatter: '\u6d9f\u6f2a\u6563\u70b9\u56fe',
            radar: '\u96f7\u8fbe\u56fe',
            tree: '\u6811\u56fe',
            treemap: '\u77e9\u5f62\u6811\u56fe',
            boxplot: '\u7bb1\u578b\u56fe',
            candlestick: 'K\u7ebf\u56fe',
            k: 'K\u7ebf\u56fe',
            heatmap: '\u70ed\u529b\u56fe',
            map: '\u5730\u56fe',
            parallel: '\u5e73\u884c\u5750\u6807\u56fe',
            lines: '\u7ebf\u56fe',
            graph: '\u5173\u7cfb\u56fe',
            sankey: '\u6851\u57fa\u56fe',
            funnel: '\u6f0f\u6597\u56fe',
            gauge: '\u4eea\u8868\u76d8\u56fe',
            pictorialBar: '\u8c61\u5f62\u67f1\u56fe',
            themeRiver: '\u4e3b\u9898\u6cb3\u6d41\u56fe',
            sunburst: '\u65ed\u65e5\u56fe'
          }
        },
        aria: {
          general: {
            withTitle:
              '\u8fd9\u662f\u4e00\u4e2a\u5173\u4e8e\u201c{title}\u201d\u7684\u56fe\u8868\u3002',
            withoutTitle: '\u8fd9\u662f\u4e00\u4e2a\u56fe\u8868\uff0c'
          },
          series: {
            single: {
              prefix: '',
              withName:
                '\u56fe\u8868\u7c7b\u578b\u662f{seriesType}\uff0c\u8868\u793a{seriesName}\u3002',
              withoutName: '\u56fe\u8868\u7c7b\u578b\u662f{seriesType}\u3002'
            },
            multiple: {
              prefix: '\u5b83\u7531{seriesCount}\u4e2a\u56fe\u8868\u7cfb\u5217\u7ec4\u6210\u3002',
              withName:
                '\u7b2c{seriesId}\u4e2a\u7cfb\u5217\u662f\u4e00\u4e2a\u8868\u793a{seriesName}\u7684{seriesType}\uff0c',
              withoutName: '\u7b2c{seriesId}\u4e2a\u7cfb\u5217\u662f\u4e00\u4e2a{seriesType}\uff0c',
              separator: { middle: '\uff1b', end: '\u3002' }
            }
          },
          data: {
            allData: '\u5176\u6570\u636e\u662f\u2014\u2014',
            partialData: '\u5176\u4e2d\uff0c\u524d{displayCnt}\u9879\u662f\u2014\u2014',
            withName: '{name}\u7684\u6570\u636e\u662f{value}',
            withoutName: '{value}',
            separator: { middle: '\uff0c', end: '' }
          }
        }
      };
    },
    function(e, t, n) {
      var i = n(2),
        a = i.each,
        o = i.map,
        r = n(16),
        s = r.linearMap,
        l = r.getPixelPrecision,
        u = r.round,
        c = n(788),
        h = c.createAxisTicks,
        d = c.createAxisLabels,
        p = c.calculateCategoryInterval,
        g = [0, 1],
        f = function(e, t, n) {
          (this.dim = e),
            (this.scale = t),
            (this._extent = n || [0, 0]),
            (this.inverse = !1),
            (this.onBand = !1);
        };
      function m(e, t) {
        var n = (e[1] - e[0]) / t / 2;
        (e[0] += n), (e[1] -= n);
      }
      f.prototype = {
        constructor: f,
        contain: function(e) {
          var t = this._extent,
            n = Math.min(t[0], t[1]),
            i = Math.max(t[0], t[1]);
          return e >= n && e <= i;
        },
        containData: function(e) {
          return this.contain(this.dataToCoord(e));
        },
        getExtent: function() {
          return this._extent.slice();
        },
        getPixelPrecision: function(e) {
          return l(e || this.scale.getExtent(), this._extent);
        },
        setExtent: function(e, t) {
          var n = this._extent;
          (n[0] = e), (n[1] = t);
        },
        dataToCoord: function(e, t) {
          var n = this._extent,
            i = this.scale;
          return (
            (e = i.normalize(e)),
            this.onBand && 'ordinal' === i.type && m((n = n.slice()), i.count()),
            s(e, g, n, t)
          );
        },
        coordToData: function(e, t) {
          var n = this._extent,
            i = this.scale;
          this.onBand && 'ordinal' === i.type && m((n = n.slice()), i.count());
          var a = s(e, n, g, t);
          return this.scale.scale(a);
        },
        pointToData: function(e, t) {},
        getTicksCoords: function(e) {
          var t = (e = e || {}).tickModel || this.getTickModel(),
            n = h(this, t).ticks,
            i = o(
              n,
              function(e) {
                return { coord: this.dataToCoord(e), tickValue: e };
              },
              this
            );
          return (
            (function(e, t, n, i) {
              var o = t.length;
              if (!e.onBand || n || !o) return;
              var r,
                s,
                l = e.getExtent();
              if (1 === o) (t[0].coord = l[0]), (r = t[1] = { coord: l[0] });
              else {
                var c = t[o - 1].tickValue - t[0].tickValue,
                  h = (t[o - 1].coord - t[0].coord) / c;
                a(t, function(e) {
                  e.coord -= h / 2;
                });
                var d = e.scale.getExtent();
                (s = 1 + d[1] - t[o - 1].tickValue),
                  (r = { coord: t[o - 1].coord + h * s }),
                  t.push(r);
              }
              var p = l[0] > l[1];
              g(t[0].coord, l[0]) && (i ? (t[0].coord = l[0]) : t.shift());
              i && g(l[0], t[0].coord) && t.unshift({ coord: l[0] });
              g(l[1], r.coord) && (i ? (r.coord = l[1]) : t.pop());
              i && g(r.coord, l[1]) && t.push({ coord: l[1] });
              function g(e, t) {
                return (e = u(e)), (t = u(t)), p ? e > t : e < t;
              }
            })(this, i, t.get('alignWithLabel'), e.clamp),
            i
          );
        },
        getViewLabels: function() {
          return d(this).labels;
        },
        getLabelModel: function() {
          return this.model.getModel('axisLabel');
        },
        getTickModel: function() {
          return this.model.getModel('axisTick');
        },
        getBandWidth: function() {
          var e = this._extent,
            t = this.scale.getExtent(),
            n = t[1] - t[0] + (this.onBand ? 1 : 0);
          0 === n && (n = 1);
          var i = Math.abs(e[1] - e[0]);
          return Math.abs(i) / n;
        },
        isHorizontal: null,
        getRotate: null,
        calculateCategoryInterval: function() {
          return p(this);
        }
      };
      var v = f;
      e.exports = v;
    },
    function(e, t, n) {
      var i = n(2),
        a = i.retrieve,
        o = i.defaults,
        r = i.extend,
        s = i.each,
        l = n(30),
        u = n(6),
        c = n(36),
        h = n(16),
        d = h.isRadianAroundZero,
        p = h.remRadian,
        g = n(54).createSymbol,
        f = n(42),
        m = n(28).applyTransform,
        v = n(64).shouldShowAllLabels,
        y = Math.PI,
        x = function(e, t) {
          (this.opt = t),
            (this.axisModel = e),
            o(t, {
              labelOffset: 0,
              nameDirection: 1,
              tickDirection: 1,
              labelDirection: 1,
              silent: !0
            }),
            (this.group = new u.Group());
          var n = new u.Group({ position: t.position.slice(), rotation: t.rotation });
          n.updateTransform(), (this._transform = n.transform), (this._dumbGroup = n);
        };
      x.prototype = {
        constructor: x,
        hasBuilder: function(e) {
          return !!_[e];
        },
        add: function(e) {
          _[e].call(this);
        },
        getGroup: function() {
          return this.group;
        }
      };
      var _ = {
          axisLine: function() {
            var e = this.opt,
              t = this.axisModel;
            if (t.get('axisLine.show')) {
              var n = this.axisModel.axis.getExtent(),
                i = this._transform,
                a = [n[0], 0],
                o = [n[1], 0];
              i && (m(a, a, i), m(o, o, i));
              var l = r({ lineCap: 'round' }, t.getModel('axisLine.lineStyle').getLineStyle());
              this.group.add(
                new u.Line({
                  anid: 'line',
                  subPixelOptimize: !0,
                  shape: { x1: a[0], y1: a[1], x2: o[0], y2: o[1] },
                  style: l,
                  strokeContainThreshold: e.strokeContainThreshold || 5,
                  silent: !0,
                  z2: 1
                })
              );
              var c = t.get('axisLine.symbol'),
                h = t.get('axisLine.symbolSize'),
                d = t.get('axisLine.symbolOffset') || 0;
              if (('number' === typeof d && (d = [d, d]), null != c)) {
                'string' === typeof c && (c = [c, c]),
                  ('string' !== typeof h && 'number' !== typeof h) || (h = [h, h]);
                var p = h[0],
                  f = h[1];
                s(
                  [
                    { rotate: e.rotation + Math.PI / 2, offset: d[0], r: 0 },
                    {
                      rotate: e.rotation - Math.PI / 2,
                      offset: d[1],
                      r: Math.sqrt((a[0] - o[0]) * (a[0] - o[0]) + (a[1] - o[1]) * (a[1] - o[1]))
                    }
                  ],
                  function(t, n) {
                    if ('none' !== c[n] && null != c[n]) {
                      var i = g(c[n], -p / 2, -f / 2, p, f, l.stroke, !0),
                        o = t.r + t.offset,
                        r = [a[0] + o * Math.cos(e.rotation), a[1] - o * Math.sin(e.rotation)];
                      i.attr({ rotation: t.rotate, position: r, silent: !0, z2: 11 }),
                        this.group.add(i);
                    }
                  },
                  this
                );
              }
            }
          },
          axisTickLabel: function() {
            var e = this.axisModel,
              t = this.opt,
              n = (function(e, t, n) {
                var i = t.axis;
                if (!t.get('axisTick.show') || i.scale.isBlank()) return;
                for (
                  var a = t.getModel('axisTick'),
                    r = a.getModel('lineStyle'),
                    s = a.get('length'),
                    l = i.getTicksCoords(),
                    c = [],
                    h = [],
                    d = e._transform,
                    p = [],
                    g = 0;
                  g < l.length;
                  g++
                ) {
                  var f = l[g].coord;
                  (c[0] = f),
                    (c[1] = 0),
                    (h[0] = f),
                    (h[1] = n.tickDirection * s),
                    d && (m(c, c, d), m(h, h, d));
                  var v = new u.Line({
                    anid: 'tick_' + l[g].tickValue,
                    subPixelOptimize: !0,
                    shape: { x1: c[0], y1: c[1], x2: h[0], y2: h[1] },
                    style: o(r.getLineStyle(), { stroke: t.get('axisLine.lineStyle.color') }),
                    z2: 2,
                    silent: !0
                  });
                  e.group.add(v), p.push(v);
                }
                return p;
              })(this, e, t),
              i = (function(e, t, n) {
                var i = t.axis;
                if (!a(n.axisLabelShow, t.get('axisLabel.show')) || i.scale.isBlank()) return;
                var o = t.getModel('axisLabel'),
                  r = o.get('margin'),
                  l = i.getViewLabels(),
                  h = ((a(n.labelRotate, o.get('rotate')) || 0) * y) / 180,
                  d = S(n.rotation, h, n.labelDirection),
                  p = t.getCategories && t.getCategories(!0),
                  g = [],
                  f = w(t),
                  m = t.get('triggerEvent');
                return (
                  s(l, function(a, s) {
                    var l = a.tickValue,
                      h = a.formattedLabel,
                      v = a.rawLabel,
                      y = o;
                    p && p[l] && p[l].textStyle && (y = new c(p[l].textStyle, o, t.ecModel));
                    var x = y.getTextColor() || t.get('axisLine.lineStyle.color'),
                      _ = [i.dataToCoord(l), n.labelOffset + n.labelDirection * r],
                      S = new u.Text({
                        anid: 'label_' + l,
                        position: _,
                        rotation: d.rotation,
                        silent: f,
                        z2: 10
                      });
                    u.setTextStyle(S.style, y, {
                      text: h,
                      textAlign: y.getShallow('align', !0) || d.textAlign,
                      textVerticalAlign:
                        y.getShallow('verticalAlign', !0) ||
                        y.getShallow('baseline', !0) ||
                        d.textVerticalAlign,
                      textFill:
                        'function' === typeof x
                          ? x('category' === i.type ? v : 'value' === i.type ? l + '' : l, s)
                          : x
                    }),
                      m &&
                        ((S.eventData = b(t)),
                        (S.eventData.targetType = 'axisLabel'),
                        (S.eventData.value = v)),
                      e._dumbGroup.add(S),
                      S.updateTransform(),
                      g.push(S),
                      e.group.add(S),
                      S.decomposeTransform();
                  }),
                  g
                );
              })(this, e, t);
            !(function(e, t, n) {
              if (v(e.axis)) return;
              var i = e.get('axisLabel.showMinLabel'),
                a = e.get('axisLabel.showMaxLabel');
              n = n || [];
              var o = (t = t || [])[0],
                r = t[1],
                s = t[t.length - 1],
                l = t[t.length - 2],
                u = n[0],
                c = n[1],
                h = n[n.length - 1],
                d = n[n.length - 2];
              !1 === i ? (M(o), M(u)) : I(o, r) && (i ? (M(r), M(c)) : (M(o), M(u)));
              !1 === a ? (M(s), M(h)) : I(l, s) && (a ? (M(l), M(d)) : (M(s), M(h)));
            })(e, i, n);
          },
          axisName: function() {
            var e = this.opt,
              t = this.axisModel,
              n = a(e.axisName, t.get('name'));
            if (n) {
              var i,
                o,
                s = t.get('nameLocation'),
                c = e.nameDirection,
                h = t.getModel('nameTextStyle'),
                g = t.get('nameGap') || 0,
                f = this.axisModel.axis.getExtent(),
                m = f[0] > f[1] ? -1 : 1,
                v = [
                  'start' === s ? f[0] - m * g : 'end' === s ? f[1] + m * g : (f[0] + f[1]) / 2,
                  A(s) ? e.labelOffset + c * g : 0
                ],
                x = t.get('nameRotate');
              null != x && (x = (x * y) / 180),
                A(s)
                  ? (i = S(e.rotation, null != x ? x : e.rotation, c))
                  : ((i = (function(e, t, n, i) {
                      var a,
                        o,
                        r = p(n - e.rotation),
                        s = i[0] > i[1],
                        l = ('start' === t && !s) || ('start' !== t && s);
                      d(r - y / 2)
                        ? ((o = l ? 'bottom' : 'top'), (a = 'center'))
                        : d(r - 1.5 * y)
                        ? ((o = l ? 'top' : 'bottom'), (a = 'center'))
                        : ((o = 'middle'),
                          (a =
                            r < 1.5 * y && r > y / 2
                              ? l
                                ? 'left'
                                : 'right'
                              : l
                              ? 'right'
                              : 'left'));
                      return { rotation: r, textAlign: a, textVerticalAlign: o };
                    })(e, s, x || 0, f)),
                    null != (o = e.axisNameAvailableWidth) &&
                      ((o = Math.abs(o / Math.sin(i.rotation))), !isFinite(o) && (o = null)));
              var _ = h.getFont(),
                M = t.get('nameTruncate', !0) || {},
                I = M.ellipsis,
                T = a(e.nameTruncateMaxWidth, M.maxWidth, o),
                D =
                  null != I && null != T
                    ? l.truncateText(n, T, _, I, { minChar: 2, placeholder: M.placeholder })
                    : n,
                C = t.get('tooltip', !0),
                L = t.mainType,
                P = { componentType: L, name: n, $vars: ['name'] };
              P[L + 'Index'] = t.componentIndex;
              var O = new u.Text({
                anid: 'name',
                __fullText: n,
                __truncatedText: D,
                position: v,
                rotation: i.rotation,
                silent: w(t),
                z2: 1,
                tooltip:
                  C && C.show
                    ? r(
                        {
                          content: n,
                          formatter: function() {
                            return n;
                          },
                          formatterParams: P
                        },
                        C
                      )
                    : null
              });
              u.setTextStyle(O.style, h, {
                text: D,
                textFont: _,
                textFill: h.getTextColor() || t.get('axisLine.lineStyle.color'),
                textAlign: h.get('align') || i.textAlign,
                textVerticalAlign: h.get('verticalAlign') || i.textVerticalAlign
              }),
                t.get('triggerEvent') &&
                  ((O.eventData = b(t)),
                  (O.eventData.targetType = 'axisName'),
                  (O.eventData.name = n)),
                this._dumbGroup.add(O),
                O.updateTransform(),
                this.group.add(O),
                O.decomposeTransform();
            }
          }
        },
        b = (x.makeAxisEventDataBase = function(e) {
          var t = { componentType: e.mainType, componentIndex: e.componentIndex };
          return (t[e.mainType + 'Index'] = e.componentIndex), t;
        }),
        S = (x.innerTextLayout = function(e, t, n) {
          var i,
            a,
            o = p(t - e);
          return (
            d(o)
              ? ((a = n > 0 ? 'top' : 'bottom'), (i = 'center'))
              : d(o - y)
              ? ((a = n > 0 ? 'bottom' : 'top'), (i = 'center'))
              : ((a = 'middle'),
                (i = o > 0 && o < y ? (n > 0 ? 'right' : 'left') : n > 0 ? 'left' : 'right')),
            { rotation: o, textAlign: i, textVerticalAlign: a }
          );
        });
      var w = (x.isLabelSilent = function(e) {
        var t = e.get('tooltip');
        return e.get('silent') || !(e.get('triggerEvent') || (t && t.show));
      });
      function M(e) {
        e && (e.ignore = !0);
      }
      function I(e, t, n) {
        var i = e && e.getBoundingRect().clone(),
          a = t && t.getBoundingRect().clone();
        if (i && a) {
          var o = f.identity([]);
          return (
            f.rotate(o, o, -e.rotation),
            i.applyTransform(f.mul([], o, e.getLocalTransform())),
            a.applyTransform(f.mul([], o, t.getLocalTransform())),
            i.intersect(a)
          );
        }
      }
      function A(e) {
        return 'middle' === e || 'center' === e;
      }
      var T = x;
      e.exports = T;
    },
    function(e, t) {
      var n = {};
      (t.register = function(e, t) {
        n[e] = t;
      }),
        (t.get = function(e) {
          return n[e];
        });
    },
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    function(e, t, n) {
      n(23).__DEV__;
      var i = n(2),
        a = (i.isTypedArray, i.extend),
        o = (i.assert, i.each),
        r = i.isObject,
        s = n(18),
        l = s.getDataItemValue,
        u = s.isDataItemOption,
        c = n(16).parseDate,
        h = n(150),
        d = n(151),
        p = d.SOURCE_FORMAT_TYPED_ARRAY,
        g = d.SOURCE_FORMAT_ARRAY_ROWS,
        f = d.SOURCE_FORMAT_ORIGINAL,
        m = d.SOURCE_FORMAT_OBJECT_ROWS;
      function v(e, t) {
        h.isInstance(e) || (e = h.seriesDataToSource(e)), (this._source = e);
        var n = (this._data = e.data),
          i = e.sourceFormat;
        i === p && ((this._offset = 0), (this._dimSize = t), (this._data = n));
        var o = x[i === g ? i + '_' + e.seriesLayoutBy : i];
        a(this, o);
      }
      var y = v.prototype;
      (y.pure = !1),
        (y.persistent = !0),
        (y.getSource = function() {
          return this._source;
        });
      var x = {
        arrayRows_column: {
          pure: !0,
          count: function() {
            return Math.max(0, this._data.length - this._source.startIndex);
          },
          getItem: function(e) {
            return this._data[e + this._source.startIndex];
          },
          appendData: S
        },
        arrayRows_row: {
          pure: !0,
          count: function() {
            var e = this._data[0];
            return e ? Math.max(0, e.length - this._source.startIndex) : 0;
          },
          getItem: function(e) {
            e += this._source.startIndex;
            for (var t = [], n = this._data, i = 0; i < n.length; i++) {
              var a = n[i];
              t.push(a ? a[e] : null);
            }
            return t;
          },
          appendData: function() {
            throw new Error('Do not support appendData when set seriesLayoutBy: "row".');
          }
        },
        objectRows: { pure: !0, count: _, getItem: b, appendData: S },
        keyedColumns: {
          pure: !0,
          count: function() {
            var e = this._source.dimensionsDefine[0].name,
              t = this._data[e];
            return t ? t.length : 0;
          },
          getItem: function(e) {
            for (var t = [], n = this._source.dimensionsDefine, i = 0; i < n.length; i++) {
              var a = this._data[n[i].name];
              t.push(a ? a[e] : null);
            }
            return t;
          },
          appendData: function(e) {
            var t = this._data;
            o(e, function(e, n) {
              for (var i = t[n] || (t[n] = []), a = 0; a < (e || []).length; a++) i.push(e[a]);
            });
          }
        },
        original: { count: _, getItem: b, appendData: S },
        typedArray: {
          persistent: !1,
          pure: !0,
          count: function() {
            return this._data ? this._data.length / this._dimSize : 0;
          },
          getItem: function(e, t) {
            (e -= this._offset), (t = t || []);
            for (var n = this._dimSize * e, i = 0; i < this._dimSize; i++) t[i] = this._data[n + i];
            return t;
          },
          appendData: function(e) {
            this._data = e;
          },
          clean: function() {
            (this._offset += this.count()), (this._data = null);
          }
        }
      };
      function _() {
        return this._data.length;
      }
      function b(e) {
        return this._data[e];
      }
      function S(e) {
        for (var t = 0; t < e.length; t++) this._data.push(e[t]);
      }
      var w = {
        arrayRows: M,
        objectRows: function(e, t, n, i) {
          return null != n ? e[i] : e;
        },
        keyedColumns: M,
        original: function(e, t, n, i) {
          var a = l(e);
          return null != n && a instanceof Array ? a[n] : a;
        },
        typedArray: M
      };
      function M(e, t, n, i) {
        return null != n ? e[n] : e;
      }
      var I = {
        arrayRows: A,
        objectRows: function(e, t, n, i) {
          return T(e[t], this._dimensionInfos[t]);
        },
        keyedColumns: A,
        original: function(e, t, n, i) {
          var a = e && (null == e.value ? e : e.value);
          return (
            !this._rawData.pure && u(e) && (this.hasItemOption = !0),
            T(a instanceof Array ? a[i] : a, this._dimensionInfos[t])
          );
        },
        typedArray: function(e, t, n, i) {
          return e[i];
        }
      };
      function A(e, t, n, i) {
        return T(e[i], this._dimensionInfos[t]);
      }
      function T(e, t) {
        var n = t && t.type;
        if ('ordinal' === n) {
          var i = t && t.ordinalMeta;
          return i ? i.parseAndCollect(e) : e;
        }
        return (
          'time' === n && 'number' !== typeof e && null != e && '-' !== e && (e = +c(e)),
          null == e || '' === e ? NaN : +e
        );
      }
      (t.DefaultDataProvider = v),
        (t.defaultDimValueGetters = I),
        (t.retrieveRawValue = function(e, t, n) {
          if (e) {
            var i = e.getRawDataItem(t);
            if (null != i) {
              var a,
                o,
                r = e.getProvider().getSource().sourceFormat,
                s = e.getDimensionInfo(n);
              return s && ((a = s.name), (o = s.index)), w[r](i, t, o, a);
            }
          }
        }),
        (t.retrieveRawAttr = function(e, t, n) {
          if (e) {
            var i = e.getProvider().getSource().sourceFormat;
            if (i === f || i === m) {
              var a = e.getRawDataItem(t);
              return i !== f || r(a) || (a = null), a ? a[n] : void 0;
            }
          }
        });
    },
    function(e, t) {
      function n(e) {
        return e;
      }
      function i(e, t, i, a, o) {
        (this._old = e),
          (this._new = t),
          (this._oldKeyGetter = i || n),
          (this._newKeyGetter = a || n),
          (this.context = o);
      }
      function a(e, t, n, i, a) {
        for (var o = 0; o < e.length; o++) {
          var r = '_ec_' + a[i](e[o], o),
            s = t[r];
          null == s ? (n.push(r), (t[r] = o)) : (s.length || (t[r] = s = [s]), s.push(o));
        }
      }
      i.prototype = {
        constructor: i,
        add: function(e) {
          return (this._add = e), this;
        },
        update: function(e) {
          return (this._update = e), this;
        },
        remove: function(e) {
          return (this._remove = e), this;
        },
        execute: function() {
          var e = this._old,
            t = this._new,
            n = {},
            i = [],
            o = [];
          for (
            a(e, {}, i, '_oldKeyGetter', this), a(t, n, o, '_newKeyGetter', this), r = 0;
            r < e.length;
            r++
          ) {
            if (null != (l = n[(s = i[r])]))
              (c = l.length) ? (1 === c && (n[s] = null), (l = l.shift())) : (n[s] = null),
                this._update && this._update(l, r);
            else this._remove && this._remove(r);
          }
          for (var r = 0; r < o.length; r++) {
            var s = o[r];
            if (n.hasOwnProperty(s)) {
              var l;
              if (null == (l = n[s])) continue;
              if (l.length) for (var u = 0, c = l.length; u < c; u++) this._add && this._add(l[u]);
              else this._add && this._add(l);
            }
          }
        }
      };
      var o = i;
      e.exports = o;
    },
    function(e, t, n) {
      var i = n(2).isFunction;
      e.exports = function(e, t, n) {
        return {
          seriesType: e,
          performRawSeries: !0,
          reset: function(e, a, o) {
            var r = e.getData(),
              s = e.get('symbol'),
              l = e.get('symbolSize'),
              u = e.get('symbolKeepAspect'),
              c = i(s),
              h = i(l),
              d = c || h,
              p = !c && s ? s : t,
              g = h ? null : l;
            if (
              (r.setVisual({ legendSymbol: n || p, symbol: p, symbolSize: g, symbolKeepAspect: u }),
              !a.isSeriesFiltered(e))
            )
              return {
                dataEach:
                  r.hasItemOption || d
                    ? function(t, n) {
                        if (d) {
                          var i = e.getRawValue(n),
                            a = e.getDataParams(n);
                          c && t.setItemVisual(n, 'symbol', s(i, a)),
                            h && t.setItemVisual(n, 'symbolSize', l(i, a));
                        }
                        if (t.hasItemOption) {
                          var o = t.getItemModel(n),
                            r = o.getShallow('symbol', !0),
                            u = o.getShallow('symbolSize', !0),
                            p = o.getShallow('symbolKeepAspect', !0);
                          null != r && t.setItemVisual(n, 'symbol', r),
                            null != u && t.setItemVisual(n, 'symbolSize', u),
                            null != p && t.setItemVisual(n, 'symbolKeepAspect', p);
                        }
                      }
                    : null
              };
          }
        };
      };
    },
    function(e, t, n) {
      n(23).__DEV__;
      var i = n(4),
        a = n(203),
        o = i.extendComponentView({
          type: 'axis',
          _axisPointer: null,
          axisPointerClass: null,
          render: function(e, t, n, i) {
            this.axisPointerClass && a.fixValue(e),
              o.superApply(this, 'render', arguments),
              r(this, e, t, n, i, !0);
          },
          updateAxisPointer: function(e, t, n, i, a) {
            r(this, e, t, n, i, !1);
          },
          remove: function(e, t) {
            var n = this._axisPointer;
            n && n.remove(t), o.superApply(this, 'remove', arguments);
          },
          dispose: function(e, t) {
            s(this, t), o.superApply(this, 'dispose', arguments);
          }
        });
      function r(e, t, n, i, r, l) {
        var u = o.getAxisPointerClass(e.axisPointerClass);
        if (u) {
          var c = a.getAxisPointerModel(t);
          c ? (e._axisPointer || (e._axisPointer = new u())).render(t, c, i, l) : s(e, i);
        }
      }
      function s(e, t, n) {
        var i = e._axisPointer;
        i && i.dispose(t, n), (e._axisPointer = null);
      }
      var l = [];
      (o.registerAxisPointerClass = function(e, t) {
        l[e] = t;
      }),
        (o.getAxisPointerClass = function(e) {
          return e && l[e];
        });
      var u = o;
      e.exports = u;
    },
    function(e, t, n) {
      var i = n(2);
      function a(e) {
        for (var t = []; e; ) (e = e.parentNode) && t.push(e);
        return t.reverse();
      }
      (t.retrieveTargetInfo = function(e, t, n) {
        if (e && i.indexOf(t, e.type) >= 0) {
          var a = n.getData().tree.root,
            o = e.targetNode;
          if (('string' === typeof o && (o = a.getNodeById(o)), o && a.contains(o)))
            return { node: o };
          var r = e.targetNodeId;
          if (null != r && (o = a.getNodeById(r))) return { node: o };
        }
      }),
        (t.getPathToRoot = a),
        (t.aboveViewRoot = function(e, t) {
          var n = a(e);
          return i.indexOf(n, t) >= 0;
        }),
        (t.wrapTreePathInfo = function(e, t) {
          for (var n = []; e; ) {
            var i = e.dataIndex;
            n.push({ name: e.name, dataIndex: i, value: t.getRawValue(i) }), (e = e.parentNode);
          }
          return n.reverse(), n;
        });
    },
    function(e, t, n) {
      var i = n(2),
        a = n(70),
        o = n(16).linearMap,
        r = i.each,
        s = i.isObject,
        l = -1,
        u = function(e) {
          var t = e.mappingMethod,
            n = e.type,
            a = (this.option = i.clone(e));
          (this.type = n), (this.mappingMethod = t), (this._normalizeData = _[t]);
          var o = c[n];
          (this.applyVisual = o.applyVisual),
            (this.getColorMapper = o.getColorMapper),
            (this._doMap = o._doMap[t]),
            'piecewise' === t
              ? (h(a),
                (function(e) {
                  var t = e.pieceList;
                  (e.hasSpecialVisual = !1),
                    i.each(t, function(t, n) {
                      (t.originIndex = n), null != t.visual && (e.hasSpecialVisual = !0);
                    });
                })(a))
              : 'category' === t
              ? a.categories
                ? (function(e) {
                    var t = e.categories,
                      n = e.visual,
                      a = (e.categoryMap = {});
                    if (
                      (r(t, function(e, t) {
                        a[e] = t;
                      }),
                      !i.isArray(n))
                    ) {
                      var o = [];
                      i.isObject(n)
                        ? r(n, function(e, t) {
                            var n = a[t];
                            o[null != n ? n : l] = e;
                          })
                        : (o[l] = n),
                        (n = x(e, o));
                    }
                    for (var s = t.length - 1; s >= 0; s--)
                      null == n[s] && (delete a[t[s]], t.pop());
                  })(a)
                : h(a, !0)
              : (i.assert('linear' !== t || a.dataExtent), h(a));
        };
      u.prototype = {
        constructor: u,
        mapValueToVisual: function(e) {
          var t = this._normalizeData(e);
          return this._doMap(t, e);
        },
        getNormalizer: function() {
          return i.bind(this._normalizeData, this);
        }
      };
      var c = (u.visualHandlers = {
        color: {
          applyVisual: g('color'),
          getColorMapper: function() {
            var e = this.option;
            return i.bind(
              'category' === e.mappingMethod
                ? function(e, t) {
                    return !t && (e = this._normalizeData(e)), f.call(this, e);
                  }
                : function(t, n, i) {
                    var o = !!i;
                    return (
                      !n && (t = this._normalizeData(t)),
                      (i = a.fastLerp(t, e.parsedVisual, i)),
                      o ? i : a.stringify(i, 'rgba')
                    );
                  },
              this
            );
          },
          _doMap: {
            linear: function(e) {
              return a.stringify(a.fastLerp(e, this.option.parsedVisual), 'rgba');
            },
            category: f,
            piecewise: function(e, t) {
              var n = y.call(this, t);
              return (
                null == n && (n = a.stringify(a.fastLerp(e, this.option.parsedVisual), 'rgba')), n
              );
            },
            fixed: m
          }
        },
        colorHue: d(function(e, t) {
          return a.modifyHSL(e, t);
        }),
        colorSaturation: d(function(e, t) {
          return a.modifyHSL(e, null, t);
        }),
        colorLightness: d(function(e, t) {
          return a.modifyHSL(e, null, null, t);
        }),
        colorAlpha: d(function(e, t) {
          return a.modifyAlpha(e, t);
        }),
        opacity: { applyVisual: g('opacity'), _doMap: v([0, 1]) },
        liftZ: {
          applyVisual: g('liftZ'),
          _doMap: { linear: m, category: m, piecewise: m, fixed: m }
        },
        symbol: {
          applyVisual: function(e, t, n) {
            var a = this.mapValueToVisual(e);
            if (i.isString(a)) n('symbol', a);
            else if (s(a)) for (var o in a) a.hasOwnProperty(o) && n(o, a[o]);
          },
          _doMap: {
            linear: p,
            category: f,
            piecewise: function(e, t) {
              var n = y.call(this, t);
              return null == n && (n = p.call(this, e)), n;
            },
            fixed: m
          }
        },
        symbolSize: { applyVisual: g('symbolSize'), _doMap: v([0, 1]) }
      });
      function h(e, t) {
        var n = e.visual,
          a = [];
        i.isObject(n)
          ? r(n, function(e) {
              a.push(e);
            })
          : null != n && a.push(n);
        t || 1 !== a.length || { color: 1, symbol: 1 }.hasOwnProperty(e.type) || (a[1] = a[0]),
          x(e, a);
      }
      function d(e) {
        return {
          applyVisual: function(t, n, i) {
            (t = this.mapValueToVisual(t)), i('color', e(n('color'), t));
          },
          _doMap: v([0, 1])
        };
      }
      function p(e) {
        var t = this.option.visual;
        return t[Math.round(o(e, [0, 1], [0, t.length - 1], !0))] || {};
      }
      function g(e) {
        return function(t, n, i) {
          i(e, this.mapValueToVisual(t));
        };
      }
      function f(e) {
        var t = this.option.visual;
        return t[this.option.loop && e !== l ? e % t.length : e];
      }
      function m() {
        return this.option.visual[0];
      }
      function v(e) {
        return {
          linear: function(t) {
            return o(t, e, this.option.visual, !0);
          },
          category: f,
          piecewise: function(t, n) {
            var i = y.call(this, n);
            return null == i && (i = o(t, e, this.option.visual, !0)), i;
          },
          fixed: m
        };
      }
      function y(e) {
        var t = this.option,
          n = t.pieceList;
        if (t.hasSpecialVisual) {
          var i = n[u.findPieceIndex(e, n)];
          if (i && i.visual) return i.visual[this.type];
        }
      }
      function x(e, t) {
        return (
          (e.visual = t),
          'color' === e.type &&
            (e.parsedVisual = i.map(t, function(e) {
              return a.parse(e);
            })),
          t
        );
      }
      var _ = {
        linear: function(e) {
          return o(e, this.option.dataExtent, [0, 1], !0);
        },
        piecewise: function(e) {
          var t = this.option.pieceList,
            n = u.findPieceIndex(e, t, !0);
          if (null != n) return o(n, [0, t.length - 1], [0, 1], !0);
        },
        category: function(e) {
          var t = this.option.categories ? this.option.categoryMap[e] : e;
          return null == t ? l : t;
        },
        fixed: i.noop
      };
      function b(e, t, n) {
        return e ? t <= n : t < n;
      }
      (u.listVisualTypes = function() {
        var e = [];
        return (
          i.each(c, function(t, n) {
            e.push(n);
          }),
          e
        );
      }),
        (u.addVisualHandler = function(e, t) {
          c[e] = t;
        }),
        (u.isValidType = function(e) {
          return c.hasOwnProperty(e);
        }),
        (u.eachVisual = function(e, t, n) {
          i.isObject(e) ? i.each(e, t, n) : t.call(n, e);
        }),
        (u.mapVisual = function(e, t, n) {
          var a,
            o = i.isArray(e) ? [] : i.isObject(e) ? {} : ((a = !0), null);
          return (
            u.eachVisual(e, function(e, i) {
              var r = t.call(n, e, i);
              a ? (o = r) : (o[i] = r);
            }),
            o
          );
        }),
        (u.retrieveVisuals = function(e) {
          var t,
            n = {};
          return (
            e &&
              r(c, function(i, a) {
                e.hasOwnProperty(a) && ((n[a] = e[a]), (t = !0));
              }),
            t ? n : null
          );
        }),
        (u.prepareVisualTypes = function(e) {
          if (s(e)) {
            var t = [];
            r(e, function(e, n) {
              t.push(n);
            }),
              (e = t);
          } else {
            if (!i.isArray(e)) return [];
            e = e.slice();
          }
          return (
            e.sort(function(e, t) {
              return 'color' === t && 'color' !== e && 0 === e.indexOf('color') ? 1 : -1;
            }),
            e
          );
        }),
        (u.dependsOn = function(e, t) {
          return 'color' === t ? !(!e || 0 !== e.indexOf(t)) : e === t;
        }),
        (u.findPieceIndex = function(e, t, n) {
          for (var i, a = 1 / 0, o = 0, r = t.length; o < r; o++) {
            var s = t[o].value;
            if (null != s) {
              if (s === e || ('string' === typeof s && s === e + '')) return o;
              n && h(s, o);
            }
          }
          for (o = 0, r = t.length; o < r; o++) {
            var l = t[o],
              u = l.interval,
              c = l.close;
            if (u) {
              if (u[0] === -1 / 0) {
                if (b(c[1], e, u[1])) return o;
              } else if (u[1] === 1 / 0) {
                if (b(c[0], u[0], e)) return o;
              } else if (b(c[0], u[0], e) && b(c[1], e, u[1])) return o;
              n && h(u[0], o), n && h(u[1], o);
            }
          }
          if (n) return e === 1 / 0 ? t.length - 1 : e === -1 / 0 ? 0 : i;
          function h(t, n) {
            var o = Math.abs(t - e);
            o < a && ((a = o), (i = n));
          }
        });
      var S = u;
      e.exports = S;
    },
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    function(e, t, n) {
      var i = n(2);
      e.exports = function(e) {
        for (var t = 0; t < e.length; t++) e[t][1] || (e[t][1] = e[t][0]);
        return function(t, n, a) {
          for (var o = {}, r = 0; r < e.length; r++) {
            var s = e[r][1];
            if (!((n && i.indexOf(n, s) >= 0) || (a && i.indexOf(a, s) < 0))) {
              var l = t.getShallow(s);
              null != l && (o[e[r][0]] = l);
            }
          }
          return o;
        };
      };
    },
    ,
    function(e, t, n) {
      var i = n(18).makeInner;
      e.exports = function() {
        var e = i();
        return function(t) {
          var n = e(t),
            i = t.pipelineContext,
            a = n.large,
            o = n.progressiveRender,
            r = (n.large = i.large),
            s = (n.progressiveRender = i.progressiveRender);
          return !!(a ^ r || o ^ s) && 'reset';
        };
      };
    },
    function(e, t, n) {
      var i = n(294);
      e.exports = function(e, t) {
        return i((t = t || {}).coordDimensions || [], e, {
          dimsDef: t.dimensionsDefine || e.dimensionsDefine,
          encodeDef: t.encodeDefine || e.encodeDefine,
          dimCount: t.dimensionsCount,
          generateCoord: t.generateCoord,
          generateCoordCount: t.generateCoordCount
        });
      };
    },
    function(e, t, n) {
      var i = n(2),
        a = {
          getMin: function(e) {
            var t = this.option,
              n = e || null == t.rangeStart ? t.min : t.rangeStart;
            return (
              this.axis &&
                null != n &&
                'dataMin' !== n &&
                'function' !== typeof n &&
                !i.eqNaN(n) &&
                (n = this.axis.scale.parse(n)),
              n
            );
          },
          getMax: function(e) {
            var t = this.option,
              n = e || null == t.rangeEnd ? t.max : t.rangeEnd;
            return (
              this.axis &&
                null != n &&
                'dataMax' !== n &&
                'function' !== typeof n &&
                !i.eqNaN(n) &&
                (n = this.axis.scale.parse(n)),
              n
            );
          },
          getNeedCrossZero: function() {
            var e = this.option;
            return null == e.rangeStart && null == e.rangeEnd && !e.scale;
          },
          getCoordSysModel: i.noop,
          setRange: function(e, t) {
            (this.option.rangeStart = e), (this.option.rangeEnd = t);
          },
          resetRange: function() {
            this.option.rangeStart = this.option.rangeEnd = null;
          }
        };
      e.exports = a;
    },
    function(e, t, n) {
      var i = n(123),
        a = n(53),
        o = n(2),
        r = o.extend,
        s = o.isArray;
      e.exports = function(e, t, n) {
        t = (s(t) && { coordDimensions: t }) || r({}, t);
        var o = e.getSource(),
          l = i(o, t),
          u = new a(l, e);
        return u.initData(o, n), u;
      };
    },
    function(e, t) {
      function n(e, t) {
        var n = e[t] - e[1 - t];
        return { span: Math.abs(n), sign: n > 0 ? -1 : n < 0 ? 1 : t ? -1 : 1 };
      }
      function i(e, t) {
        return Math.min(null != t[1] ? t[1] : 1 / 0, Math.max(null != t[0] ? t[0] : -1 / 0, e));
      }
      e.exports = function(e, t, a, o, r, s) {
        e = e || 0;
        var l = a[1] - a[0];
        if (
          (null != r && (r = i(r, [0, l])),
          null != s && (s = Math.max(s, null != r ? r : 0)),
          'all' === o)
        ) {
          var u = Math.abs(t[1] - t[0]);
          (u = i(u, [0, l])), (r = s = i(u, [r, s])), (o = 0);
        }
        (t[0] = i(t[0], a)), (t[1] = i(t[1], a));
        var c = n(t, o);
        t[o] += e;
        var h = r || 0,
          d = a.slice();
        c.sign < 0 ? (d[0] += h) : (d[1] -= h), (t[o] = i(t[o], d));
        var p = n(t, o);
        return (
          null != r && (p.sign !== c.sign || p.span < r) && (t[1 - o] = t[o] + c.sign * r),
          (p = n(t, o)),
          null != s && p.span > s && (t[1 - o] = t[o] + p.sign * s),
          t
        );
      };
    },
    function(e, t, n) {
      n(23).__DEV__;
      var i = n(4),
        a = n(2),
        o = n(35),
        r = n(18),
        s = n(310),
        l = n(972),
        u = a.each,
        c = s.eachAxisDim;
      function h(e) {
        var t = {};
        return (
          u(['start', 'end', 'startValue', 'endValue', 'throttle'], function(n) {
            e.hasOwnProperty(n) && (t[n] = e[n]);
          }),
          t
        );
      }
      function d(e, t) {
        var n = e._rangePropMode,
          i = e.get('rangeMode');
        u(
          [
            ['start', 'startValue'],
            ['end', 'endValue']
          ],
          function(e, a) {
            var o = null != t[e[0]],
              r = null != t[e[1]];
            o && !r
              ? (n[a] = 'percent')
              : !o && r
              ? (n[a] = 'value')
              : i
              ? (n[a] = i[a])
              : o && (n[a] = 'percent');
          }
        );
      }
      var p = i.extendComponentModel({
        type: 'dataZoom',
        dependencies: [
          'xAxis',
          'yAxis',
          'zAxis',
          'radiusAxis',
          'angleAxis',
          'singleAxis',
          'series'
        ],
        defaultOption: {
          zlevel: 0,
          z: 4,
          orient: null,
          xAxisIndex: null,
          yAxisIndex: null,
          filterMode: 'filter',
          throttle: null,
          start: 0,
          end: 100,
          startValue: null,
          endValue: null,
          minSpan: null,
          maxSpan: null,
          minValueSpan: null,
          maxValueSpan: null,
          rangeMode: null
        },
        init: function(e, t, n) {
          (this._dataIntervalByAxis = {}),
            (this._dataInfo = {}),
            (this._axisProxies = {}),
            this.textStyleModel,
            (this._autoThrottle = !0),
            (this._rangePropMode = ['percent', 'percent']);
          var i = h(e);
          (this.settledOption = i), this.mergeDefaultAndTheme(e, n), this.doInit(i);
        },
        mergeOption: function(e) {
          var t = h(e);
          a.merge(this.option, e, !0), a.merge(this.settledOption, t, !0), this.doInit(t);
        },
        doInit: function(e) {
          var t = this.option;
          o.canvasSupported || (t.realtime = !1), this._setDefaultThrottle(e), d(this, e);
          var n = this.settledOption;
          u(
            [
              ['start', 'startValue'],
              ['end', 'endValue']
            ],
            function(e, i) {
              'value' === this._rangePropMode[i] && (t[e[0]] = n[e[0]] = null);
            },
            this
          ),
            (this.textStyleModel = this.getModel('textStyle')),
            this._resetTarget(),
            this._giveAxisProxies();
        },
        _giveAxisProxies: function() {
          var e = this._axisProxies;
          this.eachTargetAxis(function(t, n, i, a) {
            var o = this.dependentModels[t.axis][n],
              r = o.__dzAxisProxy || (o.__dzAxisProxy = new l(t.name, n, this, a));
            e[t.name + '_' + n] = r;
          }, this);
        },
        _resetTarget: function() {
          var e = this.option,
            t = this._judgeAutoMode();
          c(function(t) {
            var n = t.axisIndex;
            e[n] = r.normalizeToArray(e[n]);
          }, this),
            'axisIndex' === t ? this._autoSetAxisIndex() : 'orient' === t && this._autoSetOrient();
        },
        _judgeAutoMode: function() {
          var e = this.option,
            t = !1;
          c(function(n) {
            null != e[n.axisIndex] && (t = !0);
          }, this);
          var n = e.orient;
          return null == n && t
            ? 'orient'
            : t
            ? void 0
            : (null == n && (e.orient = 'horizontal'), 'axisIndex');
        },
        _autoSetAxisIndex: function() {
          var e = !0,
            t = this.get('orient', !0),
            n = this.option,
            i = this.dependentModels;
          if (e) {
            var o = 'vertical' === t ? 'y' : 'x';
            i[o + 'Axis'].length
              ? ((n[o + 'AxisIndex'] = [0]), (e = !1))
              : u(i.singleAxis, function(i) {
                  e &&
                    i.get('orient', !0) === t &&
                    ((n.singleAxisIndex = [i.componentIndex]), (e = !1));
                });
          }
          e &&
            c(function(t) {
              if (e) {
                var i = [],
                  a = this.dependentModels[t.axis];
                if (a.length && !i.length)
                  for (var o = 0, r = a.length; o < r; o++)
                    'category' === a[o].get('type') && i.push(o);
                (n[t.axisIndex] = i), i.length && (e = !1);
              }
            }, this),
            e &&
              this.ecModel.eachSeries(function(e) {
                this._isSeriesHasAllAxesTypeOf(e, 'value') &&
                  c(function(t) {
                    var i = n[t.axisIndex],
                      o = e.get(t.axisIndex),
                      r = e.get(t.axisId);
                    (o = e.ecModel.queryComponents({ mainType: t.axis, index: o, id: r })[0]
                      .componentIndex),
                      a.indexOf(i, o) < 0 && i.push(o);
                  });
              }, this);
        },
        _autoSetOrient: function() {
          var e;
          this.eachTargetAxis(function(t) {
            !e && (e = t.name);
          }, this),
            (this.option.orient = 'y' === e ? 'vertical' : 'horizontal');
        },
        _isSeriesHasAllAxesTypeOf: function(e, t) {
          var n = !0;
          return (
            c(function(i) {
              var a = e.get(i.axisIndex),
                o = this.dependentModels[i.axis][a];
              (o && o.get('type') === t) || (n = !1);
            }, this),
            n
          );
        },
        _setDefaultThrottle: function(e) {
          if ((e.hasOwnProperty('throttle') && (this._autoThrottle = !1), this._autoThrottle)) {
            var t = this.ecModel.option;
            this.option.throttle = t.animation && t.animationDurationUpdate > 0 ? 100 : 20;
          }
        },
        getFirstTargetAxisModel: function() {
          var e;
          return (
            c(function(t) {
              if (null == e) {
                var n = this.get(t.axisIndex);
                n.length && (e = this.dependentModels[t.axis][n[0]]);
              }
            }, this),
            e
          );
        },
        eachTargetAxis: function(e, t) {
          var n = this.ecModel;
          c(function(i) {
            u(
              this.get(i.axisIndex),
              function(a) {
                e.call(t, i, a, this, n);
              },
              this
            );
          }, this);
        },
        getAxisProxy: function(e, t) {
          return this._axisProxies[e + '_' + t];
        },
        getAxisModel: function(e, t) {
          var n = this.getAxisProxy(e, t);
          return n && n.getAxisModel();
        },
        setRawRange: function(e) {
          var t = this.option,
            n = this.settledOption;
          u(
            [
              ['start', 'startValue'],
              ['end', 'endValue']
            ],
            function(i) {
              (null == e[i[0]] && null == e[i[1]]) ||
                ((t[i[0]] = n[i[0]] = e[i[0]]), (t[i[1]] = n[i[1]] = e[i[1]]));
            },
            this
          ),
            d(this, e);
        },
        setCalculatedRange: function(e) {
          var t = this.option;
          u(['start', 'startValue', 'end', 'endValue'], function(n) {
            t[n] = e[n];
          });
        },
        getPercentRange: function() {
          var e = this.findRepresentativeAxisProxy();
          if (e) return e.getDataPercentWindow();
        },
        getValueRange: function(e, t) {
          if (null != e || null != t) return this.getAxisProxy(e, t).getDataValueWindow();
          var n = this.findRepresentativeAxisProxy();
          return n ? n.getDataValueWindow() : void 0;
        },
        findRepresentativeAxisProxy: function(e) {
          if (e) return e.__dzAxisProxy;
          var t = this._axisProxies;
          for (var n in t) if (t.hasOwnProperty(n) && t[n].hostedBy(this)) return t[n];
          for (var n in t) if (t.hasOwnProperty(n) && !t[n].hostedBy(this)) return t[n];
        },
        getRangePropMode: function() {
          return this._rangePropMode.slice();
        }
      });
      e.exports = p;
    },
    function(e, t, n) {
      var i = n(197).extend({
        type: 'dataZoom',
        render: function(e, t, n, i) {
          (this.dataZoomModel = e), (this.ecModel = t), (this.api = n);
        },
        getTargetCoordInfo: function() {
          var e = this.dataZoomModel,
            t = this.ecModel,
            n = {};
          return (
            e.eachTargetAxis(function(e, i) {
              var a = t.getComponent(e.axis, i);
              if (a) {
                var o = a.getCoordSysModel();
                o &&
                  (function(e, t, n, i) {
                    for (var a, o = 0; o < n.length; o++)
                      if (n[o].model === e) {
                        a = n[o];
                        break;
                      }
                    a || n.push((a = { model: e, axisModels: [], coordIndex: i }));
                    a.axisModels.push(t);
                  })(o, a, n[o.mainType] || (n[o.mainType] = []), o.componentIndex);
              }
            }, this),
            n
          );
        }
      });
      e.exports = i;
    },
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    function(e, t, n) {
      var i = n(2),
        a = n(78).parseClassType,
        o = 0;
      (t.getUID = function(e) {
        return [e || '', o++, Math.random().toFixed(5)].join('_');
      }),
        (t.enableSubTypeDefaulter = function(e) {
          var t = {};
          return (
            (e.registerSubTypeDefaulter = function(e, n) {
              (e = a(e)), (t[e.main] = n);
            }),
            (e.determineSubType = function(n, i) {
              var o = i.type;
              if (!o) {
                var r = a(n).main;
                e.hasSubTypes(n) && t[r] && (o = t[r](i));
              }
              return o;
            }),
            e
          );
        }),
        (t.enableTopologicalTravel = function(e, t) {
          function n(e, t) {
            return e[t] || (e[t] = { predecessor: [], successor: [] }), e[t];
          }
          e.topologicalTravel = function(e, a, o, r) {
            if (e.length) {
              var s = (function(e) {
                  var a = {},
                    o = [];
                  return (
                    i.each(e, function(r) {
                      var s = n(a, r),
                        l = (function(e, t) {
                          var n = [];
                          return (
                            i.each(e, function(e) {
                              i.indexOf(t, e) >= 0 && n.push(e);
                            }),
                            n
                          );
                        })((s.originalDeps = t(r)), e);
                      (s.entryCount = l.length),
                        0 === s.entryCount && o.push(r),
                        i.each(l, function(e) {
                          i.indexOf(s.predecessor, e) < 0 && s.predecessor.push(e);
                          var t = n(a, e);
                          i.indexOf(t.successor, e) < 0 && t.successor.push(r);
                        });
                    }),
                    { graph: a, noEntryList: o }
                  );
                })(a),
                l = s.graph,
                u = s.noEntryList,
                c = {};
              for (
                i.each(e, function(e) {
                  c[e] = !0;
                });
                u.length;

              ) {
                var h = u.pop(),
                  d = l[h],
                  p = !!c[h];
                p && (o.call(r, h, d.originalDeps.slice()), delete c[h]),
                  i.each(d.successor, p ? f : g);
              }
              i.each(c, function() {
                throw new Error('Circle dependency may exists');
              });
            }
            function g(e) {
              l[e].entryCount--, 0 === l[e].entryCount && u.push(e);
            }
            function f(e) {
              (c[e] = !0), g(e);
            }
          };
        });
    },
    function(e, t, n) {
      var i = n(2),
        a = i.createHashMap,
        o = i.isTypedArray,
        r = n(78).enableClassCheck,
        s = n(151),
        l = s.SOURCE_FORMAT_ORIGINAL,
        u = s.SERIES_LAYOUT_BY_COLUMN,
        c = s.SOURCE_FORMAT_UNKNOWN,
        h = s.SOURCE_FORMAT_TYPED_ARRAY,
        d = s.SOURCE_FORMAT_KEYED_COLUMNS;
      function p(e) {
        (this.fromDataset = e.fromDataset),
          (this.data = e.data || (e.sourceFormat === d ? {} : [])),
          (this.sourceFormat = e.sourceFormat || c),
          (this.seriesLayoutBy = e.seriesLayoutBy || u),
          (this.dimensionsDefine = e.dimensionsDefine),
          (this.encodeDefine = e.encodeDefine && a(e.encodeDefine)),
          (this.startIndex = e.startIndex || 0),
          (this.dimensionsDetectCount = e.dimensionsDetectCount);
      }
      (p.seriesDataToSource = function(e) {
        return new p({ data: e, sourceFormat: o(e) ? h : l, fromDataset: !1 });
      }),
        r(p);
      var g = p;
      e.exports = g;
    },
    function(e, t) {
      (t.SOURCE_FORMAT_ORIGINAL = 'original'),
        (t.SOURCE_FORMAT_ARRAY_ROWS = 'arrayRows'),
        (t.SOURCE_FORMAT_OBJECT_ROWS = 'objectRows'),
        (t.SOURCE_FORMAT_KEYED_COLUMNS = 'keyedColumns'),
        (t.SOURCE_FORMAT_UNKNOWN = 'unknown'),
        (t.SOURCE_FORMAT_TYPED_ARRAY = 'typedArray'),
        (t.SERIES_LAYOUT_BY_COLUMN = 'column'),
        (t.SERIES_LAYOUT_BY_ROW = 'row');
    },
    function(e, t, n) {
      var i = n(2),
        a = i.each,
        o = i.createHashMap,
        r = (i.assert, n(23).__DEV__, o(['tooltip', 'label', 'itemName', 'itemId', 'seriesName']));
      function s(e, t) {
        return e.hasOwnProperty(t) || (e[t] = []), e[t];
      }
      (t.OTHER_DIMENSIONS = r),
        (t.summarizeDimensions = function(e) {
          var t = {},
            n = (t.encode = {}),
            i = o(),
            l = [],
            u = [],
            c = (t.userOutput = { dimensionNames: e.dimensions.slice(), encode: {} });
          a(e.dimensions, function(t) {
            var a,
              o = e.getDimensionInfo(t),
              h = o.coordDim;
            if (h) {
              var d = o.coordDimIndex;
              (s(n, h)[d] = t),
                o.isExtraCoord ||
                  (i.set(h, 1),
                  'ordinal' !== (a = o.type) && 'time' !== a && (l[0] = t),
                  (s(c.encode, h)[d] = o.index)),
                o.defaultTooltip && u.push(t);
            }
            r.each(function(e, t) {
              var i = s(n, t),
                a = o.otherDims[t];
              null != a && !1 !== a && (i[a] = o.name);
            });
          });
          var h = [],
            d = {};
          i.each(function(e, t) {
            var i = n[t];
            (d[t] = i[0]), (h = h.concat(i));
          }),
            (t.dataDimsOnCoord = h),
            (t.encodeFirstDimNotExtra = d);
          var p = n.label;
          p && p.length && (l = p.slice());
          var g = n.tooltip;
          return (
            g && g.length ? (u = g.slice()) : u.length || (u = l.slice()),
            (n.defaultedLabel = l),
            (n.defaultedTooltip = u),
            t
          );
        }),
        (t.getDimensionTypeByAxis = function(e) {
          return 'category' === e ? 'ordinal' : 'time' === e ? 'time' : 'float';
        });
    },
    function(e, t, n) {
      var i = n(6),
        a = n(201),
        o = n(2).isObject;
      function r(e) {
        (this.group = new i.Group()), (this._symbolCtor = e || a);
      }
      var s = r.prototype;
      function l(e, t, n, i) {
        return (
          t &&
          !isNaN(t[0]) &&
          !isNaN(t[1]) &&
          !(i.isIgnore && i.isIgnore(n)) &&
          !(i.clipShape && !i.clipShape.contain(t[0], t[1])) &&
          'none' !== e.getItemVisual(n, 'symbol')
        );
      }
      function u(e) {
        return null == e || o(e) || (e = { isIgnore: e }), e || {};
      }
      function c(e) {
        var t = e.hostModel;
        return {
          itemStyle: t.getModel('itemStyle').getItemStyle(['color']),
          hoverItemStyle: t.getModel('emphasis.itemStyle').getItemStyle(),
          symbolRotate: t.get('symbolRotate'),
          symbolOffset: t.get('symbolOffset'),
          hoverAnimation: t.get('hoverAnimation'),
          labelModel: t.getModel('label'),
          hoverLabelModel: t.getModel('emphasis.label'),
          cursorStyle: t.get('cursor')
        };
      }
      (s.updateData = function(e, t) {
        t = u(t);
        var n = this.group,
          a = e.hostModel,
          o = this._data,
          r = this._symbolCtor,
          s = c(e);
        o || n.removeAll(),
          e
            .diff(o)
            .add(function(i) {
              var a = e.getItemLayout(i);
              if (l(e, a, i, t)) {
                var o = new r(e, i, s);
                o.attr('position', a), e.setItemGraphicEl(i, o), n.add(o);
              }
            })
            .update(function(u, c) {
              var h = o.getItemGraphicEl(c),
                d = e.getItemLayout(u);
              l(e, d, u, t)
                ? (h
                    ? (h.updateData(e, u, s), i.updateProps(h, { position: d }, a))
                    : (h = new r(e, u)).attr('position', d),
                  n.add(h),
                  e.setItemGraphicEl(u, h))
                : n.remove(h);
            })
            .remove(function(e) {
              var t = o.getItemGraphicEl(e);
              t &&
                t.fadeOut(function() {
                  n.remove(t);
                });
            })
            .execute(),
          (this._data = e);
      }),
        (s.isPersistent = function() {
          return !0;
        }),
        (s.updateLayout = function() {
          var e = this._data;
          e &&
            e.eachItemGraphicEl(function(t, n) {
              var i = e.getItemLayout(n);
              t.attr('position', i);
            });
        }),
        (s.incrementalPrepareUpdate = function(e) {
          (this._seriesScope = c(e)), (this._data = null), this.group.removeAll();
        }),
        (s.incrementalUpdate = function(e, t, n) {
          function i(e) {
            e.isGroup || (e.incremental = e.useHoverLayer = !0);
          }
          n = u(n);
          for (var a = e.start; a < e.end; a++) {
            var o = t.getItemLayout(a);
            if (l(t, o, a, n)) {
              var r = new this._symbolCtor(t, a, this._seriesScope);
              r.traverse(i), r.attr('position', o), this.group.add(r), t.setItemGraphicEl(a, r);
            }
          }
        }),
        (s.remove = function(e) {
          var t = this.group,
            n = this._data;
          n && e
            ? n.eachItemGraphicEl(function(e) {
                e.fadeOut(function() {
                  t.remove(e);
                });
              })
            : t.removeAll();
        });
      var h = r;
      e.exports = h;
    },
    function(e, t, n) {
      var i = n(6),
        a = n(16).round;
      function o(e, t, n) {
        var a = e.getArea(),
          o = e.getBaseAxis().isHorizontal(),
          r = a.x,
          s = a.y,
          l = a.width,
          u = a.height,
          c = n.get('lineStyle.width') || 2;
        (r -= c / 2), (s -= c / 2), (l += c), (u += c);
        var h = new i.Rect({ shape: { x: r, y: s, width: l, height: u } });
        return (
          t &&
            ((h.shape[o ? 'width' : 'height'] = 0),
            i.initProps(h, { shape: { width: l, height: u } }, n)),
          h
        );
      }
      function r(e, t, n) {
        var o = e.getArea(),
          r = new i.Sector({
            shape: {
              cx: a(e.cx, 1),
              cy: a(e.cy, 1),
              r0: a(o.r0, 1),
              r: a(o.r, 1),
              startAngle: o.startAngle,
              endAngle: o.endAngle,
              clockwise: o.clockwise
            }
          });
        return (
          t &&
            ((r.shape.endAngle = o.startAngle),
            i.initProps(r, { shape: { endAngle: o.endAngle } }, n)),
          r
        );
      }
      (t.createGridClipPath = o),
        (t.createPolarClipPath = r),
        (t.createClipPath = function(e, t, n) {
          return e
            ? 'polar' === e.type
              ? r(e, t, n)
              : 'cartesian2d' === e.type
              ? o(e, t, n)
              : null
            : null;
        });
    },
    function(e, t, n) {
      var i = n(2).map,
        a = n(122),
        o = n(72).isDimensionStacked;
      e.exports = function(e) {
        return {
          seriesType: e,
          plan: a(),
          reset: function(e) {
            var t = e.getData(),
              n = e.coordinateSystem,
              a = e.pipelineContext.large;
            if (n) {
              var r = i(n.dimensions, function(e) {
                  return t.mapDimension(e);
                }).slice(0, 2),
                s = r.length,
                l = t.getCalculationInfo('stackResultDimension');
              return (
                o(t, r[0]) && (r[0] = l),
                o(t, r[1]) && (r[1] = l),
                s && {
                  progress: function(e, t) {
                    for (
                      var i = e.end - e.start,
                        o = a && new Float32Array(i * s),
                        l = e.start,
                        u = 0,
                        c = [],
                        h = [];
                      l < e.end;
                      l++
                    ) {
                      var d;
                      if (1 === s) {
                        var p = t.get(r[0], l);
                        d = !isNaN(p) && n.dataToPoint(p, null, h);
                      } else {
                        p = c[0] = t.get(r[0], l);
                        var g = (c[1] = t.get(r[1], l));
                        d = !isNaN(p) && !isNaN(g) && n.dataToPoint(c, null, h);
                      }
                      a
                        ? ((o[u++] = d ? d[0] : NaN), (o[u++] = d ? d[1] : NaN))
                        : t.setItemLayout(l, (d && d.slice()) || [NaN, NaN]);
                    }
                    a && t.setLayout('symbolPoints', o);
                  }
                }
              );
            }
          }
        };
      };
    },
    function(e, t, n) {
      var i = n(4),
        a = n(2),
        o = n(6);
      n(296),
        n(797),
        i.extendComponentView({
          type: 'grid',
          render: function(e, t) {
            this.group.removeAll(),
              e.get('show') &&
                this.group.add(
                  new o.Rect({
                    shape: e.coordinateSystem.getRect(),
                    style: a.defaults({ fill: e.get('backgroundColor') }, e.getItemStyle()),
                    silent: !0,
                    z2: -1
                  })
                );
          }
        }),
        i.registerPreprocessor(function(e) {
          e.xAxis && e.yAxis && !e.grid && (e.grid = {});
        });
    },
    function(e, t) {
      e.exports = function(e) {
        return {
          seriesType: e,
          reset: function(e, t) {
            var n = t.findComponents({ mainType: 'legend' });
            if (n && n.length) {
              var i = e.getData();
              i.filterSelf(function(e) {
                for (var t = i.getName(e), a = 0; a < n.length; a++)
                  if (!n[a].isSelected(t)) return !1;
                return !0;
              });
            }
          }
        };
      };
    },
    function(e, t, n) {
      var i = n(2),
        a = n(99),
        o = n(69),
        r = n(435);
      function s(e) {
        this.pointerChecker, (this._zr = e), (this._opt = {});
        var t = i.bind,
          n = t(l, this),
          o = t(u, this),
          r = t(c, this),
          s = t(h, this),
          p = t(d, this);
        a.call(this),
          (this.setPointerChecker = function(e) {
            this.pointerChecker = e;
          }),
          (this.enable = function(t, a) {
            this.disable(),
              (this._opt = i.defaults(i.clone(a) || {}, {
                zoomOnMouseWheel: !0,
                moveOnMouseMove: !0,
                moveOnMouseWheel: !1,
                preventDefaultMouseMove: !0
              })),
              null == t && (t = !0),
              (!0 !== t && 'move' !== t && 'pan' !== t) ||
                (e.on('mousedown', n), e.on('mousemove', o), e.on('mouseup', r)),
              (!0 !== t && 'scale' !== t && 'zoom' !== t) ||
                (e.on('mousewheel', s), e.on('pinch', p));
          }),
          (this.disable = function() {
            e.off('mousedown', n),
              e.off('mousemove', o),
              e.off('mouseup', r),
              e.off('mousewheel', s),
              e.off('pinch', p);
          }),
          (this.dispose = this.disable),
          (this.isDragging = function() {
            return this._dragging;
          }),
          (this.isPinching = function() {
            return this._pinching;
          });
      }
      function l(e) {
        if (!(o.isMiddleOrRightButtonOnMouseUpDown(e) || (e.target && e.target.draggable))) {
          var t = e.offsetX,
            n = e.offsetY;
          this.pointerChecker &&
            this.pointerChecker(e, t, n) &&
            ((this._x = t), (this._y = n), (this._dragging = !0));
        }
      }
      function u(e) {
        if (
          this._dragging &&
          f('moveOnMouseMove', e, this._opt) &&
          'pinch' !== e.gestureEvent &&
          !r.isTaken(this._zr, 'globalPan')
        ) {
          var t = e.offsetX,
            n = e.offsetY,
            i = this._x,
            a = this._y,
            s = t - i,
            l = n - a;
          (this._x = t),
            (this._y = n),
            this._opt.preventDefaultMouseMove && o.stop(e.event),
            g(this, 'pan', 'moveOnMouseMove', e, {
              dx: s,
              dy: l,
              oldX: i,
              oldY: a,
              newX: t,
              newY: n
            });
        }
      }
      function c(e) {
        o.isMiddleOrRightButtonOnMouseUpDown(e) || (this._dragging = !1);
      }
      function h(e) {
        var t = f('zoomOnMouseWheel', e, this._opt),
          n = f('moveOnMouseWheel', e, this._opt),
          i = e.wheelDelta,
          a = Math.abs(i),
          o = e.offsetX,
          r = e.offsetY;
        if (0 !== i && (t || n)) {
          if (t) {
            var s = a > 3 ? 1.4 : a > 1 ? 1.2 : 1.1;
            p(this, 'zoom', 'zoomOnMouseWheel', e, {
              scale: i > 0 ? s : 1 / s,
              originX: o,
              originY: r
            });
          }
          if (n) {
            var l = Math.abs(i);
            p(this, 'scrollMove', 'moveOnMouseWheel', e, {
              scrollDelta: (i > 0 ? 1 : -1) * (l > 3 ? 0.4 : l > 1 ? 0.15 : 0.05),
              originX: o,
              originY: r
            });
          }
        }
      }
      function d(e) {
        r.isTaken(this._zr, 'globalPan') ||
          p(this, 'zoom', null, e, {
            scale: e.pinchScale > 1 ? 1.1 : 1 / 1.1,
            originX: e.pinchX,
            originY: e.pinchY
          });
      }
      function p(e, t, n, i, a) {
        e.pointerChecker &&
          e.pointerChecker(i, a.originX, a.originY) &&
          (o.stop(i.event), g(e, t, n, i, a));
      }
      function g(e, t, n, a, o) {
        (o.isAvailableBehavior = i.bind(f, null, n, a)), e.trigger(t, o);
      }
      function f(e, t, n) {
        var a = n[e];
        return !e || (a && (!i.isString(a) || t.event[a + 'Key']));
      }
      i.mixin(s, a);
      var m = s;
      e.exports = m;
    },
    function(e, t, n) {
      var i = n(4),
        a = n(2),
        o = n(203),
        r = n(923);
      n(924),
        n(925),
        n(454),
        i.registerPreprocessor(function(e) {
          if (e) {
            (!e.axisPointer || 0 === e.axisPointer.length) && (e.axisPointer = {});
            var t = e.axisPointer.link;
            t && !a.isArray(t) && (e.axisPointer.link = [t]);
          }
        }),
        i.registerProcessor(i.PRIORITY.PROCESSOR.STATISTIC, function(e, t) {
          e.getComponent('axisPointer').coordSysAxesInfo = o.collect(e, t);
        }),
        i.registerAction(
          { type: 'updateAxisPointer', event: 'updateAxisPointer', update: ':updateAxisPointer' },
          r
        );
    },
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    function(e, t, n) {
      var i = n(4);
      !(function() {
        for (var e in i) {
          if (null == i || !i.hasOwnProperty(e) || 'default' === e || '__esModule' === e) return;
          t[e] = i[e];
        }
      })();
      var a = n(419);
      !(function() {
        for (var e in a) {
          if (null == a || !a.hasOwnProperty(e) || 'default' === e || '__esModule' === e) return;
          t[e] = a[e];
        }
      })(),
        n(373),
        n(665),
        n(666),
        n(667),
        n(807),
        n(668),
        n(820),
        n(834),
        n(840),
        n(848),
        n(863),
        n(867),
        n(871),
        n(883),
        n(889),
        n(894),
        n(900),
        n(904),
        n(910),
        n(914),
        n(917),
        n(931),
        n(937),
        n(943),
        n(944),
        n(956),
        n(450),
        n(443),
        n(959),
        n(963),
        n(964),
        n(669),
        n(159),
        n(980),
        n(670),
        n(988),
        n(997),
        n(1e3),
        n(1003),
        n(1006),
        n(374),
        n(1012),
        n(461),
        n(460),
        n(1018),
        n(462),
        n(471),
        n(1023),
        n(1026);
    },
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    function(e, t, n) {
      n(23).__DEV__;
      var i = n(18),
        a = i.makeInner,
        o = i.getDataItemValue,
        r = n(416).getCoordSysDefineBySeries,
        s = n(2),
        l = s.createHashMap,
        u = s.each,
        c = s.map,
        h = s.isArray,
        d = s.isString,
        p = s.isObject,
        g = s.isTypedArray,
        f = s.isArrayLike,
        m = s.extend,
        v = (s.assert, n(150)),
        y = n(151),
        x = y.SOURCE_FORMAT_ORIGINAL,
        _ = y.SOURCE_FORMAT_ARRAY_ROWS,
        b = y.SOURCE_FORMAT_OBJECT_ROWS,
        S = y.SOURCE_FORMAT_KEYED_COLUMNS,
        w = y.SOURCE_FORMAT_UNKNOWN,
        M = y.SOURCE_FORMAT_TYPED_ARRAY,
        I = y.SERIES_LAYOUT_BY_ROW,
        A = a();
      function T(e) {
        if (e) {
          var t = l();
          return c(e, function(e, n) {
            if (null == (e = m({}, p(e) ? e : { name: e })).name) return e;
            (e.name += ''), null == e.displayName && (e.displayName = e.name);
            var i = t.get(e.name);
            return i ? (e.name += '-' + i.count++) : t.set(e.name, { count: 1 }), e;
          });
        }
      }
      function D(e, t, n, i) {
        if ((null == i && (i = 1 / 0), t === I))
          for (var a = 0; a < n.length && a < i; a++) e(n[a] ? n[a][0] : null, a);
        else {
          var o = n[0] || [];
          for (a = 0; a < o.length && a < i; a++) e(o[a], a);
        }
      }
      function C(e, t, n, i, a, r) {
        var s, l;
        if (g(e)) return !1;
        if ((i && ((l = i[r]), (l = p(l) ? l.name : l)), t === _))
          if (n === I) {
            for (var u = e[r], c = 0; c < (u || []).length && c < 5; c++)
              if (null != (s = y(u[a + c]))) return s;
          } else
            for (c = 0; c < e.length && c < 5; c++) {
              var f = e[a + c];
              if (f && null != (s = y(f[r]))) return s;
            }
        else if (t === b) {
          if (!l) return;
          for (c = 0; c < e.length && c < 5; c++) {
            if ((m = e[c]) && null != (s = y(m[l]))) return s;
          }
        } else if (t === S) {
          if (!l) return;
          if (!(u = e[l]) || g(u)) return !1;
          for (c = 0; c < u.length && c < 5; c++) if (null != (s = y(u[c]))) return s;
        } else if (t === x)
          for (c = 0; c < e.length && c < 5; c++) {
            var m = e[c],
              v = o(m);
            if (!h(v)) return !1;
            if (null != (s = y(v[r]))) return s;
          }
        function y(e) {
          return (null == e || !isFinite(e) || '' === e) && (!(!d(e) || '-' === e) || void 0);
        }
        return !1;
      }
      (t.detectSourceFormat = function(e) {
        var t = e.option.source,
          n = w;
        if (g(t)) n = M;
        else if (h(t)) {
          0 === t.length && (n = _);
          for (var i = 0, a = t.length; i < a; i++) {
            var o = t[i];
            if (null != o) {
              if (h(o)) {
                n = _;
                break;
              }
              if (p(o)) {
                n = b;
                break;
              }
            }
          }
        } else if (p(t)) {
          for (var r in t)
            if (t.hasOwnProperty(r) && f(t[r])) {
              n = S;
              break;
            }
        } else if (null != t) throw new Error('Invalid data');
        A(e).sourceFormat = n;
      }),
        (t.getSource = function(e) {
          return A(e).source;
        }),
        (t.resetSourceDefaulter = function(e) {
          A(e).datasetMap = l();
        }),
        (t.prepareSource = function(e) {
          var t = e.option,
            n = t.data,
            i = g(n) ? M : x,
            a = !1,
            s = t.seriesLayoutBy,
            c = t.sourceHeader,
            f = t.dimensions,
            m = (function(e) {
              var t = e.option;
              if (!t.data) return e.ecModel.getComponent('dataset', t.datasetIndex || 0);
            })(e);
          if (m) {
            var y = m.option;
            (n = y.source),
              (i = A(m).sourceFormat),
              (a = !0),
              (s = s || y.seriesLayoutBy),
              null == c && (c = y.sourceHeader),
              (f = f || y.dimensions);
          }
          var w = (function(e, t, n, i, a) {
              if (!e) return { dimensionsDefine: T(a) };
              var r, s, l, c;
              if (t === _)
                'auto' === i || null == i
                  ? D(
                      function(e) {
                        null != e && '-' !== e && (d(e) ? null == s && (s = 1) : (s = 0));
                      },
                      n,
                      e,
                      10
                    )
                  : (s = i ? 1 : 0),
                  a ||
                    1 !== s ||
                    ((a = []),
                    D(
                      function(e, t) {
                        a[t] = null != e ? e : '';
                      },
                      n,
                      e
                    )),
                  (r = a ? a.length : n === I ? e.length : e[0] ? e[0].length : null);
              else if (t === b)
                a ||
                  ((a = (function(e) {
                    var t,
                      n = 0;
                    for (; n < e.length && !(t = e[n++]); );
                    if (t) {
                      var i = [];
                      return (
                        u(t, function(e, t) {
                          i.push(t);
                        }),
                        i
                      );
                    }
                  })(e)),
                  (l = !0));
              else if (t === S)
                a ||
                  ((a = []),
                  (l = !0),
                  u(e, function(e, t) {
                    a.push(t);
                  }));
              else if (t === x) {
                var g = o(e[0]);
                r = (h(g) && g.length) || 1;
              }
              l &&
                u(a, function(e, t) {
                  'name' === (p(e) ? e.name : e) && (c = t);
                });
              return {
                startIndex: s,
                dimensionsDefine: T(a),
                dimensionsDetectCount: r,
                potentialNameDimIndex: c
              };
            })(n, i, s, c, f),
            L = t.encode;
          !L &&
            m &&
            (L = (function(e, t, n, i, a, o) {
              var s = r(e),
                c = {},
                h = [],
                d = [],
                p = e.subType,
                g = l(['pie', 'map', 'funnel']),
                f = l([
                  'line',
                  'bar',
                  'pictorialBar',
                  'scatter',
                  'effectScatter',
                  'candlestick',
                  'boxplot'
                ]);
              if (s && null != f.get(p)) {
                var m = e.ecModel,
                  v = A(m).datasetMap,
                  y = t.uid + '_' + a,
                  x = v.get(y) || v.set(y, { categoryWayDim: 1, valueWayDim: 0 });
                u(s.coordSysDims, function(e) {
                  if (null == s.firstCategoryDimIndex) {
                    var t = x.valueWayDim++;
                    (c[e] = t), d.push(t);
                  } else if (s.categoryAxisMap.get(e)) (c[e] = 0), h.push(0);
                  else {
                    t = x.categoryWayDim++;
                    (c[e] = t), d.push(t);
                  }
                });
              } else if (null != g.get(p)) {
                for (var _, b = 0; b < 5 && null == _; b++)
                  C(n, i, a, o.dimensionsDefine, o.startIndex, b) || (_ = b);
                if (null != _) {
                  c.value = _;
                  var S = o.potentialNameDimIndex || Math.max(_ - 1, 0);
                  d.push(S), h.push(S);
                }
              }
              return h.length && (c.itemName = h), d.length && (c.seriesName = d), c;
            })(e, m, n, i, s, w)),
            (A(e).source = new v({
              data: n,
              fromDataset: a,
              seriesLayoutBy: s,
              sourceFormat: i,
              dimensionsDefine: w.dimensionsDefine,
              startIndex: w.startIndex,
              dimensionsDetectCount: w.dimensionsDetectCount,
              encodeDefine: L
            }));
        }),
        (t.guessOrdinal = function(e, t) {
          return C(e.data, e.sourceFormat, e.seriesLayoutBy, e.dimensionsDefine, e.startIndex, t);
        });
    },
    function(e, t, n) {
      var i = n(118),
        a = n(149),
        o = n(78),
        r = function() {
          (this.group = new i()), (this.uid = a.getUID('viewComponent'));
        },
        s = (r.prototype = {
          constructor: r,
          init: function(e, t) {},
          render: function(e, t, n, i) {},
          dispose: function() {},
          filterForExposedEvent: null
        });
      (s.updateView = s.updateLayout = s.updateVisual = function(e, t, n, i) {}),
        o.enableClassExtend(r),
        o.enableClassManagement(r, { registerWhenExtend: !0 });
      var l = r;
      e.exports = l;
    },
    function(e, t, n) {
      var i = n(78);
      function a(e) {
        (this._setting = e || {}),
          (this._extent = [1 / 0, -1 / 0]),
          (this._interval = 0),
          this.init && this.init.apply(this, arguments);
      }
      (a.prototype.parse = function(e) {
        return e;
      }),
        (a.prototype.getSetting = function(e) {
          return this._setting[e];
        }),
        (a.prototype.contain = function(e) {
          var t = this._extent;
          return e >= t[0] && e <= t[1];
        }),
        (a.prototype.normalize = function(e) {
          var t = this._extent;
          return t[1] === t[0] ? 0.5 : (e - t[0]) / (t[1] - t[0]);
        }),
        (a.prototype.scale = function(e) {
          var t = this._extent;
          return e * (t[1] - t[0]) + t[0];
        }),
        (a.prototype.unionExtent = function(e) {
          var t = this._extent;
          e[0] < t[0] && (t[0] = e[0]), e[1] > t[1] && (t[1] = e[1]);
        }),
        (a.prototype.unionExtentFromData = function(e, t) {
          this.unionExtent(e.getApproximateExtent(t));
        }),
        (a.prototype.getExtent = function() {
          return this._extent.slice();
        }),
        (a.prototype.setExtent = function(e, t) {
          var n = this._extent;
          isNaN(e) || (n[0] = e), isNaN(t) || (n[1] = t);
        }),
        (a.prototype.isBlank = function() {
          return this._isBlank;
        }),
        (a.prototype.setBlank = function(e) {
          this._isBlank = e;
        }),
        (a.prototype.getLabel = null),
        i.enableClassExtend(a),
        i.enableClassManagement(a, { registerWhenExtend: !0 });
      var o = a;
      e.exports = o;
    },
    function(e, t, n) {
      var i = n(16),
        a = n(30),
        o = n(198),
        r = n(421),
        s = i.round,
        l = o.extend({
          type: 'interval',
          _interval: 0,
          _intervalPrecision: 2,
          setExtent: function(e, t) {
            var n = this._extent;
            isNaN(e) || (n[0] = parseFloat(e)), isNaN(t) || (n[1] = parseFloat(t));
          },
          unionExtent: function(e) {
            var t = this._extent;
            e[0] < t[0] && (t[0] = e[0]),
              e[1] > t[1] && (t[1] = e[1]),
              l.prototype.setExtent.call(this, t[0], t[1]);
          },
          getInterval: function() {
            return this._interval;
          },
          setInterval: function(e) {
            (this._interval = e),
              (this._niceExtent = this._extent.slice()),
              (this._intervalPrecision = r.getIntervalPrecision(e));
          },
          getTicks: function() {
            return r.intervalScaleGetTicks(
              this._interval,
              this._extent,
              this._niceExtent,
              this._intervalPrecision
            );
          },
          getLabel: function(e, t) {
            if (null == e) return '';
            var n = t && t.precision;
            return (
              null == n
                ? (n = i.getPrecisionSafe(e) || 0)
                : 'auto' === n && (n = this._intervalPrecision),
              (e = s(e, n, !0)),
              a.addCommas(e)
            );
          },
          niceTicks: function(e, t, n) {
            e = e || 5;
            var i = this._extent,
              a = i[1] - i[0];
            if (isFinite(a)) {
              a < 0 && ((a = -a), i.reverse());
              var o = r.intervalScaleNiceTicks(i, e, t, n);
              (this._intervalPrecision = o.intervalPrecision),
                (this._interval = o.interval),
                (this._niceExtent = o.niceTickExtent);
            }
          },
          niceExtent: function(e) {
            var t = this._extent;
            if (t[0] === t[1])
              if (0 !== t[0]) {
                var n = t[0];
                e.fixMax ? (t[0] -= n / 2) : ((t[1] += n / 2), (t[0] -= n / 2));
              } else t[1] = 1;
            var i = t[1] - t[0];
            isFinite(i) || ((t[0] = 0), (t[1] = 1)),
              this.niceTicks(e.splitNumber, e.minInterval, e.maxInterval);
            var a = this._interval;
            e.fixMin || (t[0] = s(Math.floor(t[0] / a) * a)),
              e.fixMax || (t[1] = s(Math.ceil(t[1] / a) * a));
          }
        });
      l.create = function() {
        return new l();
      };
      var u = l;
      e.exports = u;
    },
    function(e, t, n) {
      var i = n(2),
        a = n(16).parsePercent,
        o = n(72).isDimensionStacked,
        r = n(122),
        s = '__ec_stack_',
        l = 'undefined' !== typeof Float32Array ? Float32Array : Array;
      function u(e) {
        return e.get('stack') || s + e.seriesIndex;
      }
      function c(e) {
        return e.dim + e.index;
      }
      function h(e, t) {
        var n = [];
        return (
          t.eachSeriesByType(e, function(e) {
            m(e) && !v(e) && n.push(e);
          }),
          n
        );
      }
      function d(e) {
        var t = (function(e) {
            var t = {};
            i.each(e, function(e) {
              var n = e.coordinateSystem.getBaseAxis();
              if ('time' === n.type || 'value' === n.type)
                for (
                  var i = e.getData(),
                    a = n.dim + '_' + n.index,
                    o = i.mapDimension(n.dim),
                    r = 0,
                    s = i.count();
                  r < s;
                  ++r
                ) {
                  var l = i.get(o, r);
                  t[a] ? t[a].push(l) : (t[a] = [l]);
                }
            });
            var n = [];
            for (var a in t)
              if (t.hasOwnProperty(a)) {
                var o = t[a];
                if (o) {
                  o.sort(function(e, t) {
                    return e - t;
                  });
                  for (var r = null, s = 1; s < o.length; ++s) {
                    var l = o[s] - o[s - 1];
                    l > 0 && (r = null === r ? l : Math.min(r, l));
                  }
                  n[a] = r;
                }
              }
            return n;
          })(e),
          n = [];
        return (
          i.each(e, function(e) {
            var i,
              o = e.coordinateSystem.getBaseAxis(),
              r = o.getExtent();
            if ('category' === o.type) i = o.getBandWidth();
            else if ('value' === o.type || 'time' === o.type) {
              var s = o.dim + '_' + o.index,
                l = t[s],
                h = Math.abs(r[1] - r[0]),
                d = o.scale.getExtent(),
                p = Math.abs(d[1] - d[0]);
              i = l ? (h / p) * l : h;
            } else {
              var g = e.getData();
              i = Math.abs(r[1] - r[0]) / g.count();
            }
            var f = a(e.get('barWidth'), i),
              m = a(e.get('barMaxWidth'), i),
              v = a(e.get('barMinWidth') || 1, i),
              y = e.get('barGap'),
              x = e.get('barCategoryGap');
            n.push({
              bandWidth: i,
              barWidth: f,
              barMaxWidth: m,
              barMinWidth: v,
              barGap: y,
              barCategoryGap: x,
              axisKey: c(o),
              stackId: u(e)
            });
          }),
          p(n)
        );
      }
      function p(e) {
        var t = {};
        i.each(e, function(e, n) {
          var i = e.axisKey,
            a = e.bandWidth,
            o = t[i] || {
              bandWidth: a,
              remainedWidth: a,
              autoWidthCount: 0,
              categoryGap: '20%',
              gap: '30%',
              stacks: {}
            },
            r = o.stacks;
          t[i] = o;
          var s = e.stackId;
          r[s] || o.autoWidthCount++, (r[s] = r[s] || { width: 0, maxWidth: 0 });
          var l = e.barWidth;
          l &&
            !r[s].width &&
            ((r[s].width = l), (l = Math.min(o.remainedWidth, l)), (o.remainedWidth -= l));
          var u = e.barMaxWidth;
          u && (r[s].maxWidth = u);
          var c = e.barMinWidth;
          c && (r[s].minWidth = c);
          var h = e.barGap;
          null != h && (o.gap = h);
          var d = e.barCategoryGap;
          null != d && (o.categoryGap = d);
        });
        var n = {};
        return (
          i.each(t, function(e, t) {
            n[t] = {};
            var o = e.stacks,
              r = e.bandWidth,
              s = a(e.categoryGap, r),
              l = a(e.gap, 1),
              u = e.remainedWidth,
              c = e.autoWidthCount,
              h = (u - s) / (c + (c - 1) * l);
            (h = Math.max(h, 0)),
              i.each(o, function(e) {
                var t = e.maxWidth,
                  n = e.minWidth;
                if (e.width) {
                  i = e.width;
                  t && (i = Math.min(i, t)),
                    n && (i = Math.max(i, n)),
                    (e.width = i),
                    (u -= i),
                    c--;
                } else {
                  var i = h;
                  t && t < i && (i = Math.min(t, u)),
                    n && n > i && (i = n),
                    i !== h && ((e.width = i), (u -= i), c--);
                }
              }),
              (h = (u - s) / (c + (c - 1) * l)),
              (h = Math.max(h, 0));
            var d,
              p = 0;
            i.each(o, function(e, t) {
              e.width || (e.width = h), (d = e), (p += e.width * (1 + l));
            }),
              d && (p -= d.width * l);
            var g = -p / 2;
            i.each(o, function(e, i) {
              (n[t][i] = n[t][i] || { bandWidth: r, offset: g, width: e.width }),
                (g += e.width * (1 + l));
            });
          }),
          n
        );
      }
      function g(e, t, n) {
        if (e && t) {
          var i = e[c(t)];
          return null != i && null != n && (i = i[u(n)]), i;
        }
      }
      var f = {
        seriesType: 'bar',
        plan: r(),
        reset: function(e) {
          if (m(e) && v(e)) {
            var t = e.getData(),
              n = e.coordinateSystem,
              i = n.getBaseAxis(),
              a = n.getOtherAxis(i),
              o = t.mapDimension(a.dim),
              r = t.mapDimension(i.dim),
              s = a.isHorizontal(),
              u = s ? 0 : 1,
              c = g(d([e]), i, e).width;
            return (
              c > 0.5 || (c = 0.5),
              {
                progress: function(e, t) {
                  var h,
                    d = e.count,
                    p = new l(2 * d),
                    g = new l(d),
                    f = [],
                    m = [],
                    v = 0,
                    x = 0;
                  for (; null != (h = e.next()); )
                    (m[u] = t.get(o, h)),
                      (m[1 - u] = t.get(r, h)),
                      (f = n.dataToPoint(m, null, f)),
                      (p[v++] = f[0]),
                      (p[v++] = f[1]),
                      (g[x++] = h);
                  t.setLayout({
                    largePoints: p,
                    largeDataIndices: g,
                    barWidth: c,
                    valueAxisStart: y(i, a, !1),
                    valueAxisHorizontal: s
                  });
                }
              }
            );
          }
        }
      };
      function m(e) {
        return e.coordinateSystem && 'cartesian2d' === e.coordinateSystem.type;
      }
      function v(e) {
        return e.pipelineContext && e.pipelineContext.large;
      }
      function y(e, t, n) {
        return t.toGlobalCoord(t.dataToCoord('log' === t.type ? 1 : 0));
      }
      (t.getLayoutOnAxis = function(e) {
        var t = [],
          n = e.axis;
        if ('category' === n.type) {
          for (var a = n.getBandWidth(), o = 0; o < e.count; o++)
            t.push(i.defaults({ bandWidth: a, axisKey: 'axis0', stackId: s + o }, e));
          var r = p(t),
            l = [];
          for (o = 0; o < e.count; o++) {
            var u = r.axis0[s + o];
            (u.offsetCenter = u.offset + u.width / 2), l.push(u);
          }
          return l;
        }
      }),
        (t.prepareLayoutBarSeries = h),
        (t.makeColumnLayout = d),
        (t.retrieveColumnLayout = g),
        (t.layout = function(e, t) {
          var n = h(e, t),
            a = d(n),
            r = {},
            s = {};
          i.each(
            n,
            function(e) {
              var t = e.getData(),
                n = e.coordinateSystem,
                i = n.getBaseAxis(),
                l = u(e),
                h = a[c(i)][l],
                d = h.offset,
                p = h.width,
                g = n.getOtherAxis(i),
                f = e.get('barMinHeight') || 0;
              (r[l] = r[l] || []),
                (s[l] = s[l] || []),
                t.setLayout({ bandWidth: h.bandWidth, offset: d, size: p });
              for (
                var m = t.mapDimension(g.dim),
                  v = t.mapDimension(i.dim),
                  x = o(t, m),
                  _ = g.isHorizontal(),
                  b = y(i, g, x),
                  S = 0,
                  w = t.count();
                S < w;
                S++
              ) {
                var M = t.get(m, S),
                  I = t.get(v, S);
                if (!isNaN(M) && !isNaN(I)) {
                  var A,
                    T,
                    D,
                    C,
                    L,
                    P = M >= 0 ? 'p' : 'n',
                    O = b;
                  if ((x && (r[l][I] || (r[l][I] = { p: b, n: b }), (O = r[l][I][P])), _))
                    (A = O),
                      (T = (L = n.dataToPoint([M, I]))[1] + d),
                      (D = L[0] - b),
                      (C = p),
                      Math.abs(D) < f && (D = (D < 0 ? -1 : 1) * f),
                      x && (r[l][I][P] += D);
                  else
                    (A = (L = n.dataToPoint([I, M]))[0] + d),
                      (T = O),
                      (D = p),
                      (C = L[1] - b),
                      Math.abs(C) < f && (C = (C <= 0 ? -1 : 1) * f),
                      x && (r[l][I][P] += C);
                  t.setItemLayout(S, { x: A, y: T, width: D, height: C });
                }
              }
            },
            this
          );
        }),
        (t.largeLayout = f);
    },
    function(e, t, n) {
      var i = n(2),
        a = n(54).createSymbol,
        o = n(6),
        r = n(16).parsePercent,
        s = n(295).getDefaultLabel;
      function l(e, t, n) {
        o.Group.call(this), this.updateData(e, t, n);
      }
      var u = l.prototype,
        c = (l.getSymbolSize = function(e, t) {
          var n = e.getItemVisual(t, 'symbolSize');
          return n instanceof Array ? n.slice() : [+n, +n];
        });
      function h(e) {
        return [e[0] / 2, e[1] / 2];
      }
      function d(e, t) {
        this.parent.drift(e, t);
      }
      (u._createSymbol = function(e, t, n, i, o) {
        this.removeAll();
        var r = t.getItemVisual(n, 'color'),
          s = a(e, -1, -1, 2, 2, r, o);
        s.attr({ z2: 100, culling: !0, scale: h(i) }),
          (s.drift = d),
          (this._symbolType = e),
          this.add(s);
      }),
        (u.stopSymbolAnimation = function(e) {
          this.childAt(0).stopAnimation(e);
        }),
        (u.getSymbolPath = function() {
          return this.childAt(0);
        }),
        (u.getScale = function() {
          return this.childAt(0).scale;
        }),
        (u.highlight = function() {
          this.childAt(0).trigger('emphasis');
        }),
        (u.downplay = function() {
          this.childAt(0).trigger('normal');
        }),
        (u.setZ = function(e, t) {
          var n = this.childAt(0);
          (n.zlevel = e), (n.z = t);
        }),
        (u.setDraggable = function(e) {
          var t = this.childAt(0);
          (t.draggable = e), (t.cursor = e ? 'move' : t.cursor);
        }),
        (u.updateData = function(e, t, n) {
          this.silent = !1;
          var i = e.getItemVisual(t, 'symbol') || 'circle',
            a = e.hostModel,
            r = c(e, t),
            s = i !== this._symbolType;
          if (s) {
            var l = e.getItemVisual(t, 'symbolKeepAspect');
            this._createSymbol(i, e, t, r, l);
          } else {
            ((u = this.childAt(0)).silent = !1), o.updateProps(u, { scale: h(r) }, a, t);
          }
          if ((this._updateCommon(e, t, r, n), s)) {
            var u = this.childAt(0),
              d = n && n.fadeIn,
              p = { scale: u.scale.slice() };
            d && (p.style = { opacity: u.style.opacity }),
              (u.scale = [0, 0]),
              d && (u.style.opacity = 0),
              o.initProps(u, p, a, t);
          }
          this._seriesModel = a;
        });
      var p = ['itemStyle'],
        g = ['emphasis', 'itemStyle'],
        f = ['label'],
        m = ['emphasis', 'label'];
      function v(e, t) {
        if (!this.incremental && !this.useHoverLayer)
          if ('emphasis' === t) {
            var n = this.__symbolOriginalScale,
              i = n[1] / n[0],
              a = { scale: [Math.max(1.1 * n[0], n[0] + 3), Math.max(1.1 * n[1], n[1] + 3 * i)] };
            this.animateTo(a, 400, 'elasticOut');
          } else
            'normal' === t &&
              this.animateTo({ scale: this.__symbolOriginalScale }, 400, 'elasticOut');
      }
      (u._updateCommon = function(e, t, n, a) {
        var l = this.childAt(0),
          u = e.hostModel,
          c = e.getItemVisual(t, 'color');
        'image' !== l.type
          ? l.useStyle({ strokeNoScale: !0 })
          : l.setStyle({
              opacity: null,
              shadowBlur: null,
              shadowOffsetX: null,
              shadowOffsetY: null,
              shadowColor: null
            });
        var d = a && a.itemStyle,
          y = a && a.hoverItemStyle,
          x = a && a.symbolRotate,
          _ = a && a.symbolOffset,
          b = a && a.labelModel,
          S = a && a.hoverLabelModel,
          w = a && a.hoverAnimation,
          M = a && a.cursorStyle;
        if (!a || e.hasItemOption) {
          var I = a && a.itemModel ? a.itemModel : e.getItemModel(t);
          (d = I.getModel(p).getItemStyle(['color'])),
            (y = I.getModel(g).getItemStyle()),
            (x = I.getShallow('symbolRotate')),
            (_ = I.getShallow('symbolOffset')),
            (b = I.getModel(f)),
            (S = I.getModel(m)),
            (w = I.getShallow('hoverAnimation')),
            (M = I.getShallow('cursor'));
        } else y = i.extend({}, y);
        var A = l.style;
        l.attr('rotation', ((x || 0) * Math.PI) / 180 || 0),
          _ && l.attr('position', [r(_[0], n[0]), r(_[1], n[1])]),
          M && l.attr('cursor', M),
          l.setColor(c, a && a.symbolInnerColor),
          l.setStyle(d);
        var T = e.getItemVisual(t, 'opacity');
        null != T && (A.opacity = T);
        var D = e.getItemVisual(t, 'liftZ'),
          C = l.__z2Origin;
        null != D
          ? null == C && ((l.__z2Origin = l.z2), (l.z2 += D))
          : null != C && ((l.z2 = C), (l.__z2Origin = null));
        var L = a && a.useNameLabel;
        o.setLabelStyle(A, y, b, S, {
          labelFetcher: u,
          labelDataIndex: t,
          defaultText: function(t, n) {
            return L ? e.getName(t) : s(e, t);
          },
          isRectText: !0,
          autoColor: c
        }),
          (l.__symbolOriginalScale = h(n)),
          (l.hoverStyle = y),
          (l.highDownOnUpdate = w && u.isAnimationEnabled() ? v : null),
          o.setHoverStyle(l);
      }),
        (u.fadeOut = function(e, t) {
          var n = this.childAt(0);
          (this.silent = n.silent = !0),
            (!t || !t.keepLabel) && (n.style.text = null),
            o.updateProps(
              n,
              { style: { opacity: 0 }, scale: [0, 0] },
              this._seriesModel,
              this.dataIndex,
              e
            );
        }),
        i.inherits(l, o.Group);
      var y = l;
      e.exports = y;
    },
    function(e, t, n) {
      var i = n(2),
        a = n(429),
        o = n(37),
        r = n(25),
        s = r.getLayoutParams,
        l = r.mergeLayoutParam,
        u = n(420),
        c = ['value', 'category', 'time', 'log'];
      e.exports = function(e, t, n, r) {
        i.each(c, function(o) {
          t.extend({
            type: e + 'Axis.' + o,
            mergeDefaultAndTheme: function(t, a) {
              var r = this.layoutMode,
                u = r ? s(t) : {},
                c = a.getTheme();
              i.merge(t, c.get(o + 'Axis')),
                i.merge(t, this.getDefaultOption()),
                (t.type = n(e, t)),
                r && l(t, u, r);
            },
            optionUpdated: function() {
              'category' === this.option.type && (this.__ordinalMeta = u.createByAxisModel(this));
            },
            getCategories: function(e) {
              var t = this.option;
              if ('category' === t.type) return e ? t.data : this.__ordinalMeta.categories;
            },
            getOrdinalMeta: function() {
              return this.__ordinalMeta;
            },
            defaultOption: i.mergeAll([{}, a[o + 'Axis'], r], !0)
          });
        }),
          o.registerSubTypeDefaulter(e + 'Axis', i.curry(n, e));
      };
    },
    function(e, t, n) {
      var i = n(2),
        a = n(36),
        o = i.each,
        r = i.curry;
      function s(e, t) {
        return 'all' === e || (i.isArray(e) && i.indexOf(e, t) >= 0) || e === t;
      }
      function l(e) {
        var t = (e.ecModel.getComponent('axisPointer') || {}).coordSysAxesInfo;
        return t && t.axesInfo[c(e)];
      }
      function u(e) {
        return !!e.get('handle.show');
      }
      function c(e) {
        return e.type + '||' + e.id;
      }
      (t.collect = function(e, t) {
        var n = { axesInfo: {}, seriesInvolved: !1, coordSysAxesInfo: {}, coordSysMap: {} };
        return (
          (function(e, t, n) {
            var l = t.getComponent('tooltip'),
              h = t.getComponent('axisPointer'),
              d = h.get('link', !0) || [],
              p = [];
            o(n.getCoordinateSystems(), function(n) {
              if (n.axisPointerEnabled) {
                var g = c(n.model),
                  f = (e.coordSysAxesInfo[g] = {});
                e.coordSysMap[g] = n;
                var m = n.model.getModel('tooltip', l);
                if ((o(n.getAxes(), r(_, !1, null)), n.getTooltipAxes && l && m.get('show'))) {
                  var v = 'axis' === m.get('trigger'),
                    y = 'cross' === m.get('axisPointer.type'),
                    x = n.getTooltipAxes(m.get('axisPointer.axis'));
                  (v || y) && o(x.baseAxes, r(_, !y || 'cross', v)),
                    y && o(x.otherAxes, r(_, 'cross', !1));
                }
              }
              function _(r, l, g) {
                var v = g.model.getModel('axisPointer', h),
                  y = v.get('show');
                if (y && ('auto' !== y || r || u(v))) {
                  null == l && (l = v.get('triggerTooltip'));
                  var x = (v = r
                      ? (function(e, t, n, r, s, l) {
                          var u = t.getModel('axisPointer'),
                            c = {};
                          o(
                            [
                              'type',
                              'snap',
                              'lineStyle',
                              'shadowStyle',
                              'label',
                              'animation',
                              'animationDurationUpdate',
                              'animationEasingUpdate',
                              'z'
                            ],
                            function(e) {
                              c[e] = i.clone(u.get(e));
                            }
                          ),
                            (c.snap = 'category' !== e.type && !!l),
                            'cross' === u.get('type') && (c.type = 'line');
                          var h = c.label || (c.label = {});
                          if ((null == h.show && (h.show = !1), 'cross' === s)) {
                            var d = u.get('label.show');
                            if (((h.show = null == d || d), !l)) {
                              var p = (c.lineStyle = u.get('crossStyle'));
                              p && i.defaults(h, p.textStyle);
                            }
                          }
                          return e.model.getModel('axisPointer', new a(c, n, r));
                        })(g, m, h, t, r, l)
                      : v).get('snap'),
                    _ = c(g.model),
                    b = l || x || 'category' === g.type,
                    S = (e.axesInfo[_] = {
                      key: _,
                      axis: g,
                      coordSys: n,
                      axisPointerModel: v,
                      triggerTooltip: l,
                      involveSeries: b,
                      snap: x,
                      useHandle: u(v),
                      seriesModels: []
                    });
                  (f[_] = S), (e.seriesInvolved |= b);
                  var w = (function(e, t) {
                    for (var n = t.model, i = t.dim, a = 0; a < e.length; a++) {
                      var o = e[a] || {};
                      if (
                        s(o[i + 'AxisId'], n.id) ||
                        s(o[i + 'AxisIndex'], n.componentIndex) ||
                        s(o[i + 'AxisName'], n.name)
                      )
                        return a;
                    }
                  })(d, g);
                  if (null != w) {
                    var M = p[w] || (p[w] = { axesInfo: {} });
                    (M.axesInfo[_] = S), (M.mapper = d[w].mapper), (S.linkGroup = M);
                  }
                }
              }
            });
          })(n, e, t),
          n.seriesInvolved &&
            (function(e, t) {
              t.eachSeries(function(t) {
                var n = t.coordinateSystem,
                  i = t.get('tooltip.trigger', !0),
                  a = t.get('tooltip.show', !0);
                n &&
                  'none' !== i &&
                  !1 !== i &&
                  'item' !== i &&
                  !1 !== a &&
                  !1 !== t.get('axisPointer.show', !0) &&
                  o(e.coordSysAxesInfo[c(n.model)], function(e) {
                    var i = e.axis;
                    n.getAxis(i.dim) === i &&
                      (e.seriesModels.push(t),
                      null == e.seriesDataCount && (e.seriesDataCount = 0),
                      (e.seriesDataCount += t.getData().count()));
                  });
              }, this);
            })(n, e),
          n
        );
      }),
        (t.fixValue = function(e) {
          var t = l(e);
          if (t) {
            var n = t.axisPointerModel,
              i = t.axis.scale,
              a = n.option,
              o = n.get('status'),
              r = n.get('value');
            null != r && (r = i.parse(r));
            var s = u(n);
            null == o && (a.status = s ? 'show' : 'hide');
            var c = i.getExtent().slice();
            c[0] > c[1] && c.reverse(),
              (null == r || r > c[1]) && (r = c[1]),
              r < c[0] && (r = c[0]),
              (a.value = r),
              s && (a.status = t.axis.scale.isBlank() ? 'hide' : 'show');
          }
        }),
        (t.getAxisInfo = l),
        (t.getAxisPointerModel = function(e) {
          var t = l(e);
          return t && t.axisPointerModel;
        }),
        (t.makeKey = c);
    },
    function(e, t, n) {
      var i = n(2).createHashMap;
      e.exports = function(e) {
        return {
          getTargetSeries: function(t) {
            var n = {},
              a = i();
            return (
              t.eachSeriesByType(e, function(e) {
                (e.__paletteScope = n), a.set(e.uid, e);
              }),
              a
            );
          },
          reset: function(e, t) {
            var n = e.getRawData(),
              i = {},
              a = e.getData();
            a.each(function(e) {
              var t = a.getRawIndex(e);
              i[t] = e;
            }),
              n.each(function(t) {
                var o,
                  r = i[t],
                  s = null != r && a.getItemVisual(r, 'color', !0),
                  l = null != r && a.getItemVisual(r, 'borderColor', !0);
                if (((s && l) || (o = n.getItemModel(t)), s)) n.setItemVisual(t, 'color', s);
                else {
                  var u =
                    o.get('itemStyle.color') ||
                    e.getColorFromPalette(n.getName(t) || t + '', e.__paletteScope, n.count());
                  n.setItemVisual(t, 'color', u), null != r && a.setItemVisual(r, 'color', u);
                }
                if (l) n.setItemVisual(t, 'borderColor', l);
                else {
                  var c = o.get('itemStyle.borderColor');
                  n.setItemVisual(t, 'borderColor', c),
                    null != r && a.setItemVisual(r, 'borderColor', c);
                }
              });
          }
        };
      };
    },
    function(e, t, n) {
      n(23).__DEV__;
      var i = n(2),
        a = i.each,
        o = i.createHashMap,
        r = n(293),
        s = n(822),
        l = n(827),
        u = n(29),
        c = { geoJSON: s, svg: l },
        h = {
          load: function(e, t) {
            var n,
              i = [],
              r = o(),
              s = o(),
              l = p(e);
            return (
              a(l, function(o) {
                var l = c[o.type].load(e, o);
                a(l.regions, function(e) {
                  var n = e.name;
                  t && t.hasOwnProperty(n) && (e = e.cloneShallow((n = t[n]))),
                    i.push(e),
                    r.set(n, e),
                    s.set(n, e.center);
                });
                var u = l.boundingRect;
                u && (n ? n.union(u) : (n = u.clone()));
              }),
              { regions: i, regionsMap: r, nameCoordMap: s, boundingRect: n || new u(0, 0, 0, 0) }
            );
          },
          makeGraphic: d('makeGraphic'),
          removeGraphic: d('removeGraphic')
        };
      function d(e) {
        return function(t, n) {
          var i = p(t),
            o = [];
          return (
            a(i, function(i) {
              var a = c[i.type][e];
              a && o.push(a(t, i, n));
            }),
            o
          );
        };
      }
      function p(e) {
        return r.retrieveMap(e) || [];
      }
      e.exports = h;
    },
    function(e, t) {
      var n = { axisPointer: 1, tooltip: 1, brush: 1 };
      t.onIrrelevantElement = function(e, t, i) {
        var a = t.getComponentByElement(e.topTarget),
          o = a && a.coordinateSystem;
        return a && a !== i && !n[a.mainType] && o && o.model !== i;
      };
    },
    function(e, t, n) {
      var i = n(2),
        a = n(6),
        o = n(52),
        r = n(30),
        s = n(42),
        l = n(64),
        u = n(88);
      function c(e, t, n, i, a) {
        var s = h(n.get('value'), t.axis, t.ecModel, n.get('seriesDataIndices'), {
            precision: n.get('label.precision'),
            formatter: n.get('label.formatter')
          }),
          l = n.getModel('label'),
          u = r.normalizeCssArray(l.get('padding') || 0),
          c = l.getFont(),
          d = o.getBoundingRect(s, c),
          p = a.position,
          g = d.width + u[1] + u[3],
          f = d.height + u[0] + u[2],
          m = a.align;
        'right' === m && (p[0] -= g), 'center' === m && (p[0] -= g / 2);
        var v = a.verticalAlign;
        'bottom' === v && (p[1] -= f),
          'middle' === v && (p[1] -= f / 2),
          (function(e, t, n, i) {
            var a = i.getWidth(),
              o = i.getHeight();
            (e[0] = Math.min(e[0] + t, a) - t),
              (e[1] = Math.min(e[1] + n, o) - n),
              (e[0] = Math.max(e[0], 0)),
              (e[1] = Math.max(e[1], 0));
          })(p, g, f, i);
        var y = l.get('backgroundColor');
        (y && 'auto' !== y) || (y = t.get('axisLine.lineStyle.color')),
          (e.label = {
            shape: { x: 0, y: 0, width: g, height: f, r: l.get('borderRadius') },
            position: p.slice(),
            style: {
              text: s,
              textFont: c,
              textFill: l.getTextColor(),
              textPosition: 'inside',
              textPadding: u,
              fill: y,
              stroke: l.get('borderColor') || 'transparent',
              lineWidth: l.get('borderWidth') || 0,
              shadowBlur: l.get('shadowBlur'),
              shadowColor: l.get('shadowColor'),
              shadowOffsetX: l.get('shadowOffsetX'),
              shadowOffsetY: l.get('shadowOffsetY')
            },
            z2: 10
          });
      }
      function h(e, t, n, a, o) {
        e = t.scale.parse(e);
        var r = t.scale.getLabel(e, { precision: o.precision }),
          s = o.formatter;
        if (s) {
          var u = {
            value: l.getAxisRawValue(t, e),
            axisDimension: t.dim,
            axisIndex: t.index,
            seriesData: []
          };
          i.each(a, function(e) {
            var t = n.getSeriesByIndex(e.seriesIndex),
              i = e.dataIndexInside,
              a = t && t.getDataParams(i);
            a && u.seriesData.push(a);
          }),
            i.isString(s) ? (r = s.replace('{value}', r)) : i.isFunction(s) && (r = s(u));
        }
        return r;
      }
      function d(e, t, n) {
        var i = s.create();
        return (
          s.rotate(i, i, n.rotation),
          s.translate(i, i, n.position),
          a.applyTransform(
            [
              e.dataToCoord(t),
              (n.labelOffset || 0) + (n.labelDirection || 1) * (n.labelMargin || 0)
            ],
            i
          )
        );
      }
      (t.buildElStyle = function(e) {
        var t,
          n = e.get('type'),
          i = e.getModel(n + 'Style');
        return (
          'line' === n
            ? ((t = i.getLineStyle()).fill = null)
            : 'shadow' === n && ((t = i.getAreaStyle()).stroke = null),
          t
        );
      }),
        (t.buildLabelElOption = c),
        (t.getValueLabel = h),
        (t.getTransformedPosition = d),
        (t.buildCartesianSingleLabelElOption = function(e, t, n, i, a, o) {
          var r = u.innerTextLayout(n.rotation, 0, n.labelDirection);
          (n.labelMargin = a.get('label.margin')),
            c(t, i, a, o, {
              position: d(i.axis, e, n),
              align: r.textAlign,
              verticalAlign: r.textVerticalAlign
            });
        }),
        (t.makeLineShape = function(e, t, n) {
          return { x1: e[(n = n || 0)], y1: e[1 - n], x2: t[n], y2: t[1 - n] };
        }),
        (t.makeRectShape = function(e, t, n) {
          return { x: e[(n = n || 0)], y: e[1 - n], width: t[n], height: t[1 - n] };
        }),
        (t.makeSectorShape = function(e, t, n, i, a, o) {
          return { cx: e, cy: t, r0: n, r: i, startAngle: a, endAngle: o, clockwise: !0 };
        });
    },
    function(e, t, n) {
      var i = n(2),
        a = n(106),
        o = i.each;
      function r(e) {
        if (e) for (var t in e) if (e.hasOwnProperty(t)) return !0;
      }
      (t.createVisualMappings = function(e, t, n) {
        var r = {};
        return (
          o(t, function(t) {
            var s = (r[t] = (function() {
              var e = function() {};
              return (e.prototype.__hidden = e.prototype), new e();
            })());
            o(e[t], function(e, o) {
              if (a.isValidType(o)) {
                var r = { type: o, visual: e };
                n && n(r, t),
                  (s[o] = new a(r)),
                  'opacity' === o &&
                    (((r = i.clone(r)).type = 'colorAlpha'),
                    (s.__hidden.__alphaForOpacity = new a(r)));
              }
            });
          }),
          r
        );
      }),
        (t.replaceVisualOption = function(e, t, n) {
          var a;
          i.each(n, function(e) {
            t.hasOwnProperty(e) && r(t[e]) && (a = !0);
          }),
            a &&
              i.each(n, function(n) {
                t.hasOwnProperty(n) && r(t[n]) ? (e[n] = i.clone(t[n])) : delete e[n];
              });
        }),
        (t.applyVisual = function(e, t, n, o, r, s) {
          var l,
            u = {};
          function c(e) {
            return n.getItemVisual(l, e);
          }
          function h(e, t) {
            n.setItemVisual(l, e, t);
          }
          function d(e, i) {
            l = null == s ? e : i;
            var a = n.getRawDataItem(l);
            if (!a || !1 !== a.visualMap)
              for (var d = o.call(r, e), p = t[d], g = u[d], f = 0, m = g.length; f < m; f++) {
                var v = g[f];
                p[v] && p[v].applyVisual(e, c, h);
              }
          }
          i.each(e, function(e) {
            var n = a.prepareVisualTypes(t[e]);
            u[e] = n;
          }),
            null == s ? n.each(d) : n.each([s], d);
        }),
        (t.incrementalApplyVisual = function(e, t, n, o) {
          var r = {};
          return (
            i.each(e, function(e) {
              var n = a.prepareVisualTypes(t[e]);
              r[e] = n;
            }),
            {
              progress: function(e, i) {
                function a(e) {
                  return i.getItemVisual(l, e);
                }
                function s(e, t) {
                  i.setItemVisual(l, e, t);
                }
                var l;
                for (null != o && (o = i.getDimension(o)); null != (l = e.next()); ) {
                  var u = i.getRawDataItem(l);
                  if (!u || !1 !== u.visualMap)
                    for (
                      var c = null != o ? i.get(o, l, !0) : l,
                        h = n(c),
                        d = t[h],
                        p = r[h],
                        g = 0,
                        f = p.length;
                      g < f;
                      g++
                    ) {
                      var m = p[g];
                      d[m] && d[m].applyVisual(c, a, s);
                    }
                }
              }
            }
          );
        });
    },
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    function(e, t, n) {
      var i = n(101).retrieveRawValue,
        a = n(30),
        o = a.getTooltipMarker,
        r = a.formatTpl,
        s = n(18).getTooltipRenderMode,
        l = /\{@(.+?)\}/g,
        u = {
          getDataParams: function(e, t) {
            var n = this.getData(t),
              i = this.getRawValue(e, t),
              a = n.getRawIndex(e),
              r = n.getName(e),
              l = n.getRawDataItem(e),
              u = n.getItemVisual(e, 'color'),
              c = n.getItemVisual(e, 'borderColor'),
              h = this.ecModel.getComponent('tooltip'),
              d = h && h.get('renderMode'),
              p = s(d),
              g = this.mainType,
              f = 'series' === g,
              m = n.userOutput;
            return {
              componentType: g,
              componentSubType: this.subType,
              componentIndex: this.componentIndex,
              seriesType: f ? this.subType : null,
              seriesIndex: this.seriesIndex,
              seriesId: f ? this.id : null,
              seriesName: f ? this.name : null,
              name: r,
              dataIndex: a,
              data: l,
              dataType: t,
              value: i,
              color: u,
              borderColor: c,
              dimensionNames: m ? m.dimensionNames : null,
              encode: m ? m.encode : null,
              marker: o({ color: u, renderMode: p }),
              $vars: ['seriesName', 'name', 'value']
            };
          },
          getFormattedLabel: function(e, t, n, a, o) {
            t = t || 'normal';
            var s = this.getData(n),
              u = s.getItemModel(e),
              c = this.getDataParams(e, n);
            null != a && c.value instanceof Array && (c.value = c.value[a]);
            var h = u.get(
              'normal' === t ? [o || 'label', 'formatter'] : [t, o || 'label', 'formatter']
            );
            return 'function' === typeof h
              ? ((c.status = t), (c.dimensionIndex = a), h(c))
              : 'string' === typeof h
              ? r(h, c).replace(l, function(t, n) {
                  var a = n.length;
                  return (
                    '[' === n.charAt(0) && ']' === n.charAt(a - 1) && (n = +n.slice(1, a - 1)),
                    i(s, e, n)
                  );
                })
              : void 0;
          },
          getRawValue: function(e, t) {
            return i(this.getData(t), e);
          },
          formatTooltip: function() {}
        };
      e.exports = u;
    },
    function(e, t, n) {
      var i = n(2),
        a = (i.assert, i.isArray);
      n(23).__DEV__;
      function o(e) {
        (e = e || {}),
          (this._reset = e.reset),
          (this._plan = e.plan),
          (this._count = e.count),
          (this._onDirty = e.onDirty),
          (this._dirty = !0),
          this.context;
      }
      var r = o.prototype;
      r.perform = function(e) {
        var t,
          n = this._upstream,
          i = e && e.skip;
        if (this._dirty && n) {
          var o = this.context;
          o.data = o.outputData = n.context.outputData;
        }
        this.__pipeline && (this.__pipeline.currentTask = this),
          this._plan && !i && (t = this._plan(this.context));
        var r,
          s = d(this._modBy),
          u = this._modDataCount || 0,
          c = d(e && e.modBy),
          h = (e && e.modDataCount) || 0;
        function d(e) {
          return !(e >= 1) && (e = 1), e;
        }
        (s === c && u === h) || (t = 'reset'),
          (this._dirty || 'reset' === t) &&
            ((this._dirty = !1),
            (r = (function(e, t) {
              var n, i;
              (e._dueIndex = e._outputDueEnd = e._dueEnd = 0),
                (e._settedOutputEnd = null),
                !t &&
                  e._reset &&
                  ((n = e._reset(e.context)) &&
                    n.progress &&
                    ((i = n.forceFirstProgress), (n = n.progress)),
                  a(n) && !n.length && (n = null));
              (e._progress = n), (e._modBy = e._modDataCount = null);
              var o = e._downstream;
              return o && o.dirty(), i;
            })(this, i))),
          (this._modBy = c),
          (this._modDataCount = h);
        var p = e && e.step;
        if (
          ((this._dueEnd = n ? n._outputDueEnd : this._count ? this._count(this.context) : 1 / 0),
          this._progress)
        ) {
          var g = this._dueIndex,
            f = Math.min(null != p ? this._dueIndex + p : 1 / 0, this._dueEnd);
          if (!i && (r || g < f)) {
            var m = this._progress;
            if (a(m)) for (var v = 0; v < m.length; v++) l(this, m[v], g, f, c, h);
            else l(this, m, g, f, c, h);
          }
          this._dueIndex = f;
          var y = null != this._settedOutputEnd ? this._settedOutputEnd : f;
          this._outputDueEnd = y;
        } else
          this._dueIndex = this._outputDueEnd =
            null != this._settedOutputEnd ? this._settedOutputEnd : this._dueEnd;
        return this.unfinished();
      };
      var s = (function() {
        var e,
          t,
          n,
          i,
          a,
          o = {
            reset: function(l, u, c, h) {
              (t = l),
                (e = u),
                (n = c),
                (i = h),
                (a = Math.ceil(i / n)),
                (o.next = n > 1 && i > 0 ? s : r);
            }
          };
        return o;
        function r() {
          return t < e ? t++ : null;
        }
        function s() {
          var o = (t % a) * n + Math.ceil(t / a),
            r = t >= e ? null : o < i ? o : t;
          return t++, r;
        }
      })();
      function l(e, t, n, i, a, o) {
        s.reset(n, i, a, o),
          (e._callingProgress = t),
          e._callingProgress({ start: n, end: i, count: i - n, next: s.next }, e.context);
      }
      (r.dirty = function() {
        (this._dirty = !0), this._onDirty && this._onDirty(this.context);
      }),
        (r.unfinished = function() {
          return this._progress && this._dueIndex < this._dueEnd;
        }),
        (r.pipe = function(e) {
          (this._downstream !== e || this._dirty) &&
            ((this._downstream = e), (e._upstream = this), e.dirty());
        }),
        (r.dispose = function() {
          this._disposed ||
            (this._upstream && (this._upstream._downstream = null),
            this._downstream && (this._downstream._upstream = null),
            (this._dirty = !1),
            (this._disposed = !0));
        }),
        (r.getUpstream = function() {
          return this._upstream;
        }),
        (r.getDownstream = function() {
          return this._downstream;
        }),
        (r.setOutputEnd = function(e) {
          this._outputDueEnd = this._settedOutputEnd = e;
        }),
        (t.createTask = function(e) {
          return new o(e);
        });
    },
    function(e, t, n) {
      n(23).__DEV__;
      var i = n(2),
        a = i.createHashMap,
        o = i.isString,
        r = i.isArray,
        s = i.each,
        l = (i.assert, n(418).parseXML),
        u = a(),
        c = {
          registerMap: function(e, t, n) {
            var i;
            return (
              r(t)
                ? (i = t)
                : t.svg
                ? (i = [{ type: 'svg', source: t.svg, specialAreas: t.specialAreas }])
                : (t.geoJson && !t.features && ((n = t.specialAreas), (t = t.geoJson)),
                  (i = [{ type: 'geoJSON', source: t, specialAreas: n }])),
              s(i, function(e) {
                var t = e.type;
                'geoJson' === t && (t = e.type = 'geoJSON'), (0, h[t])(e);
              }),
              u.set(e, i)
            );
          },
          retrieveMap: function(e) {
            return u.get(e);
          }
        },
        h = {
          geoJSON: function(e) {
            var t = e.source;
            e.geoJSON = o(t)
              ? 'undefined' !== typeof JSON && JSON.parse
                ? JSON.parse(t)
                : new Function('return (' + t + ');')()
              : t;
          },
          svg: function(e) {
            e.svgXML = l(e.source);
          }
        };
      e.exports = c;
    },
    function(e, t, n) {
      var i = n(2),
        a = i.createHashMap,
        o = i.each,
        r = i.isString,
        s = i.defaults,
        l = i.extend,
        u = i.isObject,
        c = i.clone,
        h = n(18).normalizeToArray,
        d = n(196).guessOrdinal,
        p = n(150),
        g = n(152).OTHER_DIMENSIONS;
      function f(e, t, n) {
        if (n || null != t.get(e)) {
          for (var i = 0; null != t.get(e + i); ) i++;
          e += i;
        }
        return t.set(e, !0), e;
      }
      var m = function(e, t, n) {
        p.isInstance(t) || (t = p.seriesDataToSource(t)), (n = n || {}), (e = (e || []).slice());
        for (
          var i = (n.dimsDef || []).slice(),
            m = a(n.encodeDef),
            v = a(),
            y = a(),
            x = [],
            _ = (function(e, t, n, i) {
              var a = Math.max(e.dimensionsDetectCount || 1, t.length, n.length, i || 0);
              return (
                o(t, function(e) {
                  var t = e.dimsDef;
                  t && (a = Math.max(a, t.length));
                }),
                a
              );
            })(t, e, i, n.dimCount),
            b = 0;
          b < _;
          b++
        ) {
          var S = (i[b] = l({}, u(i[b]) ? i[b] : { name: i[b] })),
            w = S.name,
            M = (x[b] = { otherDims: {} });
          null != w && null == v.get(w) && ((M.name = M.displayName = w), v.set(w, b)),
            null != S.type && (M.type = S.type),
            null != S.displayName && (M.displayName = S.displayName);
        }
        m.each(function(e, t) {
          if (1 === (e = h(e).slice()).length && !r(e[0]) && e[0] < 0) m.set(t, !1);
          else {
            var n = m.set(t, []);
            o(e, function(e, i) {
              r(e) && (e = v.get(e)), null != e && e < _ && ((n[i] = e), A(x[e], t, i));
            });
          }
        });
        var I = 0;
        function A(e, t, n) {
          null != g.get(t)
            ? (e.otherDims[t] = n)
            : ((e.coordDim = t), (e.coordDimIndex = n), y.set(t, !0));
        }
        o(e, function(e, t) {
          var n, i, a;
          if (r(e)) (n = e), (e = {});
          else {
            n = e.name;
            var l = e.ordinalMeta;
            (e.ordinalMeta = null),
              ((e = c(e)).ordinalMeta = l),
              (i = e.dimsDef),
              (a = e.otherDims),
              (e.name = e.coordDim = e.coordDimIndex = e.dimsDef = e.otherDims = null);
          }
          if (!1 !== (d = m.get(n))) {
            var d;
            if (!(d = h(d)).length)
              for (var p = 0; p < ((i && i.length) || 1); p++) {
                for (; I < x.length && null != x[I].coordDim; ) I++;
                I < x.length && d.push(I++);
              }
            o(d, function(t, o) {
              var r = x[t];
              if ((A(s(r, e), n, o), null == r.name && i)) {
                var l = i[o];
                !u(l) && (l = { name: l }),
                  (r.name = r.displayName = l.name),
                  (r.defaultTooltip = l.defaultTooltip);
              }
              a && s(r.otherDims, a);
            });
          }
        });
        var T = n.generateCoord,
          D = n.generateCoordCount,
          C = null != D;
        D = T ? D || 1 : 0;
        for (var L = T || 'value', P = 0; P < _; P++) {
          null == (M = x[P] = x[P] || {}).coordDim &&
            ((M.coordDim = f(L, y, C)),
            (M.coordDimIndex = 0),
            (!T || D <= 0) && (M.isExtraCoord = !0),
            D--),
            null == M.name && (M.name = f(M.coordDim, v)),
            null == M.type && d(t, P, M.name) && (M.type = 'ordinal');
        }
        return x;
      };
      e.exports = m;
    },
    function(e, t, n) {
      var i = n(101).retrieveRawValue;
      t.getDefaultLabel = function(e, t) {
        var n = e.mapDimension('defaultedLabel', !0),
          a = n.length;
        if (1 === a) return i(e, t, n[0]);
        if (a) {
          for (var o = [], r = 0; r < n.length; r++) {
            var s = i(e, t, n[r]);
            o.push(s);
          }
          return o.join(' ');
        }
      };
    },
    function(e, t, n) {
      n(23).__DEV__;
      var i = n(2),
        a = i.isObject,
        o = i.each,
        r = i.map,
        s = i.indexOf,
        l = (i.retrieve, n(25).getLayoutRect),
        u = n(64),
        c = u.createScaleByModel,
        h = u.ifAxisCrossZero,
        d = u.niceScaleExtent,
        p = u.estimateLabelUnionRect,
        g = n(793),
        f = n(795),
        m = n(63),
        v = n(72).getStackedDimension;
      function y(e, t, n) {
        return e.getCoordSysModel() === t;
      }
      function x(e, t, n) {
        (this._coordsMap = {}),
          (this._coordsList = []),
          (this._axesMap = {}),
          (this._axesList = []),
          this._initCartesian(e, t, n),
          (this.model = e);
      }
      n(796);
      var _ = x.prototype;
      function b(e, t, n, i) {
        n.getAxesOnZeroOf = function() {
          return a ? [a] : [];
        };
        var a,
          o = e[t],
          r = n.model,
          s = r.get('axisLine.onZero'),
          l = r.get('axisLine.onZeroAxisIndex');
        if (s) {
          if (null != l) S(o[l]) && (a = o[l]);
          else
            for (var u in o)
              if (o.hasOwnProperty(u) && S(o[u]) && !i[c(o[u])]) {
                a = o[u];
                break;
              }
          a && (i[c(a)] = !0);
        }
        function c(e) {
          return e.dim + '_' + e.index;
        }
      }
      function S(e) {
        return e && 'category' !== e.type && 'time' !== e.type && h(e);
      }
      (_.type = 'grid'),
        (_.axisPointerEnabled = !0),
        (_.getRect = function() {
          return this._rect;
        }),
        (_.update = function(e, t) {
          var n = this._axesMap;
          this._updateScale(e, this.model),
            o(n.x, function(e) {
              d(e.scale, e.model);
            }),
            o(n.y, function(e) {
              d(e.scale, e.model);
            });
          var i = {};
          o(n.x, function(e) {
            b(n, 'y', e, i);
          }),
            o(n.y, function(e) {
              b(n, 'x', e, i);
            }),
            this.resize(this.model, t);
        }),
        (_.resize = function(e, t, n) {
          var i = l(e.getBoxLayoutParams(), { width: t.getWidth(), height: t.getHeight() });
          this._rect = i;
          var a = this._axesList;
          function r() {
            o(a, function(e) {
              var t = e.isHorizontal(),
                n = t ? [0, i.width] : [0, i.height],
                a = e.inverse ? 1 : 0;
              e.setExtent(n[a], n[1 - a]),
                (function(e, t) {
                  var n = e.getExtent(),
                    i = n[0] + n[1];
                  (e.toGlobalCoord =
                    'x' === e.dim
                      ? function(e) {
                          return e + t;
                        }
                      : function(e) {
                          return i - e + t;
                        }),
                    (e.toLocalCoord =
                      'x' === e.dim
                        ? function(e) {
                            return e - t;
                          }
                        : function(e) {
                            return i - e + t;
                          });
                })(e, t ? i.x : i.y);
            });
          }
          r(),
            !n &&
              e.get('containLabel') &&
              (o(a, function(e) {
                if (!e.model.get('axisLabel.inside')) {
                  var t = p(e);
                  if (t) {
                    var n = e.isHorizontal() ? 'height' : 'width',
                      a = e.model.get('axisLabel.margin');
                    (i[n] -= t[n] + a),
                      'top' === e.position
                        ? (i.y += t.height + a)
                        : 'left' === e.position && (i.x += t.width + a);
                  }
                }
              }),
              r());
        }),
        (_.getAxis = function(e, t) {
          var n = this._axesMap[e];
          if (null != n) {
            if (null == t) for (var i in n) if (n.hasOwnProperty(i)) return n[i];
            return n[t];
          }
        }),
        (_.getAxes = function() {
          return this._axesList.slice();
        }),
        (_.getCartesian = function(e, t) {
          if (null != e && null != t) {
            var n = 'x' + e + 'y' + t;
            return this._coordsMap[n];
          }
          a(e) && ((t = e.yAxisIndex), (e = e.xAxisIndex));
          for (var i = 0, o = this._coordsList; i < o.length; i++)
            if (o[i].getAxis('x').index === e || o[i].getAxis('y').index === t) return o[i];
        }),
        (_.getCartesians = function() {
          return this._coordsList.slice();
        }),
        (_.convertToPixel = function(e, t, n) {
          var i = this._findConvertTarget(e, t);
          return i.cartesian
            ? i.cartesian.dataToPoint(n)
            : i.axis
            ? i.axis.toGlobalCoord(i.axis.dataToCoord(n))
            : null;
        }),
        (_.convertFromPixel = function(e, t, n) {
          var i = this._findConvertTarget(e, t);
          return i.cartesian
            ? i.cartesian.pointToData(n)
            : i.axis
            ? i.axis.coordToData(i.axis.toLocalCoord(n))
            : null;
        }),
        (_._findConvertTarget = function(e, t) {
          var n,
            i,
            a = t.seriesModel,
            o = t.xAxisModel || (a && a.getReferringComponents('xAxis')[0]),
            r = t.yAxisModel || (a && a.getReferringComponents('yAxis')[0]),
            l = t.gridModel,
            u = this._coordsList;
          if (a) (n = a.coordinateSystem), s(u, n) < 0 && (n = null);
          else if (o && r) n = this.getCartesian(o.componentIndex, r.componentIndex);
          else if (o) i = this.getAxis('x', o.componentIndex);
          else if (r) i = this.getAxis('y', r.componentIndex);
          else if (l) {
            l.coordinateSystem === this && (n = this._coordsList[0]);
          }
          return { cartesian: n, axis: i };
        }),
        (_.containPoint = function(e) {
          var t = this._coordsList[0];
          if (t) return t.containPoint(e);
        }),
        (_._initCartesian = function(e, t, n) {
          var i = { left: !1, right: !1, top: !1, bottom: !1 },
            a = { x: {}, y: {} },
            r = { x: 0, y: 0 };
          if (
            (t.eachComponent('xAxis', s('x'), this),
            t.eachComponent('yAxis', s('y'), this),
            !r.x || !r.y)
          )
            return (this._axesMap = {}), void (this._axesList = []);
          function s(t) {
            return function(n, o) {
              if (y(n, e)) {
                var s = n.get('position');
                'x' === t
                  ? 'top' !== s && 'bottom' !== s && (s = i.bottom ? 'top' : 'bottom')
                  : 'left' !== s && 'right' !== s && (s = i.left ? 'right' : 'left'),
                  (i[s] = !0);
                var l = new f(t, c(n), [0, 0], n.get('type'), s),
                  u = 'category' === l.type;
                (l.onBand = u && n.get('boundaryGap')),
                  (l.inverse = n.get('inverse')),
                  (n.axis = l),
                  (l.model = n),
                  (l.grid = this),
                  (l.index = o),
                  this._axesList.push(l),
                  (a[t][o] = l),
                  r[t]++;
              }
            };
          }
          (this._axesMap = a),
            o(
              a.x,
              function(t, n) {
                o(
                  a.y,
                  function(i, a) {
                    var o = 'x' + n + 'y' + a,
                      r = new g(o);
                    (r.grid = this),
                      (r.model = e),
                      (this._coordsMap[o] = r),
                      this._coordsList.push(r),
                      r.addAxis(t),
                      r.addAxis(i);
                  },
                  this
                );
              },
              this
            );
        }),
        (_._updateScale = function(e, t) {
          function n(e, t, n) {
            o(e.mapDimension(t.dim, !0), function(n) {
              t.scale.unionExtentFromData(e, v(e, n));
            });
          }
          o(this._axesList, function(e) {
            e.scale.setExtent(1 / 0, -1 / 0);
          }),
            e.eachSeries(function(i) {
              if (I(i)) {
                var a = M(i, e),
                  o = a[0],
                  r = a[1];
                if (!y(o, t) || !y(r, t)) return;
                var s = this.getCartesian(o.componentIndex, r.componentIndex),
                  l = i.getData(),
                  u = s.getAxis('x'),
                  c = s.getAxis('y');
                'list' === l.type && (n(l, u, i), n(l, c, i));
              }
            }, this);
        }),
        (_.getTooltipAxes = function(e) {
          var t = [],
            n = [];
          return (
            o(this.getCartesians(), function(i) {
              var a = null != e && 'auto' !== e ? i.getAxis(e) : i.getBaseAxis(),
                o = i.getOtherAxis(a);
              s(t, a) < 0 && t.push(a), s(n, o) < 0 && n.push(o);
            }),
            { baseAxes: t, otherAxes: n }
          );
        });
      var w = ['xAxis', 'yAxis'];
      function M(e, t) {
        return r(w, function(t) {
          return e.getReferringComponents(t)[0];
        });
      }
      function I(e) {
        return 'cartesian2d' === e.get('coordinateSystem');
      }
      (x.create = function(e, t) {
        var n = [];
        return (
          e.eachComponent('grid', function(i, a) {
            var o = new x(i, e, t);
            (o.name = 'grid_' + a), o.resize(i, t, !0), (i.coordinateSystem = o), n.push(o);
          }),
          e.eachSeries(function(e) {
            if (I(e)) {
              var t = M(e),
                n = t[0],
                i = t[1],
                a = n.getCoordSysModel().coordinateSystem;
              e.coordinateSystem = a.getCartesian(n.componentIndex, i.componentIndex);
            }
          }),
          n
        );
      }),
        (x.dimensions = x.prototype.dimensions = g.prototype.dimensions),
        m.register('cartesian2d', x);
      var A = x;
      e.exports = A;
    },
    function(e, t, n) {
      var i = n(2),
        a = {
          updateSelectedMap: function(e) {
            (this._targetList = i.isArray(e) ? e.slice() : []),
              (this._selectTargetMap = i.reduce(
                e || [],
                function(e, t) {
                  return e.set(t.name, t), e;
                },
                i.createHashMap()
              ));
          },
          select: function(e, t) {
            var n = null != t ? this._targetList[t] : this._selectTargetMap.get(e);
            'single' === this.get('selectedMode') &&
              this._selectTargetMap.each(function(e) {
                e.selected = !1;
              }),
              n && (n.selected = !0);
          },
          unSelect: function(e, t) {
            var n = null != t ? this._targetList[t] : this._selectTargetMap.get(e);
            n && (n.selected = !1);
          },
          toggleSelected: function(e, t) {
            var n = null != t ? this._targetList[t] : this._selectTargetMap.get(e);
            if (null != n) return this[n.selected ? 'unSelect' : 'select'](e, t), n.selected;
          },
          isSelected: function(e, t) {
            var n = null != t ? this._targetList[t] : this._selectTargetMap.get(e);
            return n && n.selected;
          }
        };
      e.exports = a;
    },
    function(e, t) {
      (t.updateViewOnPan = function(e, t, n) {
        var i = e.target,
          a = i.position;
        (a[0] += t), (a[1] += n), i.dirty();
      }),
        (t.updateViewOnZoom = function(e, t, n, i) {
          var a = e.target,
            o = e.zoomLimit,
            r = a.position,
            s = a.scale,
            l = (e.zoom = e.zoom || 1);
          if (((l *= t), o)) {
            var u = o.min || 0,
              c = o.max || 1 / 0;
            l = Math.max(Math.min(c, l), u);
          }
          var h = l / e.zoom;
          (e.zoom = l),
            (r[0] -= (n - r[0]) * (h - 1)),
            (r[1] -= (i - r[1]) * (h - 1)),
            (s[0] *= h),
            (s[1] *= h),
            a.dirty();
        });
    },
    function(e, t) {
      t.updateCenterAndZoom = function(e, t, n) {
        var i = e.getZoom(),
          a = e.getCenter(),
          o = t.zoom,
          r = e.dataToPoint(a);
        if (null != t.dx && null != t.dy) {
          (r[0] -= t.dx), (r[1] -= t.dy);
          a = e.pointToData(r);
          e.setCenter(a);
        }
        if (null != o) {
          if (n) {
            var s = n.min || 0,
              l = n.max || 1 / 0;
            o = Math.max(Math.min(i * o, l), s) / i;
          }
          (e.scale[0] *= o), (e.scale[1] *= o);
          var u = e.position,
            c = (t.originX - u[0]) * (o - 1),
            h = (t.originY - u[1]) * (o - 1);
          (u[0] -= c), (u[1] -= h), e.updateTransform();
          a = e.pointToData(r);
          e.setCenter(a), e.setZoom(o * i);
        }
        return { center: e.getCenter(), zoom: e.getZoom() };
      };
    },
    function(e, t, n) {
      n(23).__DEV__;
      var i = n(4),
        a = n(2),
        o = n(829),
        r = n(25),
        s = n(16),
        l = n(205),
        u = n(293);
      function c(e, t) {
        var n = e.get('boundingCoords');
        if (null != n) {
          var i = n[0],
            a = n[1];
          isNaN(i[0]) ||
            isNaN(i[1]) ||
            isNaN(a[0]) ||
            isNaN(a[1]) ||
            this.setBoundingRect(i[0], i[1], a[0] - i[0], a[1] - i[1]);
        }
        var o,
          l = this.getBoundingRect(),
          u = e.get('layoutCenter'),
          c = e.get('layoutSize'),
          h = t.getWidth(),
          d = t.getHeight(),
          p = (l.width / l.height) * this.aspectScale,
          g = !1;
        if (
          (u &&
            c &&
            ((u = [s.parsePercent(u[0], h), s.parsePercent(u[1], d)]),
            (c = s.parsePercent(c, Math.min(h, d))),
            isNaN(u[0]) || isNaN(u[1]) || isNaN(c) || (g = !0)),
          g)
        ) {
          var f = {};
          p > 1 ? ((f.width = c), (f.height = c / p)) : ((f.height = c), (f.width = c * p)),
            (f.y = u[1] - f.height / 2),
            (f.x = u[0] - f.width / 2);
        } else
          ((o = e.getBoxLayoutParams()).aspect = p),
            (f = r.getLayoutRect(o, { width: h, height: d }));
        this.setViewRect(f.x, f.y, f.width, f.height),
          this.setCenter(e.get('center')),
          this.setZoom(e.get('zoom'));
      }
      function h(e, t) {
        a.each(t.get('geoCoord'), function(t, n) {
          e.addGeoCoord(n, t);
        });
      }
      var d = {
        dimensions: o.prototype.dimensions,
        create: function(e, t) {
          var n = [];
          e.eachComponent('geo', function(e, i) {
            var a = e.get('map'),
              r = e.get('aspectScale'),
              s = !0,
              l = u.retrieveMap(a);
            l && l[0] && 'svg' === l[0].type
              ? (null == r && (r = 1), (s = !1))
              : null == r && (r = 0.75);
            var d = new o(a + i, a, e.get('nameMap'), s);
            (d.aspectScale = r),
              (d.zoomLimit = e.get('scaleLimit')),
              n.push(d),
              h(d, e),
              (e.coordinateSystem = d),
              (d.model = e),
              (d.resize = c),
              d.resize(e, t);
          }),
            e.eachSeries(function(e) {
              if ('geo' === e.get('coordinateSystem')) {
                var t = e.get('geoIndex') || 0;
                e.coordinateSystem = n[t];
              }
            });
          var i = {};
          return (
            e.eachSeriesByType('map', function(e) {
              if (!e.getHostGeoModel()) {
                var t = e.getMapType();
                (i[t] = i[t] || []), i[t].push(e);
              }
            }),
            a.each(i, function(e, i) {
              var r = a.map(e, function(e) {
                  return e.get('nameMap');
                }),
                s = new o(i, i, a.mergeAll(r));
              (s.zoomLimit = a.retrieve.apply(
                null,
                a.map(e, function(e) {
                  return e.get('scaleLimit');
                })
              )),
                n.push(s),
                (s.resize = c),
                (s.aspectScale = e[0].get('aspectScale')),
                s.resize(e[0], t),
                a.each(e, function(e) {
                  (e.coordinateSystem = s), h(s, e);
                });
            }),
            n
          );
        },
        getFilledRegions: function(e, t, n) {
          for (var i = (e || []).slice(), o = a.createHashMap(), r = 0; r < i.length; r++)
            o.set(i[r].name, i[r]);
          var s = l.load(t, n);
          return (
            a.each(s.regions, function(e) {
              var t = e.name;
              !o.get(t) && i.push({ name: t });
            }),
            i
          );
        }
      };
      i.registerCoordinateSystem('geo', d);
      var p = d;
      e.exports = p;
    },
    function(e, t, n) {
      var i = n(2),
        a = n(28),
        o = n(42),
        r = n(29),
        s = n(283),
        l = a.applyTransform;
      function u() {
        s.call(this);
      }
      function c(e) {
        (this.name = e),
          this.zoomLimit,
          s.call(this),
          (this._roamTransformable = new u()),
          (this._rawTransformable = new u()),
          this._center,
          this._zoom;
      }
      function h(e, t, n, i) {
        var a = n.seriesModel,
          o = a ? a.coordinateSystem : null;
        return o === this ? o[e](i) : null;
      }
      i.mixin(u, s),
        (c.prototype = {
          constructor: c,
          type: 'view',
          dimensions: ['x', 'y'],
          setBoundingRect: function(e, t, n, i) {
            return (this._rect = new r(e, t, n, i)), this._rect;
          },
          getBoundingRect: function() {
            return this._rect;
          },
          setViewRect: function(e, t, n, i) {
            this.transformTo(e, t, n, i), (this._viewRect = new r(e, t, n, i));
          },
          transformTo: function(e, t, n, i) {
            var a = this.getBoundingRect(),
              o = this._rawTransformable;
            (o.transform = a.calculateTransform(new r(e, t, n, i))),
              o.decomposeTransform(),
              this._updateTransform();
          },
          setCenter: function(e) {
            e && ((this._center = e), this._updateCenterAndZoom());
          },
          setZoom: function(e) {
            e = e || 1;
            var t = this.zoomLimit;
            t &&
              (null != t.max && (e = Math.min(t.max, e)),
              null != t.min && (e = Math.max(t.min, e))),
              (this._zoom = e),
              this._updateCenterAndZoom();
          },
          getDefaultCenter: function() {
            var e = this.getBoundingRect();
            return [e.x + e.width / 2, e.y + e.height / 2];
          },
          getCenter: function() {
            return this._center || this.getDefaultCenter();
          },
          getZoom: function() {
            return this._zoom || 1;
          },
          getRoamTransform: function() {
            return this._roamTransformable.getLocalTransform();
          },
          _updateCenterAndZoom: function() {
            var e = this._rawTransformable.getLocalTransform(),
              t = this._roamTransformable,
              n = this.getDefaultCenter(),
              i = this.getCenter(),
              o = this.getZoom();
            (i = a.applyTransform([], i, e)),
              (n = a.applyTransform([], n, e)),
              (t.origin = i),
              (t.position = [n[0] - i[0], n[1] - i[1]]),
              (t.scale = [o, o]),
              this._updateTransform();
          },
          _updateTransform: function() {
            var e = this._roamTransformable,
              t = this._rawTransformable;
            (t.parent = e),
              e.updateTransform(),
              t.updateTransform(),
              o.copy(this.transform || (this.transform = []), t.transform || o.create()),
              (this._rawTransform = t.getLocalTransform()),
              (this.invTransform = this.invTransform || []),
              o.invert(this.invTransform, this.transform),
              this.decomposeTransform();
          },
          getViewRect: function() {
            return this._viewRect;
          },
          getViewRectAfterRoam: function() {
            var e = this.getBoundingRect().clone();
            return e.applyTransform(this.transform), e;
          },
          dataToPoint: function(e, t, n) {
            var i = t ? this._rawTransform : this.transform;
            return (n = n || []), i ? l(n, e, i) : a.copy(n, e);
          },
          pointToData: function(e) {
            var t = this.invTransform;
            return t ? l([], e, t) : [e[0], e[1]];
          },
          convertToPixel: i.curry(h, 'dataToPoint'),
          convertFromPixel: i.curry(h, 'pointToData'),
          containPoint: function(e) {
            return this.getViewRectAfterRoam().contain(e[0], e[1]);
          }
        }),
        i.mixin(c, s);
      var d = c;
      e.exports = d;
    },
    function(e, t, n) {
      var i = n(2),
        a = n(36),
        o = n(437),
        r = n(53),
        s = n(123),
        l = function(e, t) {
          (this.name = e || ''),
            (this.depth = 0),
            (this.height = 0),
            (this.parentNode = null),
            (this.dataIndex = -1),
            (this.children = []),
            (this.viewChildren = []),
            (this.hostTree = t);
        };
      function u(e, t, n) {
        this.root,
          this.data,
          (this._nodes = []),
          (this.hostModel = e),
          (this.levelModels = i.map(t || [], function(t) {
            return new a(t, e, e.ecModel);
          })),
          (this.leavesModel = new a(n || {}, e, e.ecModel));
      }
      (l.prototype = {
        constructor: l,
        isRemoved: function() {
          return this.dataIndex < 0;
        },
        eachNode: function(e, t, n) {
          'function' === typeof e && ((n = t), (t = e), (e = null)),
            (e = e || {}),
            i.isString(e) && (e = { order: e });
          var a,
            o = e.order || 'preorder',
            r = this[e.attr || 'children'];
          'preorder' === o && (a = t.call(n, this));
          for (var s = 0; !a && s < r.length; s++) r[s].eachNode(e, t, n);
          'postorder' === o && t.call(n, this);
        },
        updateDepthAndHeight: function(e) {
          var t = 0;
          this.depth = e;
          for (var n = 0; n < this.children.length; n++) {
            var i = this.children[n];
            i.updateDepthAndHeight(e + 1), i.height > t && (t = i.height);
          }
          this.height = t + 1;
        },
        getNodeById: function(e) {
          if (this.getId() === e) return this;
          for (var t = 0, n = this.children, i = n.length; t < i; t++) {
            var a = n[t].getNodeById(e);
            if (a) return a;
          }
        },
        contains: function(e) {
          if (e === this) return !0;
          for (var t = 0, n = this.children, i = n.length; t < i; t++) {
            var a = n[t].contains(e);
            if (a) return a;
          }
        },
        getAncestors: function(e) {
          for (var t = [], n = e ? this : this.parentNode; n; ) t.push(n), (n = n.parentNode);
          return t.reverse(), t;
        },
        getValue: function(e) {
          var t = this.hostTree.data;
          return t.get(t.getDimension(e || 'value'), this.dataIndex);
        },
        setLayout: function(e, t) {
          this.dataIndex >= 0 && this.hostTree.data.setItemLayout(this.dataIndex, e, t);
        },
        getLayout: function() {
          return this.hostTree.data.getItemLayout(this.dataIndex);
        },
        getModel: function(e) {
          if (!(this.dataIndex < 0)) {
            var t,
              n = this.hostTree,
              i = n.data.getItemModel(this.dataIndex),
              a = this.getLevelModel();
            return (
              a ||
                (0 !== this.children.length &&
                  (0 === this.children.length || !1 !== this.isExpand)) ||
                (t = this.getLeavesModel()),
              i.getModel(e, (a || t || n.hostModel).getModel(e))
            );
          }
        },
        getLevelModel: function() {
          return (this.hostTree.levelModels || [])[this.depth];
        },
        getLeavesModel: function() {
          return this.hostTree.leavesModel;
        },
        setVisual: function(e, t) {
          this.dataIndex >= 0 && this.hostTree.data.setItemVisual(this.dataIndex, e, t);
        },
        getVisual: function(e, t) {
          return this.hostTree.data.getItemVisual(this.dataIndex, e, t);
        },
        getRawIndex: function() {
          return this.hostTree.data.getRawIndex(this.dataIndex);
        },
        getId: function() {
          return this.hostTree.data.getId(this.dataIndex);
        },
        isAncestorOf: function(e) {
          for (var t = e.parentNode; t; ) {
            if (t === this) return !0;
            t = t.parentNode;
          }
          return !1;
        },
        isDescendantOf: function(e) {
          return e !== this && e.isAncestorOf(this);
        }
      }),
        (u.prototype = {
          constructor: u,
          type: 'tree',
          eachNode: function(e, t, n) {
            this.root.eachNode(e, t, n);
          },
          getNodeByDataIndex: function(e) {
            var t = this.data.getRawIndex(e);
            return this._nodes[t];
          },
          getNodeByName: function(e) {
            return this.root.getNodeByName(e);
          },
          update: function() {
            for (var e = this.data, t = this._nodes, n = 0, i = t.length; n < i; n++)
              t[n].dataIndex = -1;
            for (n = 0, i = e.count(); n < i; n++) t[e.getRawIndex(n)].dataIndex = n;
          },
          clearLayouts: function() {
            this.data.clearItemLayouts();
          }
        }),
        (u.createTree = function(e, t, n) {
          var a = new u(t, n.levels, n.leaves),
            c = [],
            h = 1;
          !(function e(t, n) {
            var o = t.value;
            (h = Math.max(h, i.isArray(o) ? o.length : 1)), c.push(t);
            var r = new l(t.name, a);
            n
              ? (function(e, t) {
                  var n = t.children;
                  if (e.parentNode === t) return;
                  n.push(e), (e.parentNode = t);
                })(r, n)
              : (a.root = r),
              a._nodes.push(r);
            var s = t.children;
            if (s) for (var u = 0; u < s.length; u++) e(s[u], r);
          })(e),
            a.root.updateDepthAndHeight(0);
          var d = s(c, { coordDimensions: ['value'], dimensionsCount: h }),
            p = new r(d, t);
          return p.initData(c), o({ mainData: p, struct: a, structAttr: 'tree' }), a.update(), a;
        });
      var c = u;
      e.exports = c;
    },
    function(e, t, n) {
      var i = n(6),
        a = n(304);
      function o(e) {
        (this._ctor = e || a), (this.group = new i.Group());
      }
      var r = o.prototype;
      function s(e) {
        var t = e.hostModel;
        return {
          lineStyle: t.getModel('lineStyle').getLineStyle(),
          hoverLineStyle: t.getModel('emphasis.lineStyle').getLineStyle(),
          labelModel: t.getModel('label'),
          hoverLabelModel: t.getModel('emphasis.label')
        };
      }
      function l(e) {
        return isNaN(e[0]) || isNaN(e[1]);
      }
      function u(e) {
        return !l(e[0]) && !l(e[1]);
      }
      (r.isPersistent = function() {
        return !0;
      }),
        (r.updateData = function(e) {
          var t = this,
            n = t.group,
            i = t._lineData;
          (t._lineData = e), i || n.removeAll();
          var a = s(e);
          e.diff(i)
            .add(function(n) {
              !(function(e, t, n, i) {
                if (!u(t.getItemLayout(n))) return;
                var a = new e._ctor(t, n, i);
                t.setItemGraphicEl(n, a), e.group.add(a);
              })(t, e, n, a);
            })
            .update(function(n, o) {
              !(function(e, t, n, i, a, o) {
                var r = t.getItemGraphicEl(i);
                if (!u(n.getItemLayout(a))) return void e.group.remove(r);
                r ? r.updateData(n, a, o) : (r = new e._ctor(n, a, o));
                n.setItemGraphicEl(a, r), e.group.add(r);
              })(t, i, e, o, n, a);
            })
            .remove(function(e) {
              n.remove(i.getItemGraphicEl(e));
            })
            .execute();
        }),
        (r.updateLayout = function() {
          var e = this._lineData;
          e &&
            e.eachItemGraphicEl(function(t, n) {
              t.updateLayout(e, n);
            }, this);
        }),
        (r.incrementalPrepareUpdate = function(e) {
          (this._seriesScope = s(e)), (this._lineData = null), this.group.removeAll();
        }),
        (r.incrementalUpdate = function(e, t) {
          function n(e) {
            e.isGroup || (e.incremental = e.useHoverLayer = !0);
          }
          for (var i = e.start; i < e.end; i++) {
            if (u(t.getItemLayout(i))) {
              var a = new this._ctor(t, i, this._seriesScope);
              a.traverse(n), this.group.add(a), t.setItemGraphicEl(i, a);
            }
          }
        }),
        (r.remove = function() {
          this._clearIncremental(), (this._incremental = null), this.group.removeAll();
        }),
        (r._clearIncremental = function() {
          var e = this._incremental;
          e && e.clearDisplaybles();
        });
      var c = o;
      e.exports = c;
    },
    function(e, t, n) {
      var i = n(2),
        a = n(28),
        o = n(54),
        r = n(852),
        s = n(6),
        l = n(16).round,
        u = ['fromSymbol', 'toSymbol'];
      function c(e) {
        return '_' + e + 'Type';
      }
      function h(e, t, n) {
        var a = t.getItemVisual(n, 'color'),
          r = t.getItemVisual(n, e),
          s = t.getItemVisual(n, e + 'Size');
        if (r && 'none' !== r) {
          i.isArray(s) || (s = [s, s]);
          var l = o.createSymbol(r, -s[0] / 2, -s[1] / 2, s[0], s[1], a);
          return (l.name = e), l;
        }
      }
      function d(e, t) {
        (e.x1 = t[0][0]), (e.y1 = t[0][1]), (e.x2 = t[1][0]), (e.y2 = t[1][1]), (e.percent = 1);
        var n = t[2];
        n ? ((e.cpx1 = n[0]), (e.cpy1 = n[1])) : ((e.cpx1 = NaN), (e.cpy1 = NaN));
      }
      function p(e, t, n) {
        s.Group.call(this), this._createLine(e, t, n);
      }
      var g = p.prototype;
      (g.beforeUpdate = function() {
        var e = this.childOfName('fromSymbol'),
          t = this.childOfName('toSymbol'),
          n = this.childOfName('label');
        if (e || t || !n.ignore) {
          for (var i = 1, o = this.parent; o; ) o.scale && (i /= o.scale[0]), (o = o.parent);
          var r = this.childOfName('line');
          if (this.__dirty || r.__dirty) {
            var s = r.shape.percent,
              l = r.pointAt(0),
              u = r.pointAt(s),
              c = a.sub([], u, l);
            if ((a.normalize(c, c), e)) {
              e.attr('position', l);
              var h = r.tangentAt(0);
              e.attr('rotation', Math.PI / 2 - Math.atan2(h[1], h[0])),
                e.attr('scale', [i * s, i * s]);
            }
            if (t) {
              t.attr('position', u);
              h = r.tangentAt(1);
              t.attr('rotation', -Math.PI / 2 - Math.atan2(h[1], h[0])),
                t.attr('scale', [i * s, i * s]);
            }
            if (!n.ignore) {
              var d, p, g;
              n.attr('position', u);
              var f = 5 * i;
              if ('end' === n.__position)
                (d = [c[0] * f + u[0], c[1] * f + u[1]]),
                  (p = c[0] > 0.8 ? 'left' : c[0] < -0.8 ? 'right' : 'center'),
                  (g = c[1] > 0.8 ? 'top' : c[1] < -0.8 ? 'bottom' : 'middle');
              else if ('middle' === n.__position) {
                var m = s / 2,
                  v = [(h = r.tangentAt(m))[1], -h[0]],
                  y = r.pointAt(m);
                v[1] > 0 && ((v[0] = -v[0]), (v[1] = -v[1])),
                  (d = [y[0] + v[0] * f, y[1] + v[1] * f]),
                  (p = 'center'),
                  (g = 'bottom');
                var x = -Math.atan2(h[1], h[0]);
                u[0] < l[0] && (x = Math.PI + x), n.attr('rotation', x);
              } else
                (d = [-c[0] * f + l[0], -c[1] * f + l[1]]),
                  (p = c[0] > 0.8 ? 'right' : c[0] < -0.8 ? 'left' : 'center'),
                  (g = c[1] > 0.8 ? 'bottom' : c[1] < -0.8 ? 'top' : 'middle');
              n.attr({
                style: { textVerticalAlign: n.__verticalAlign || g, textAlign: n.__textAlign || p },
                position: d,
                scale: [i, i]
              });
            }
          }
        }
      }),
        (g._createLine = function(e, t, n) {
          var a = e.hostModel,
            o = (function(e) {
              var t = new r({ name: 'line', subPixelOptimize: !0 });
              return d(t.shape, e), t;
            })(e.getItemLayout(t));
          (o.shape.percent = 0), s.initProps(o, { shape: { percent: 1 } }, a, t), this.add(o);
          var l = new s.Text({ name: 'label', lineLabelOriginalOpacity: 1 });
          this.add(l),
            i.each(
              u,
              function(n) {
                var i = h(n, e, t);
                this.add(i), (this[c(n)] = e.getItemVisual(t, n));
              },
              this
            ),
            this._updateCommonStl(e, t, n);
        }),
        (g.updateData = function(e, t, n) {
          var a = e.hostModel,
            o = this.childOfName('line'),
            r = e.getItemLayout(t),
            l = { shape: {} };
          d(l.shape, r),
            s.updateProps(o, l, a, t),
            i.each(
              u,
              function(n) {
                var i = e.getItemVisual(t, n),
                  a = c(n);
                if (this[a] !== i) {
                  this.remove(this.childOfName(n));
                  var o = h(n, e, t);
                  this.add(o);
                }
                this[a] = i;
              },
              this
            ),
            this._updateCommonStl(e, t, n);
        }),
        (g._updateCommonStl = function(e, t, n) {
          var a = e.hostModel,
            o = this.childOfName('line'),
            r = n && n.lineStyle,
            c = n && n.hoverLineStyle,
            h = n && n.labelModel,
            d = n && n.hoverLabelModel;
          if (!n || e.hasItemOption) {
            var p = e.getItemModel(t);
            (r = p.getModel('lineStyle').getLineStyle()),
              (c = p.getModel('emphasis.lineStyle').getLineStyle()),
              (h = p.getModel('label')),
              (d = p.getModel('emphasis.label'));
          }
          var g = e.getItemVisual(t, 'color'),
            f = i.retrieve3(e.getItemVisual(t, 'opacity'), r.opacity, 1);
          o.useStyle(i.defaults({ strokeNoScale: !0, fill: 'none', stroke: g, opacity: f }, r)),
            (o.hoverStyle = c),
            i.each(
              u,
              function(e) {
                var t = this.childOfName(e);
                t && (t.setColor(g), t.setStyle({ opacity: f }));
              },
              this
            );
          var m,
            v,
            y = h.getShallow('show'),
            x = d.getShallow('show'),
            _ = this.childOfName('label');
          if (
            (y || x) &&
            ((m = g || '#000'), null == (v = a.getFormattedLabel(t, 'normal', e.dataType)))
          ) {
            var b = a.getRawValue(t);
            v = null == b ? e.getName(t) : isFinite(b) ? l(b) : b;
          }
          var S = y ? v : null,
            w = x ? i.retrieve2(a.getFormattedLabel(t, 'emphasis', e.dataType), v) : null,
            M = _.style;
          (null == S && null == w) ||
            (s.setTextStyle(_.style, h, { text: S }, { autoColor: m }),
            (_.__textAlign = M.textAlign),
            (_.__verticalAlign = M.textVerticalAlign),
            (_.__position = h.get('position') || 'middle')),
            (_.hoverStyle =
              null != w
                ? {
                    text: w,
                    textFill: d.getTextColor(!0),
                    fontStyle: d.getShallow('fontStyle'),
                    fontWeight: d.getShallow('fontWeight'),
                    fontSize: d.getShallow('fontSize'),
                    fontFamily: d.getShallow('fontFamily')
                  }
                : { text: null }),
            (_.ignore = !y && !x),
            s.setHoverStyle(this);
        }),
        (g.highlight = function() {
          this.trigger('emphasis');
        }),
        (g.downplay = function() {
          this.trigger('normal');
        }),
        (g.updateLayout = function(e, t) {
          this.setLinePoints(e.getItemLayout(t));
        }),
        (g.setLinePoints = function(e) {
          var t = this.childOfName('line');
          d(t.shape, e), t.dirty();
        }),
        i.inherits(p, s.Group);
      var f = p;
      e.exports = f;
    },
    function(e, t) {
      (t.getNodeGlobalScale = function(e) {
        var t = e.coordinateSystem;
        if ('view' !== t.type) return 1;
        var n = e.option.nodeScaleRatio,
          i = t.scale,
          a = (i && i[0]) || 1;
        return ((t.getZoom() - 1) * n + 1) / a;
      }),
        (t.getSymbolSize = function(e) {
          var t = e.getVisual('symbolSize');
          return t instanceof Array && (t = (t[0] + t[1]) / 2), +t;
        });
    },
    function(e, t, n) {
      n(23).__DEV__;
      var i = n(2),
        a = n(99),
        o = n(6),
        r = n(435),
        s = n(102),
        l = i.curry,
        u = i.each,
        c = i.map,
        h = Math.min,
        d = Math.max,
        p = Math.pow,
        g = 1e4,
        f = 6,
        m = 6,
        v = 'globalPan',
        y = { w: [0, 0], e: [0, 1], n: [1, 0], s: [1, 1] },
        x = { w: 'ew', e: 'ew', n: 'ns', s: 'ns', ne: 'nesw', sw: 'nesw', nw: 'nwse', se: 'nwse' },
        _ = {
          brushStyle: { lineWidth: 2, stroke: 'rgba(0,0,0,0.3)', fill: 'rgba(0,0,0,0.1)' },
          transformable: !0,
          brushMode: 'single',
          removeOnClick: !1
        },
        b = 0;
      function S(e) {
        a.call(this),
          (this._zr = e),
          (this.group = new o.Group()),
          this._brushType,
          this._brushOption,
          this._panels,
          (this._track = []),
          this._dragging,
          (this._lastMouseMovePoint = {}),
          (this._covers = []),
          this._creatingCover,
          this._creatingPanel,
          this._enableGlobalPan,
          (this._uid = 'brushController_' + b++),
          (this._handlers = {}),
          u(
            X,
            function(e, t) {
              this._handlers[t] = i.bind(e, this);
            },
            this
          );
      }
      function w(e, t) {
        var n = K[t.brushType].createCover(e, t);
        return (n.__brushOption = t), A(n, t), e.group.add(n), n;
      }
      function M(e, t) {
        var n = D(t);
        return n.endCreating && (n.endCreating(e, t), A(t, t.__brushOption)), t;
      }
      function I(e, t) {
        var n = t.__brushOption;
        D(t).updateCoverShape(e, t, n.range, n);
      }
      function A(e, t) {
        var n = t.z;
        null == n && (n = g),
          e.traverse(function(e) {
            (e.z = n), (e.z2 = n);
          });
      }
      function T(e, t) {
        D(t).updateCommon(e, t), I(e, t);
      }
      function D(e) {
        return K[e.__brushOption.brushType];
      }
      function C(e, t, n) {
        var i,
          a = e._panels;
        if (!a) return !0;
        var o = e._transform;
        return (
          u(a, function(e) {
            e.isTargetByCursor(t, n, o) && (i = e);
          }),
          i
        );
      }
      function L(e, t) {
        var n = e._panels;
        if (!n) return !0;
        var i = t.__brushOption.panelId;
        return null == i || n[i];
      }
      function P(e) {
        var t = e._covers,
          n = t.length;
        return (
          u(
            t,
            function(t) {
              e.group.remove(t);
            },
            e
          ),
          (t.length = 0),
          !!n
        );
      }
      function O(e, t) {
        var n = c(e._covers, function(e) {
          var t = e.__brushOption,
            n = i.clone(t.range);
          return { brushType: t.brushType, panelId: t.panelId, range: n };
        });
        e.trigger('brush', n, { isEnd: !!t.isEnd, removeOnClick: !!t.removeOnClick });
      }
      function k(e) {
        var t = e.length - 1;
        return t < 0 && (t = 0), [e[0], e[t]];
      }
      function N(e, t, n, i) {
        var a = new o.Group();
        return (
          a.add(
            new o.Rect({
              name: 'main',
              style: z(n),
              silent: !0,
              draggable: !0,
              cursor: 'move',
              drift: l(e, t, a, 'nswe'),
              ondragend: l(O, t, { isEnd: !0 })
            })
          ),
          u(i, function(n) {
            a.add(
              new o.Rect({
                name: n,
                style: { opacity: 0 },
                draggable: !0,
                silent: !0,
                invisible: !0,
                drift: l(e, t, a, n),
                ondragend: l(O, t, { isEnd: !0 })
              })
            );
          }),
          a
        );
      }
      function R(e, t, n, i) {
        var a = i.brushStyle.lineWidth || 0,
          o = d(a, m),
          r = n[0][0],
          s = n[1][0],
          l = r - a / 2,
          u = s - a / 2,
          c = n[0][1],
          h = n[1][1],
          p = c - o + a / 2,
          g = h - o + a / 2,
          f = c - r,
          v = h - s,
          y = f + a,
          x = v + a;
        V(e, t, 'main', r, s, f, v),
          i.transformable &&
            (V(e, t, 'w', l, u, o, x),
            V(e, t, 'e', p, u, o, x),
            V(e, t, 'n', l, u, y, o),
            V(e, t, 's', l, g, y, o),
            V(e, t, 'nw', l, u, o, o),
            V(e, t, 'ne', p, u, o, o),
            V(e, t, 'sw', l, g, o, o),
            V(e, t, 'se', p, g, o, o));
      }
      function E(e, t) {
        var n = t.__brushOption,
          i = n.transformable,
          a = t.childAt(0);
        a.useStyle(z(n)),
          a.attr({ silent: !i, cursor: i ? 'move' : 'default' }),
          u(['w', 'e', 'n', 's', 'se', 'sw', 'ne', 'nw'], function(n) {
            var a = t.childOfName(n),
              r = (function e(t, n) {
                if (n.length > 1)
                  return (
                    (n = n.split('')),
                    ('e' === (i = [e(t, n[0]), e(t, n[1])])[0] || 'w' === i[0]) && i.reverse(),
                    i.join('')
                  );
                var i;
                return { left: 'w', right: 'e', top: 'n', bottom: 's' }[
                  (i = o.transformDirection(
                    { w: 'left', e: 'right', n: 'top', s: 'bottom' }[n],
                    (function(e) {
                      return o.getTransform(e.group);
                    })(t)
                  ))
                ];
              })(e, n);
            a && a.attr({ silent: !i, invisible: !i, cursor: i ? x[r] + '-resize' : null });
          });
      }
      function V(e, t, n, i, a, o, r) {
        var s = t.childOfName(n);
        s &&
          s.setShape(
            (function(e) {
              var t = h(e[0][0], e[1][0]),
                n = h(e[0][1], e[1][1]),
                i = d(e[0][0], e[1][0]),
                a = d(e[0][1], e[1][1]);
              return { x: t, y: n, width: i - t, height: a - n };
            })(
              W(e, t, [
                [i, a],
                [i + o, a + r]
              ])
            )
          );
      }
      function z(e) {
        return i.defaults({ strokeNoScale: !0 }, e.brushStyle);
      }
      function B(e, t, n, i) {
        var a = [h(e, n), h(t, i)],
          o = [d(e, n), d(t, i)];
        return [
          [a[0], o[0]],
          [a[1], o[1]]
        ];
      }
      function G(e, t, n, i, a, o, r, s) {
        var l = i.__brushOption,
          c = e(l.range),
          h = F(n, o, r);
        u(a.split(''), function(e) {
          var t = y[e];
          c[t[0]][t[1]] += h[t[0]];
        }),
          (l.range = t(B(c[0][0], c[1][0], c[0][1], c[1][1]))),
          T(n, i),
          O(n, { isEnd: !1 });
      }
      function H(e, t, n, i, a) {
        var o = t.__brushOption.range,
          r = F(e, n, i);
        u(o, function(e) {
          (e[0] += r[0]), (e[1] += r[1]);
        }),
          T(e, t),
          O(e, { isEnd: !1 });
      }
      function F(e, t, n) {
        var i = e.group,
          a = i.transformCoordToLocal(t, n),
          o = i.transformCoordToLocal(0, 0);
        return [a[0] - o[0], a[1] - o[1]];
      }
      function W(e, t, n) {
        var a = L(e, t);
        return a && !0 !== a ? a.clipPath(n, e._transform) : i.clone(n);
      }
      function Z(e) {
        var t = e.event;
        t.preventDefault && t.preventDefault();
      }
      function U(e, t, n) {
        return e.childOfName('main').contain(t, n);
      }
      function Y(e, t, n, a) {
        var o,
          r = e._creatingCover,
          s = e._creatingPanel,
          l = e._brushOption;
        if (
          (e._track.push(n.slice()),
          (function(e) {
            var t = e._track;
            if (!t.length) return !1;
            var n = t[t.length - 1],
              i = t[0],
              a = n[0] - i[0],
              o = n[1] - i[1];
            return p(a * a + o * o, 0.5) > f;
          })(e) || r)
        ) {
          if (s && !r) {
            'single' === l.brushMode && P(e);
            var u = i.clone(l);
            (u.brushType = j(u.brushType, s)),
              (u.panelId = !0 === s ? null : s.panelId),
              (r = e._creatingCover = w(e, u)),
              e._covers.push(r);
          }
          if (r) {
            var c = K[j(e._brushType, s)];
            (r.__brushOption.range = c.getCreatingRange(W(e, r, e._track))),
              a && (M(e, r), c.updateCommon(e, r)),
              I(e, r),
              (o = { isEnd: a });
          }
        } else
          a &&
            'single' === l.brushMode &&
            l.removeOnClick &&
            C(e, t, n) &&
            P(e) &&
            (o = { isEnd: a, removeOnClick: !0 });
        return o;
      }
      function j(e, t) {
        return 'auto' === e ? t.defaultBrushType : e;
      }
      (S.prototype = {
        constructor: S,
        enableBrush: function(e) {
          return (
            this._brushType &&
              (function(e) {
                var t = e._zr;
                r.release(t, v, e._uid),
                  u(e._handlers, function(e, n) {
                    t.off(n, e);
                  }),
                  (e._brushType = e._brushOption = null);
              })(this),
            e.brushType &&
              (function(e, t) {
                var n = e._zr;
                e._enableGlobalPan || r.take(n, v, e._uid);
                u(e._handlers, function(e, t) {
                  n.on(t, e);
                }),
                  (e._brushType = t.brushType),
                  (e._brushOption = i.merge(i.clone(_), t, !0));
              })(this, e),
            this
          );
        },
        setPanels: function(e) {
          if (e && e.length) {
            var t = (this._panels = {});
            i.each(e, function(e) {
              t[e.panelId] = i.clone(e);
            });
          } else this._panels = null;
          return this;
        },
        mount: function(e) {
          (e = e || {}), (this._enableGlobalPan = e.enableGlobalPan);
          var t = this.group;
          return (
            this._zr.add(t),
            t.attr({
              position: e.position || [0, 0],
              rotation: e.rotation || 0,
              scale: e.scale || [1, 1]
            }),
            (this._transform = t.getLocalTransform()),
            this
          );
        },
        eachCover: function(e, t) {
          u(this._covers, e, t);
        },
        updateCovers: function(e) {
          e = i.map(e, function(e) {
            return i.merge(i.clone(_), e, !0);
          });
          var t = '\0-brush-index-',
            n = this._covers,
            a = (this._covers = []),
            o = this,
            r = this._creatingCover;
          return (
            new s(
              n,
              e,
              function(e, t) {
                return l(e.__brushOption, t);
              },
              l
            )
              .add(u)
              .update(u)
              .remove(function(e) {
                n[e] !== r && o.group.remove(n[e]);
              })
              .execute(),
            this
          );
          function l(e, n) {
            return (null != e.id ? e.id : t + n) + '-' + e.brushType;
          }
          function u(t, i) {
            var s = e[t];
            if (null != i && n[i] === r) a[t] = n[i];
            else {
              var l = (a[t] = null != i ? ((n[i].__brushOption = s), n[i]) : M(o, w(o, s)));
              T(o, l);
            }
          }
        },
        unmount: function() {
          return this.enableBrush(!1), P(this), this._zr.remove(this.group), this;
        },
        dispose: function() {
          this.unmount(), this.off();
        }
      }),
        i.mixin(S, a);
      var X = {
        mousedown: function(e) {
          if (this._dragging) q(this, e);
          else if (!e.target || !e.target.draggable) {
            Z(e);
            var t = this.group.transformCoordToLocal(e.offsetX, e.offsetY);
            (this._creatingCover = null),
              (this._creatingPanel = C(this, e, t)) &&
                ((this._dragging = !0), (this._track = [t.slice()]));
          }
        },
        mousemove: function(e) {
          var t = this._lastMouseMovePoint;
          (t.x = e.offsetX), (t.y = e.offsetY);
          var n = this.group.transformCoordToLocal(t.x, t.y);
          if (
            ((function(e, t, n) {
              if (e._brushType) {
                var i = e._zr,
                  a = e._covers,
                  o = C(e, t, n);
                if (!e._dragging)
                  for (var r = 0; r < a.length; r++) {
                    var s = a[r].__brushOption;
                    if (
                      o &&
                      (!0 === o || s.panelId === o.panelId) &&
                      K[s.brushType].contain(a[r], n[0], n[1])
                    )
                      return;
                  }
                o && i.setCursorStyle('crosshair');
              }
            })(this, e, n),
            this._dragging)
          ) {
            Z(e);
            var i = Y(this, e, n, !1);
            i && O(this, i);
          }
        },
        mouseup: function(e) {
          q(this, e);
        },
        globalout: function(e) {
          q(this, e, !0);
        }
      };
      function q(e, t, n) {
        if (e._dragging) {
          !n && Z(t);
          var i = t.offsetX,
            a = t.offsetY,
            o = e._lastMouseMovePoint;
          n && ((i = o.x), (a = o.y));
          var r = e.group.transformCoordToLocal(i, a),
            s = Y(e, t, r, !0);
          (e._dragging = !1), (e._track = []), (e._creatingCover = null), s && O(e, s);
        }
      }
      var K = {
        lineX: J(0),
        lineY: J(1),
        rect: {
          createCover: function(e, t) {
            return N(
              l(
                G,
                function(e) {
                  return e;
                },
                function(e) {
                  return e;
                }
              ),
              e,
              t,
              ['w', 'e', 'n', 's', 'se', 'sw', 'ne', 'nw']
            );
          },
          getCreatingRange: function(e) {
            var t = k(e);
            return B(t[1][0], t[1][1], t[0][0], t[0][1]);
          },
          updateCoverShape: function(e, t, n, i) {
            R(e, t, n, i);
          },
          updateCommon: E,
          contain: U
        },
        polygon: {
          createCover: function(e, t) {
            var n = new o.Group();
            return n.add(new o.Polyline({ name: 'main', style: z(t), silent: !0 })), n;
          },
          getCreatingRange: function(e) {
            return e;
          },
          endCreating: function(e, t) {
            t.remove(t.childAt(0)),
              t.add(
                new o.Polygon({
                  name: 'main',
                  draggable: !0,
                  drift: l(H, e, t),
                  ondragend: l(O, e, { isEnd: !0 })
                })
              );
          },
          updateCoverShape: function(e, t, n, i) {
            t.childAt(0).setShape({ points: W(e, t, n) });
          },
          updateCommon: E,
          contain: U
        }
      };
      function J(e) {
        return {
          createCover: function(t, n) {
            return N(
              l(
                G,
                function(t) {
                  var n = [t, [0, 100]];
                  return e && n.reverse(), n;
                },
                function(t) {
                  return t[e];
                }
              ),
              t,
              n,
              [
                ['w', 'e'],
                ['n', 's']
              ][e]
            );
          },
          getCreatingRange: function(t) {
            var n = k(t);
            return [h(n[0][e], n[1][e]), d(n[0][e], n[1][e])];
          },
          updateCoverShape: function(t, n, i, a) {
            var o,
              r = L(t, n);
            if (!0 !== r && r.getLinearBrushOtherExtent)
              o = r.getLinearBrushOtherExtent(e, t._transform);
            else {
              var s = t._zr;
              o = [0, [s.getWidth(), s.getHeight()][1 - e]];
            }
            var l = [i, o];
            e && l.reverse(), R(t, n, l, a);
          },
          updateCommon: E,
          contain: U
        };
      }
      var $ = S;
      e.exports = $;
    },
    function(e, t, n) {
      var i = n(2),
        a = n(78),
        o = n(6),
        r = n(203),
        s = n(69),
        l = n(85),
        u = (0, n(18).makeInner)(),
        c = i.clone,
        h = i.bind;
      function d() {}
      function p(e, t, n, a) {
        (function e(t, n) {
          if (i.isObject(t) && i.isObject(n)) {
            var a = !0;
            return (
              i.each(n, function(n, i) {
                a = a && e(t[i], n);
              }),
              !!a
            );
          }
          return t === n;
        })(u(n).lastProp, a) ||
          ((u(n).lastProp = a), t ? o.updateProps(n, a, e) : (n.stopAnimation(), n.attr(a)));
      }
      function g(e, t) {
        e[t.get('label.show') ? 'show' : 'hide']();
      }
      function f(e) {
        return { position: e.position.slice(), rotation: e.rotation || 0 };
      }
      function m(e, t, n) {
        var i = t.get('z'),
          a = t.get('zlevel');
        e &&
          e.traverse(function(e) {
            'group' !== e.type &&
              (null != i && (e.z = i), null != a && (e.zlevel = a), (e.silent = n));
          });
      }
      (d.prototype = {
        _group: null,
        _lastGraphicKey: null,
        _handle: null,
        _dragging: !1,
        _lastValue: null,
        _lastStatus: null,
        _payloadInfo: null,
        animationThreshold: 15,
        render: function(e, t, n, a) {
          var r = t.get('value'),
            s = t.get('status');
          if (
            ((this._axisModel = e),
            (this._axisPointerModel = t),
            (this._api = n),
            a || this._lastValue !== r || this._lastStatus !== s)
          ) {
            (this._lastValue = r), (this._lastStatus = s);
            var l = this._group,
              u = this._handle;
            if (!s || 'hide' === s) return l && l.hide(), void (u && u.hide());
            l && l.show(), u && u.show();
            var c = {};
            this.makeElOption(c, r, e, t, n);
            var h = c.graphicKey;
            h !== this._lastGraphicKey && this.clear(n), (this._lastGraphicKey = h);
            var d = (this._moveAnimation = this.determineAnimation(e, t));
            if (l) {
              var g = i.curry(p, t, d);
              this.updatePointerEl(l, c, g, t), this.updateLabelEl(l, c, g, t);
            } else
              (l = this._group = new o.Group()),
                this.createPointerEl(l, c, e, t),
                this.createLabelEl(l, c, e, t),
                n.getZr().add(l);
            m(l, t, !0), this._renderHandle(r);
          }
        },
        remove: function(e) {
          this.clear(e);
        },
        dispose: function(e) {
          this.clear(e);
        },
        determineAnimation: function(e, t) {
          var n = t.get('animation'),
            i = e.axis,
            a = 'category' === i.type,
            o = t.get('snap');
          if (!o && !a) return !1;
          if ('auto' === n || null == n) {
            var s = this.animationThreshold;
            if (a && i.getBandWidth() > s) return !0;
            if (o) {
              var l = r.getAxisInfo(e).seriesDataCount,
                u = i.getExtent();
              return Math.abs(u[0] - u[1]) / l > s;
            }
            return !1;
          }
          return !0 === n;
        },
        makeElOption: function(e, t, n, i, a) {},
        createPointerEl: function(e, t, n, i) {
          var a = t.pointer;
          if (a) {
            var r = (u(e).pointerEl = new o[a.type](c(t.pointer)));
            e.add(r);
          }
        },
        createLabelEl: function(e, t, n, i) {
          if (t.label) {
            var a = (u(e).labelEl = new o.Rect(c(t.label)));
            e.add(a), g(a, i);
          }
        },
        updatePointerEl: function(e, t, n) {
          var i = u(e).pointerEl;
          i && t.pointer && (i.setStyle(t.pointer.style), n(i, { shape: t.pointer.shape }));
        },
        updateLabelEl: function(e, t, n, i) {
          var a = u(e).labelEl;
          a &&
            (a.setStyle(t.label.style),
            n(a, { shape: t.label.shape, position: t.label.position }),
            g(a, i));
        },
        _renderHandle: function(e) {
          if (!this._dragging && this.updateHandleTransform) {
            var t,
              n = this._axisPointerModel,
              a = this._api.getZr(),
              r = this._handle,
              u = n.getModel('handle'),
              c = n.get('status');
            if (!u.get('show') || !c || 'hide' === c)
              return r && a.remove(r), void (this._handle = null);
            this._handle ||
              ((t = !0),
              (r = this._handle = o.createIcon(u.get('icon'), {
                cursor: 'move',
                draggable: !0,
                onmousemove: function(e) {
                  s.stop(e.event);
                },
                onmousedown: h(this._onHandleDragMove, this, 0, 0),
                drift: h(this._onHandleDragMove, this),
                ondragend: h(this._onHandleDragEnd, this)
              })),
              a.add(r)),
              m(r, n, !1);
            r.setStyle(
              u.getItemStyle(null, [
                'color',
                'borderColor',
                'borderWidth',
                'opacity',
                'shadowColor',
                'shadowBlur',
                'shadowOffsetX',
                'shadowOffsetY'
              ])
            );
            var d = u.get('size');
            i.isArray(d) || (d = [d, d]),
              r.attr('scale', [d[0] / 2, d[1] / 2]),
              l.createOrUpdate(this, '_doDispatchAxisPointer', u.get('throttle') || 0, 'fixRate'),
              this._moveHandleToValue(e, t);
          }
        },
        _moveHandleToValue: function(e, t) {
          p(
            this._axisPointerModel,
            !t && this._moveAnimation,
            this._handle,
            f(this.getHandleTransform(e, this._axisModel, this._axisPointerModel))
          );
        },
        _onHandleDragMove: function(e, t) {
          var n = this._handle;
          if (n) {
            this._dragging = !0;
            var i = this.updateHandleTransform(
              f(n),
              [e, t],
              this._axisModel,
              this._axisPointerModel
            );
            (this._payloadInfo = i),
              n.stopAnimation(),
              n.attr(f(i)),
              (u(n).lastProp = null),
              this._doDispatchAxisPointer();
          }
        },
        _doDispatchAxisPointer: function() {
          if (this._handle) {
            var e = this._payloadInfo,
              t = this._axisModel;
            this._api.dispatchAction({
              type: 'updateAxisPointer',
              x: e.cursorPoint[0],
              y: e.cursorPoint[1],
              tooltipOption: e.tooltipOption,
              axesInfo: [{ axisDim: t.axis.dim, axisIndex: t.componentIndex }]
            });
          }
        },
        _onHandleDragEnd: function(e) {
          if (((this._dragging = !1), this._handle)) {
            var t = this._axisPointerModel.get('value');
            this._moveHandleToValue(t), this._api.dispatchAction({ type: 'hideTip' });
          }
        },
        getHandleTransform: null,
        updateHandleTransform: null,
        clear: function(e) {
          (this._lastValue = null), (this._lastStatus = null);
          var t = e.getZr(),
            n = this._group,
            i = this._handle;
          t &&
            n &&
            ((this._lastGraphicKey = null),
            n && t.remove(n),
            i && t.remove(i),
            (this._group = null),
            (this._handle = null),
            (this._payloadInfo = null));
        },
        doClear: function() {},
        buildLabel: function(e, t, n) {
          return { x: e[(n = n || 0)], y: e[1 - n], width: t[n], height: t[1 - n] };
        }
      }),
        (d.prototype.constructor = d),
        a.enableClassExtend(d);
      var v = d;
      e.exports = v;
    },
    function(e, t, n) {
      n(23).__DEV__;
      var i = n(2),
        a = n(946),
        o = n(16).parsePercent,
        r = n(64),
        s = r.createScaleByModel,
        l = r.niceScaleExtent,
        u = n(63),
        c = n(72).getStackedDimension;
      function h(e, t) {
        var n = this,
          a = n.getAngleAxis(),
          o = n.getRadiusAxis();
        if (
          (a.scale.setExtent(1 / 0, -1 / 0),
          o.scale.setExtent(1 / 0, -1 / 0),
          e.eachSeries(function(e) {
            if (e.coordinateSystem === n) {
              var t = e.getData();
              i.each(t.mapDimension('radius', !0), function(e) {
                o.scale.unionExtentFromData(t, c(t, e));
              }),
                i.each(t.mapDimension('angle', !0), function(e) {
                  a.scale.unionExtentFromData(t, c(t, e));
                });
            }
          }),
          l(a.scale, a.model),
          l(o.scale, o.model),
          'category' === a.type && !a.onBand)
        ) {
          var r = a.getExtent(),
            s = 360 / a.scale.count();
          a.inverse ? (r[1] += s) : (r[1] -= s), a.setExtent(r[0], r[1]);
        }
      }
      function d(e, t) {
        if (
          ((e.type = t.get('type')),
          (e.scale = s(t)),
          (e.onBand = t.get('boundaryGap') && 'category' === e.type),
          (e.inverse = t.get('inverse')),
          'angleAxis' === t.mainType)
        ) {
          e.inverse ^= t.get('clockwise');
          var n = t.get('startAngle');
          e.setExtent(n, n + (e.inverse ? -360 : 360));
        }
        (t.axis = e), (e.model = t);
      }
      n(949);
      var p = {
        dimensions: a.prototype.dimensions,
        create: function(e, t) {
          var n = [];
          return (
            e.eachComponent('polar', function(e, r) {
              var s = new a(r);
              s.update = h;
              var l = s.getRadiusAxis(),
                u = s.getAngleAxis(),
                c = e.findAxisModel('radiusAxis'),
                p = e.findAxisModel('angleAxis');
              d(l, c),
                d(u, p),
                (function(e, t, n) {
                  var a = t.get('center'),
                    r = n.getWidth(),
                    s = n.getHeight();
                  (e.cx = o(a[0], r)), (e.cy = o(a[1], s));
                  var l = e.getRadiusAxis(),
                    u = Math.min(r, s) / 2,
                    c = t.get('radius');
                  null == c ? (c = [0, '100%']) : i.isArray(c) || (c = [0, c]),
                    (c = [o(c[0], u), o(c[1], u)]),
                    l.inverse ? l.setExtent(c[1], c[0]) : l.setExtent(c[0], c[1]);
                })(s, e, t),
                n.push(s),
                (e.coordinateSystem = s),
                (s.model = e);
            }),
            e.eachSeries(function(t) {
              if ('polar' === t.get('coordinateSystem')) {
                var n = e.queryComponents({
                  mainType: 'polar',
                  index: t.get('polarIndex'),
                  id: t.get('polarId')
                })[0];
                t.coordinateSystem = n.coordinateSystem;
              }
            }),
            n
          );
        }
      };
      u.register('polar', p);
    },
    function(e, t, n) {
      n(37).registerSubTypeDefaulter('dataZoom', function() {
        return 'slider';
      });
    },
    function(e, t, n) {
      var i = n(2),
        a = n(30),
        o = ['cartesian2d', 'polar', 'singleAxis'];
      function r(e, t) {
        e = e.slice();
        var n = i.map(e, a.capitalFirst);
        t = (t || []).slice();
        var o = i.map(t, a.capitalFirst);
        return function(a, r) {
          i.each(e, function(e, i) {
            for (var s = { name: e, capital: n[i] }, l = 0; l < t.length; l++) s[t[l]] = e + o[l];
            a.call(r, s);
          });
        };
      }
      var s = r(['x', 'y', 'z', 'radius', 'angle', 'single'], ['axisIndex', 'axis', 'index', 'id']);
      (t.isCoordSupported = function(e) {
        return i.indexOf(o, e) >= 0;
      }),
        (t.createNameEach = r),
        (t.eachAxisDim = s),
        (t.createLinkedNodesFinder = function(e, t, n) {
          return function(o) {
            var r,
              s = { nodes: [], records: {} };
            if (
              (t(function(e) {
                s.records[e.name] = {};
              }),
              !o)
            )
              return s;
            a(o, s);
            do {
              (r = !1), e(l);
            } while (r);
            function l(e) {
              !(function(e, t) {
                return i.indexOf(t.nodes, e) >= 0;
              })(e, s) &&
                (function(e, a) {
                  var o = !1;
                  return (
                    t(function(t) {
                      i.each(n(e, t) || [], function(e) {
                        a.records[t.name][e] && (o = !0);
                      });
                    }),
                    o
                  );
                })(e, s) &&
                (a(e, s), (r = !0));
            }
            return s;
          };
          function a(e, a) {
            a.nodes.push(e),
              t(function(t) {
                i.each(n(e, t) || [], function(e) {
                  a.records[t.name][e] = !0;
                });
              });
          }
        });
    },
    function(e, t, n) {
      var i = n(4),
        a = n(2),
        o = a.createHashMap,
        r = a.each;
      i.registerProcessor({
        getTargetSeries: function(e) {
          var t = o();
          return (
            e.eachComponent('dataZoom', function(e) {
              e.eachTargetAxis(function(e, n, i) {
                var a = i.getAxisProxy(e.name, n);
                r(a.getTargetSeriesModels(), function(e) {
                  t.set(e.uid, e);
                });
              });
            }),
            t
          );
        },
        modifyOutputEnd: !0,
        overallReset: function(e, t) {
          e.eachComponent('dataZoom', function(e) {
            e.eachTargetAxis(function(e, n, i) {
              i.getAxisProxy(e.name, n).reset(i, t);
            }),
              e.eachTargetAxis(function(e, n, i) {
                i.getAxisProxy(e.name, n).filterData(i, t);
              });
          }),
            e.eachComponent('dataZoom', function(e) {
              var t = e.findRepresentativeAxisProxy(),
                n = t.getDataPercentWindow(),
                i = t.getDataValueWindow();
              e.setCalculatedRange({ start: n[0], end: n[1], startValue: i[0], endValue: i[1] });
            });
        }
      });
    },
    function(e, t, n) {
      var i = n(4),
        a = n(2),
        o = n(310);
      i.registerAction('dataZoom', function(e, t) {
        var n = o.createLinkedNodesFinder(
            a.bind(t.eachComponent, t, 'dataZoom'),
            o.eachAxisDim,
            function(e, t) {
              return e.get(t.axisIndex);
            }
          ),
          i = [];
        t.eachComponent({ mainType: 'dataZoom', query: e }, function(e, t) {
          i.push.apply(i, n(e).nodes);
        }),
          a.each(i, function(t, n) {
            t.setRawRange({
              start: e.start,
              end: e.end,
              startValue: e.startValue,
              endValue: e.endValue
            });
          });
      });
    },
    function(e, t, n) {
      n(23).__DEV__;
      var i = n(4),
        a = n(2),
        o = n(35),
        r = n(18),
        s = n(30),
        l = n(291),
        u = s.addCommas,
        c = s.encodeHTML;
      function h(e) {
        r.defaultEmphasis(e, 'label', ['show']);
      }
      var d = i.extendComponentModel({
        type: 'marker',
        dependencies: ['series', 'grid', 'polar', 'geo'],
        init: function(e, t, n) {
          this.mergeDefaultAndTheme(e, n), this._mergeOption(e, n, !1, !0);
        },
        isAnimationEnabled: function() {
          if (o.node) return !1;
          var e = this.__hostSeries;
          return this.getShallow('animation') && e && e.isAnimationEnabled();
        },
        mergeOption: function(e, t) {
          this._mergeOption(e, t, !1, !1);
        },
        _mergeOption: function(e, t, n, i) {
          var o = this.constructor,
            r = this.mainType + 'Model';
          n ||
            t.eachSeries(function(e) {
              var n = e.get(this.mainType, !0),
                s = e[r];
              n && n.data
                ? (s
                    ? s._mergeOption(n, t, !0)
                    : (i && h(n),
                      a.each(n.data, function(e) {
                        e instanceof Array ? (h(e[0]), h(e[1])) : h(e);
                      }),
                      (s = new o(n, this, t)),
                      a.extend(s, {
                        mainType: this.mainType,
                        seriesIndex: e.seriesIndex,
                        name: e.name,
                        createdBySelf: !0
                      }),
                      (s.__hostSeries = e)),
                  (e[r] = s))
                : (e[r] = null);
            }, this);
        },
        formatTooltip: function(e) {
          var t = this.getData(),
            n = this.getRawValue(e),
            i = a.isArray(n) ? a.map(n, u).join(', ') : u(n),
            o = t.getName(e),
            r = c(this.name);
          return (
            (null != n || o) && (r += '<br />'),
            o && ((r += c(o)), null != n && (r += ' : ')),
            null != n && (r += c(i)),
            r
          );
        },
        getData: function() {
          return this._data;
        },
        setData: function(e) {
          this._data = e;
        }
      });
      a.mixin(d, l);
      var p = d;
      e.exports = p;
    },
    function(e, t, n) {
      var i = n(2),
        a = n(16),
        o = n(72).isDimensionStacked,
        r = i.indexOf;
      function s(e, t, n, i, r, s) {
        var l = [],
          u = o(t, i) ? t.getCalculationInfo('stackResultDimension') : i,
          c = h(t, u, e),
          d = t.indicesOfNearest(u, c)[0];
        (l[r] = t.get(n, d)), (l[s] = t.get(i, d));
        var p = a.getPrecision(t.get(i, d));
        return (p = Math.min(p, 20)) >= 0 && (l[s] = +l[s].toFixed(p)), l;
      }
      var l = i.curry,
        u = { min: l(s, 'min'), max: l(s, 'max'), average: l(s, 'average') };
      function c(e, t, n, i) {
        var a = {};
        return (
          null != e.valueIndex || null != e.valueDim
            ? ((a.valueDataDim = null != e.valueIndex ? t.getDimension(e.valueIndex) : e.valueDim),
              (a.valueAxis = n.getAxis(
                (function(e, t) {
                  var n = e.getData(),
                    i = n.dimensions;
                  t = n.getDimension(t);
                  for (var a = 0; a < i.length; a++) {
                    var o = n.getDimensionInfo(i[a]);
                    if (o.name === t) return o.coordDim;
                  }
                })(i, a.valueDataDim)
              )),
              (a.baseAxis = n.getOtherAxis(a.valueAxis)),
              (a.baseDataDim = t.mapDimension(a.baseAxis.dim)))
            : ((a.baseAxis = i.getBaseAxis()),
              (a.valueAxis = n.getOtherAxis(a.baseAxis)),
              (a.baseDataDim = t.mapDimension(a.baseAxis.dim)),
              (a.valueDataDim = t.mapDimension(a.valueAxis.dim))),
          a
        );
      }
      function h(e, t, n) {
        if ('average' === n) {
          var i = 0,
            a = 0;
          return (
            e.each(t, function(e, t) {
              isNaN(e) || ((i += e), a++);
            }),
            i / a
          );
        }
        return 'median' === n ? e.getMedian(t) : e.getDataExtent(t, !0)['max' === n ? 1 : 0];
      }
      (t.dataTransform = function(e, t) {
        var n = e.getData(),
          a = e.coordinateSystem;
        if (
          t &&
          !(function(e) {
            return !isNaN(parseFloat(e.x)) && !isNaN(parseFloat(e.y));
          })(t) &&
          !i.isArray(t.coord) &&
          a
        ) {
          var o = a.dimensions,
            s = c(t, n, a, e);
          if ((t = i.clone(t)).type && u[t.type] && s.baseAxis && s.valueAxis) {
            var l = r(o, s.baseAxis.dim),
              d = r(o, s.valueAxis.dim);
            (t.coord = u[t.type](n, s.baseDataDim, s.valueDataDim, l, d)), (t.value = t.coord[d]);
          } else {
            for (
              var p = [
                  null != t.xAxis ? t.xAxis : t.radiusAxis,
                  null != t.yAxis ? t.yAxis : t.angleAxis
                ],
                g = 0;
              g < 2;
              g++
            )
              u[p[g]] && (p[g] = h(n, n.mapDimension(o[g]), p[g]));
            t.coord = p;
          }
        }
        return t;
      }),
        (t.getAxisInfo = c),
        (t.dataFilter = function(e, t) {
          return (
            !(
              e &&
              e.containData &&
              t.coord &&
              !(function(e) {
                return !(isNaN(parseFloat(e.x)) && isNaN(parseFloat(e.y)));
              })(t)
            ) || e.containData(t.coord)
          );
        }),
        (t.dimValueGetter = function(e, t, n, i) {
          return i < 2 ? e.coord && e.coord[i] : e.value;
        }),
        (t.numCalculate = h);
    },
    function(e, t, n) {
      var i = n(4),
        a = n(2),
        o = i.extendComponentView({
          type: 'marker',
          init: function() {
            this.markerGroupMap = a.createHashMap();
          },
          render: function(e, t, n) {
            var i = this.markerGroupMap;
            i.each(function(e) {
              e.__keep = !1;
            });
            var a = this.type + 'Model';
            t.eachSeries(function(e) {
              var i = e[a];
              i && this.renderSeries(e, i, t, n);
            }, this),
              i.each(function(e) {
                !e.__keep && this.group.remove(e.group);
              }, this);
          },
          renderSeries: function() {}
        });
      e.exports = o;
    },
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    function(e, t, n) {
      var i = n(37),
        a = n(197),
        o = n(196).detectSourceFormat,
        r = n(151).SERIES_LAYOUT_BY_COLUMN;
      i.extend({
        type: 'dataset',
        defaultOption: { seriesLayoutBy: r, sourceHeader: null, dimensions: null, source: null },
        optionUpdated: function() {
          o(this);
        }
      }),
        a.extend({ type: 'dataset' });
    },
    function(e, t, n) {
      var i = n(4);
      n(458), n(1007), n(459);
      var a = n(1008),
        o = n(37);
      i.registerProcessor(i.PRIORITY.PROCESSOR.SERIES_FILTER, a),
        o.registerSubTypeDefaulter('legend', function() {
          return 'plain';
        });
    },
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    function(e, t, n) {
      n(23).__DEV__;
      var i = n(2),
        a = i.each,
        o = i.filter,
        r = i.map,
        s = i.isArray,
        l = i.indexOf,
        u = i.isObject,
        c = i.isString,
        h = i.createHashMap,
        d = i.assert,
        p = i.clone,
        g = i.merge,
        f = i.extend,
        m = i.mixin,
        v = n(18),
        y = n(36),
        x = n(37),
        _ = n(773),
        b = n(415),
        S = n(196).resetSourceDefaulter,
        w = '\0_ec_inner',
        M = y.extend({
          init: function(e, t, n, i) {
            (n = n || {}),
              (this.option = null),
              (this._theme = new y(n)),
              (this._optionManager = i);
          },
          setOption: function(e, t) {
            d(!(w in e), 'please use chart.getOption()'),
              this._optionManager.setOption(e, t),
              this.resetOption(null);
          },
          resetOption: function(e) {
            var t = !1,
              n = this._optionManager;
            if (!e || 'recreate' === e) {
              var i = n.mountOption('recreate' === e);
              this.option && 'recreate' !== e
                ? (this.restoreData(), this.mergeOption(i))
                : I.call(this, i),
                (t = !0);
            }
            if (
              (('timeline' !== e && 'media' !== e) || this.restoreData(),
              !e || 'recreate' === e || 'timeline' === e)
            ) {
              var o = n.getTimelineOption(this);
              o && (this.mergeOption(o), (t = !0));
            }
            if (!e || 'recreate' === e || 'media' === e) {
              var r = n.getMediaOption(this, this._api);
              r.length &&
                a(
                  r,
                  function(e) {
                    this.mergeOption(e, (t = !0));
                  },
                  this
                );
            }
            return t;
          },
          mergeOption: function(e) {
            var t = this.option,
              n = this._componentsMap,
              i = [];
            S(this),
              a(e, function(e, n) {
                null != e &&
                  (x.hasClass(n) ? n && i.push(n) : (t[n] = null == t[n] ? p(e) : g(t[n], e, !0)));
              }),
              x.topologicalTravel(
                i,
                x.getAllClassMainTypes(),
                function(i, o) {
                  var r = v.normalizeToArray(e[i]),
                    l = v.mappingToExists(n.get(i), r);
                  v.makeIdAndName(l),
                    a(l, function(e, t) {
                      var n = e.option;
                      u(n) &&
                        ((e.keyInfo.mainType = i),
                        (e.keyInfo.subType = (function(e, t, n) {
                          return t.type ? t.type : n ? n.subType : x.determineSubType(e, t);
                        })(i, n, e.exist)));
                    });
                  var c = (function(e, t) {
                    s(t) || (t = t ? [t] : []);
                    var n = {};
                    return (
                      a(t, function(t) {
                        n[t] = (e.get(t) || []).slice();
                      }),
                      n
                    );
                  })(n, o);
                  (t[i] = []),
                    n.set(i, []),
                    a(
                      l,
                      function(e, a) {
                        var o = e.exist,
                          r = e.option;
                        if ((d(u(r) || o, 'Empty component definition'), r)) {
                          var s = x.getClass(i, e.keyInfo.subType, !0);
                          if (o && o.constructor === s)
                            (o.name = e.keyInfo.name),
                              o.mergeOption(r, this),
                              o.optionUpdated(r, !1);
                          else {
                            var l = f({ dependentModels: c, componentIndex: a }, e.keyInfo);
                            (o = new s(r, this, this, l)),
                              f(o, l),
                              o.init(r, this, this, l),
                              o.optionUpdated(null, !0);
                          }
                        } else o.mergeOption({}, this), o.optionUpdated({}, !1);
                        (n.get(i)[a] = o), (t[i][a] = o.option);
                      },
                      this
                    ),
                    'series' === i && A(this, n.get('series'));
                },
                this
              ),
              (this._seriesIndicesMap = h((this._seriesIndices = this._seriesIndices || [])));
          },
          getOption: function() {
            var e = p(this.option);
            return (
              a(e, function(t, n) {
                if (x.hasClass(n)) {
                  for (var i = (t = v.normalizeToArray(t)).length - 1; i >= 0; i--)
                    v.isIdInner(t[i]) && t.splice(i, 1);
                  e[n] = t;
                }
              }),
              delete e[w],
              e
            );
          },
          getTheme: function() {
            return this._theme;
          },
          getComponent: function(e, t) {
            var n = this._componentsMap.get(e);
            if (n) return n[t || 0];
          },
          queryComponents: function(e) {
            var t = e.mainType;
            if (!t) return [];
            var n,
              i = e.index,
              a = e.id,
              u = e.name,
              c = this._componentsMap.get(t);
            if (!c || !c.length) return [];
            if (null != i)
              s(i) || (i = [i]),
                (n = o(
                  r(i, function(e) {
                    return c[e];
                  }),
                  function(e) {
                    return !!e;
                  }
                ));
            else if (null != a) {
              var h = s(a);
              n = o(c, function(e) {
                return (h && l(a, e.id) >= 0) || (!h && e.id === a);
              });
            } else if (null != u) {
              var d = s(u);
              n = o(c, function(e) {
                return (d && l(u, e.name) >= 0) || (!d && e.name === u);
              });
            } else n = c.slice();
            return T(n, e);
          },
          findComponents: function(e) {
            var t,
              n = e.query,
              i = e.mainType,
              a = (function(e) {
                var t = i + 'Index',
                  n = i + 'Id',
                  a = i + 'Name';
                return !e || (null == e[t] && null == e[n] && null == e[a])
                  ? null
                  : { mainType: i, index: e[t], id: e[n], name: e[a] };
              })(n),
              r = a ? this.queryComponents(a) : this._componentsMap.get(i);
            return (t = T(r, e)), e.filter ? o(t, e.filter) : t;
          },
          eachComponent: function(e, t, n) {
            var i = this._componentsMap;
            if ('function' === typeof e)
              (n = t),
                (t = e),
                i.each(function(e, i) {
                  a(e, function(e, a) {
                    t.call(n, i, e, a);
                  });
                });
            else if (c(e)) a(i.get(e), t, n);
            else if (u(e)) {
              var o = this.findComponents(e);
              a(o, t, n);
            }
          },
          getSeriesByName: function(e) {
            var t = this._componentsMap.get('series');
            return o(t, function(t) {
              return t.name === e;
            });
          },
          getSeriesByIndex: function(e) {
            return this._componentsMap.get('series')[e];
          },
          getSeriesByType: function(e) {
            var t = this._componentsMap.get('series');
            return o(t, function(t) {
              return t.subType === e;
            });
          },
          getSeries: function() {
            return this._componentsMap.get('series').slice();
          },
          getSeriesCount: function() {
            return this._componentsMap.get('series').length;
          },
          eachSeries: function(e, t) {
            a(
              this._seriesIndices,
              function(n) {
                var i = this._componentsMap.get('series')[n];
                e.call(t, i, n);
              },
              this
            );
          },
          eachRawSeries: function(e, t) {
            a(this._componentsMap.get('series'), e, t);
          },
          eachSeriesByType: function(e, t, n) {
            a(
              this._seriesIndices,
              function(i) {
                var a = this._componentsMap.get('series')[i];
                a.subType === e && t.call(n, a, i);
              },
              this
            );
          },
          eachRawSeriesByType: function(e, t, n) {
            return a(this.getSeriesByType(e), t, n);
          },
          isSeriesFiltered: function(e) {
            return null == this._seriesIndicesMap.get(e.componentIndex);
          },
          getCurrentSeriesIndices: function() {
            return (this._seriesIndices || []).slice();
          },
          filterSeries: function(e, t) {
            A(this, o(this._componentsMap.get('series'), e, t));
          },
          restoreData: function(e) {
            var t = this._componentsMap;
            A(this, t.get('series'));
            var n = [];
            t.each(function(e, t) {
              n.push(t);
            }),
              x.topologicalTravel(n, x.getAllClassMainTypes(), function(n, i) {
                a(t.get(n), function(t) {
                  ('series' !== n ||
                    !(function(e, t) {
                      if (t) {
                        var n = t.seiresIndex,
                          i = t.seriesId,
                          a = t.seriesName;
                        return (
                          (null != n && e.componentIndex !== n) ||
                          (null != i && e.id !== i) ||
                          (null != a && e.name !== a)
                        );
                      }
                    })(t, e)) &&
                    t.restoreData();
                });
              });
          }
        });
      function I(e) {
        (e = e),
          (this.option = {}),
          (this.option[w] = 1),
          (this._componentsMap = h({ series: [] })),
          this._seriesIndices,
          this._seriesIndicesMap,
          (function(e, t) {
            var n = e.color && !e.colorLayer;
            a(t, function(t, i) {
              ('colorLayer' === i && n) ||
                x.hasClass(i) ||
                ('object' === typeof t
                  ? (e[i] = e[i] ? g(e[i], t, !1) : p(t))
                  : null == e[i] && (e[i] = t));
            });
          })(e, this._theme.option),
          g(e, _, !1),
          this.mergeOption(e);
      }
      function A(e, t) {
        e._seriesIndicesMap = h(
          (e._seriesIndices =
            r(t, function(e) {
              return e.componentIndex;
            }) || [])
        );
      }
      function T(e, t) {
        return t.hasOwnProperty('subType')
          ? o(e, function(e) {
              return e.subType === t.subType;
            })
          : e;
      }
      m(M, b);
      var D = M;
      e.exports = D;
    },
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    function(e, t, n) {
      var i = n(18),
        a = i.makeInner,
        o = i.normalizeToArray,
        r = a();
      var s = {
        clearColorPalette: function() {
          (r(this).colorIdx = 0), (r(this).colorNameMap = {});
        },
        getColorFromPalette: function(e, t, n) {
          var i = r((t = t || this)),
            a = i.colorIdx || 0,
            s = (i.colorNameMap = i.colorNameMap || {});
          if (s.hasOwnProperty(e)) return s[e];
          var l = o(this.get('color', !0)),
            u = this.get('colorLayer', !0),
            c =
              null != n && u
                ? (function(e, t) {
                    for (var n = e.length, i = 0; i < n; i++) if (e[i].length > t) return e[i];
                    return e[n - 1];
                  })(u, n)
                : l;
          if ((c = c || l) && c.length) {
            var h = c[a];
            return e && (s[e] = h), (i.colorIdx = (a + 1) % c.length), h;
          }
        }
      };
      e.exports = s;
    },
    function(e, t, n) {
      n(23).__DEV__;
      var i = n(2),
        a = i.createHashMap,
        o = (i.retrieve, i.each);
      var r = {
        cartesian2d: function(e, t, n, i) {
          var a = e.getReferringComponents('xAxis')[0],
            o = e.getReferringComponents('yAxis')[0];
          (t.coordSysDims = ['x', 'y']),
            n.set('x', a),
            n.set('y', o),
            s(a) && (i.set('x', a), (t.firstCategoryDimIndex = 0)),
            s(o) && (i.set('y', o), (t.firstCategoryDimIndex = 1));
        },
        singleAxis: function(e, t, n, i) {
          var a = e.getReferringComponents('singleAxis')[0];
          (t.coordSysDims = ['single']),
            n.set('single', a),
            s(a) && (i.set('single', a), (t.firstCategoryDimIndex = 0));
        },
        polar: function(e, t, n, i) {
          var a = e.getReferringComponents('polar')[0],
            o = a.findAxisModel('radiusAxis'),
            r = a.findAxisModel('angleAxis');
          (t.coordSysDims = ['radius', 'angle']),
            n.set('radius', o),
            n.set('angle', r),
            s(o) && (i.set('radius', o), (t.firstCategoryDimIndex = 0)),
            s(r) && (i.set('angle', r), (t.firstCategoryDimIndex = 1));
        },
        geo: function(e, t, n, i) {
          t.coordSysDims = ['lng', 'lat'];
        },
        parallel: function(e, t, n, i) {
          var a = e.ecModel,
            r = a.getComponent('parallel', e.get('parallelIndex')),
            l = (t.coordSysDims = r.dimensions.slice());
          o(r.parallelAxisIndex, function(e, o) {
            var r = a.getComponent('parallelAxis', e),
              u = l[o];
            n.set(u, r),
              s(r) &&
                null == t.firstCategoryDimIndex &&
                (i.set(u, r), (t.firstCategoryDimIndex = o));
          });
        }
      };
      function s(e) {
        return 'category' === e.get('type');
      }
      t.getCoordSysDefineBySeries = function(e) {
        var t = e.get('coordinateSystem'),
          n = { coordSysName: t, coordSysDims: [], axisMap: a(), categoryAxisMap: a() },
          i = r[t];
        if (i) return i(e, n, n.axisMap, n.categoryAxisMap), n;
      };
    },
    function(e, t, n) {
      var i = n(2),
        a = [
          'getDom',
          'getZr',
          'getWidth',
          'getHeight',
          'getDevicePixelRatio',
          'dispatchAction',
          'isDisposed',
          'on',
          'off',
          'getDataURL',
          'getConnectedDataURL',
          'getModel',
          'getOption',
          'getViewOfComponentModel',
          'getViewOfSeriesModel'
        ];
      var o = function(e) {
        i.each(
          a,
          function(t) {
            this[t] = i.bind(e[t], e);
          },
          this
        );
      };
      e.exports = o;
    },
    ,
    function(e, t, n) {
      var i = n(190);
      t.zrender = i;
      var a = n(42);
      t.matrix = a;
      var o = n(28);
      t.vector = o;
      var r = n(2),
        s = n(70);
      t.color = s;
      var l = n(6),
        u = n(16);
      t.number = u;
      var c = n(30);
      t.format = c;
      var h = n(85);
      h.throttle;
      t.throttle = h.throttle;
      var d = n(785);
      t.helper = d;
      var p = n(423);
      t.parseGeoJSON = p;
      var g = n(53);
      t.List = g;
      var f = n(36);
      t.Model = f;
      var m = n(87);
      t.Axis = m;
      var v = n(35);
      t.env = v;
      var y = p,
        x = {};
      r.each(
        [
          'map',
          'each',
          'filter',
          'indexOf',
          'inherits',
          'reduce',
          'filter',
          'bind',
          'curry',
          'isArray',
          'isString',
          'isObject',
          'isFunction',
          'extend',
          'defaults',
          'clone',
          'merge'
        ],
        function(e) {
          x[e] = r[e];
        }
      );
      var _ = {};
      r.each(
        [
          'extendShape',
          'extendPath',
          'makePath',
          'makeImage',
          'mergePath',
          'resizePath',
          'createIcon',
          'setHoverStyle',
          'setLabelStyle',
          'setTextStyle',
          'setText',
          'getFont',
          'updateProps',
          'initProps',
          'getTransform',
          'clipPointsByRect',
          'clipRectByRect',
          'registerShape',
          'getShapeClass',
          'Group',
          'Image',
          'Text',
          'Circle',
          'Sector',
          'Ring',
          'Polygon',
          'Polyline',
          'Rect',
          'Line',
          'BezierCurve',
          'Arc',
          'IncrementalDisplayable',
          'CompoundPath',
          'LinearGradient',
          'RadialGradient',
          'BoundingRect'
        ],
        function(e) {
          _[e] = l[e];
        }
      ),
        (t.parseGeoJson = y),
        (t.util = x),
        (t.graphic = _);
    },
    function(e, t, n) {
      var i = n(2),
        a = i.createHashMap,
        o = i.isObject,
        r = i.map;
      function s(e) {
        (this.categories = e.categories || []),
          (this._needCollect = e.needCollect),
          (this._deduplication = e.deduplication),
          this._map;
      }
      s.createByAxisModel = function(e) {
        var t = e.option,
          n = t.data,
          i = n && r(n, c);
        return new s({ categories: i, needCollect: !i, deduplication: !1 !== t.dedplication });
      };
      var l = s.prototype;
      function u(e) {
        return e._map || (e._map = a(e.categories));
      }
      function c(e) {
        return o(e) && null != e.value ? e.value : e + '';
      }
      (l.getOrdinal = function(e) {
        return u(this).get(e);
      }),
        (l.parseAndCollect = function(e) {
          var t,
            n = this._needCollect;
          if ('string' !== typeof e && !n) return e;
          if (n && !this._deduplication)
            return (t = this.categories.length), (this.categories[t] = e), t;
          var i = u(this);
          return (
            null == (t = i.get(e)) &&
              (n
                ? ((t = this.categories.length), (this.categories[t] = e), i.set(e, t))
                : (t = NaN)),
            t
          );
        });
      var h = s;
      e.exports = h;
    },
    function(e, t, n) {
      var i = n(16),
        a = i.round;
      function o(e) {
        return i.getPrecisionSafe(e) + 2;
      }
      function r(e, t, n) {
        e[t] = Math.max(Math.min(e[t], n[1]), n[0]);
      }
      function s(e, t) {
        !isFinite(e[0]) && (e[0] = t[0]),
          !isFinite(e[1]) && (e[1] = t[1]),
          r(e, 0, t),
          r(e, 1, t),
          e[0] > e[1] && (e[0] = e[1]);
      }
      (t.intervalScaleNiceTicks = function(e, t, n, r) {
        var l = {},
          u = e[1] - e[0],
          c = (l.interval = i.nice(u / t, !0));
        null != n && c < n && (c = l.interval = n), null != r && c > r && (c = l.interval = r);
        var h = (l.intervalPrecision = o(c));
        return (
          s(
            (l.niceTickExtent = [a(Math.ceil(e[0] / c) * c, h), a(Math.floor(e[1] / c) * c, h)]),
            e
          ),
          l
        );
      }),
        (t.getIntervalPrecision = o),
        (t.fixExtent = s),
        (t.intervalScaleGetTicks = function(e, t, n, i) {
          var o = [];
          if (!e) return o;
          t[0] < n[0] && o.push(t[0]);
          for (var r = n[0]; r <= n[1] && (o.push(r), (r = a(r + e, i)) !== o[o.length - 1]); )
            if (o.length > 1e4) return [];
          return t[1] > (o.length ? o[o.length - 1] : n[1]) && o.push(t[1]), o;
        });
    },
    function(e, t, n) {
      var i = n(2),
        a = n(198),
        o = n(16),
        r = n(199),
        s = a.prototype,
        l = r.prototype,
        u = o.getPrecisionSafe,
        c = o.round,
        h = Math.floor,
        d = Math.ceil,
        p = Math.pow,
        g = Math.log,
        f = a.extend({
          type: 'log',
          base: 10,
          $constructor: function() {
            a.apply(this, arguments), (this._originalScale = new r());
          },
          getTicks: function() {
            var e = this._originalScale,
              t = this._extent,
              n = e.getExtent();
            return i.map(
              l.getTicks.call(this),
              function(i) {
                var a = o.round(p(this.base, i));
                return (
                  (a = i === t[0] && e.__fixMin ? m(a, n[0]) : a),
                  (a = i === t[1] && e.__fixMax ? m(a, n[1]) : a)
                );
              },
              this
            );
          },
          getLabel: l.getLabel,
          scale: function(e) {
            return (e = s.scale.call(this, e)), p(this.base, e);
          },
          setExtent: function(e, t) {
            var n = this.base;
            (e = g(e) / g(n)), (t = g(t) / g(n)), l.setExtent.call(this, e, t);
          },
          getExtent: function() {
            var e = this.base,
              t = s.getExtent.call(this);
            (t[0] = p(e, t[0])), (t[1] = p(e, t[1]));
            var n = this._originalScale,
              i = n.getExtent();
            return n.__fixMin && (t[0] = m(t[0], i[0])), n.__fixMax && (t[1] = m(t[1], i[1])), t;
          },
          unionExtent: function(e) {
            this._originalScale.unionExtent(e);
            var t = this.base;
            (e[0] = g(e[0]) / g(t)), (e[1] = g(e[1]) / g(t)), s.unionExtent.call(this, e);
          },
          unionExtentFromData: function(e, t) {
            this.unionExtent(e.getApproximateExtent(t));
          },
          niceTicks: function(e) {
            e = e || 10;
            var t = this._extent,
              n = t[1] - t[0];
            if (!(n === 1 / 0 || n <= 0)) {
              var i = o.quantity(n);
              for (
                (e / n) * i <= 0.5 && (i *= 10);
                !isNaN(i) && Math.abs(i) < 1 && Math.abs(i) > 0;

              )
                i *= 10;
              var a = [o.round(d(t[0] / i) * i), o.round(h(t[1] / i) * i)];
              (this._interval = i), (this._niceExtent = a);
            }
          },
          niceExtent: function(e) {
            l.niceExtent.call(this, e);
            var t = this._originalScale;
            (t.__fixMin = e.fixMin), (t.__fixMax = e.fixMax);
          }
        });
      function m(e, t) {
        return c(e, u(t));
      }
      i.each(['contain', 'normalize'], function(e) {
        f.prototype[e] = function(t) {
          return (t = g(t) / g(this.base)), s[e].call(this, t);
        };
      }),
        (f.create = function() {
          return new f();
        });
      var v = f;
      e.exports = v;
    },
    function(e, t, n) {
      var i = n(2),
        a = n(424);
      function o(e, t, n) {
        for (var i = [], a = t[0], o = t[1], r = 0; r < e.length; r += 2) {
          var s = e.charCodeAt(r) - 64,
            l = e.charCodeAt(r + 1) - 64;
          (s = (s >> 1) ^ -(1 & s)),
            (l = (l >> 1) ^ -(1 & l)),
            (a = s += a),
            (o = l += o),
            i.push([s / n, l / n]);
        }
        return i;
      }
      e.exports = function(e) {
        return (
          (function(e) {
            if (!e.UTF8Encoding) return e;
            var t = e.UTF8Scale;
            null == t && (t = 1024);
            for (var n = e.features, i = 0; i < n.length; i++)
              for (
                var a = n[i].geometry, r = a.coordinates, s = a.encodeOffsets, l = 0;
                l < r.length;
                l++
              ) {
                var u = r[l];
                if ('Polygon' === a.type) r[l] = o(u, s[l], t);
                else if ('MultiPolygon' === a.type)
                  for (var c = 0; c < u.length; c++) {
                    var h = u[c];
                    u[c] = o(h, s[l][c], t);
                  }
              }
            e.UTF8Encoding = !1;
          })(e),
          i.map(
            i.filter(e.features, function(e) {
              return e.geometry && e.properties && e.geometry.coordinates.length > 0;
            }),
            function(e) {
              var t = e.properties,
                n = e.geometry,
                o = n.coordinates,
                r = [];
              'Polygon' === n.type &&
                r.push({ type: 'polygon', exterior: o[0], interiors: o.slice(1) }),
                'MultiPolygon' === n.type &&
                  i.each(o, function(e) {
                    e[0] && r.push({ type: 'polygon', exterior: e[0], interiors: e.slice(1) });
                  });
              var s = new a(t.name, r, t.cp);
              return (s.properties = t), s;
            }
          )
        );
      };
    },
    function(e, t, n) {
      var i = n(29),
        a = n(194),
        o = n(28),
        r = n(425);
      function s(e, t, n) {
        if (((this.name = e), (this.geometries = t), n)) n = [n[0], n[1]];
        else {
          var i = this.getBoundingRect();
          n = [i.x + i.width / 2, i.y + i.height / 2];
        }
        this.center = n;
      }
      s.prototype = {
        constructor: s,
        properties: null,
        getBoundingRect: function() {
          var e = this._rect;
          if (e) return e;
          for (
            var t = Number.MAX_VALUE,
              n = [t, t],
              r = [-t, -t],
              s = [],
              l = [],
              u = this.geometries,
              c = 0;
            c < u.length;
            c++
          )
            if ('polygon' === u[c].type) {
              var h = u[c].exterior;
              a.fromPoints(h, s, l), o.min(n, n, s), o.max(r, r, l);
            }
          return (
            0 === c && (n[0] = n[1] = r[0] = r[1] = 0),
            (this._rect = new i(n[0], n[1], r[0] - n[0], r[1] - n[1]))
          );
        },
        contain: function(e) {
          var t = this.getBoundingRect(),
            n = this.geometries;
          if (!t.contain(e[0], e[1])) return !1;
          e: for (var i = 0, a = n.length; i < a; i++)
            if ('polygon' === n[i].type) {
              var o = n[i].exterior,
                s = n[i].interiors;
              if (r.contain(o, e[0], e[1])) {
                for (var l = 0; l < (s ? s.length : 0); l++) if (r.contain(s[l])) continue e;
                return !0;
              }
            }
          return !1;
        },
        transformTo: function(e, t, n, a) {
          var r = this.getBoundingRect(),
            s = r.width / r.height;
          n ? a || (a = n / s) : (n = s * a);
          for (
            var l = new i(e, t, n, a), u = r.calculateTransform(l), c = this.geometries, h = 0;
            h < c.length;
            h++
          )
            if ('polygon' === c[h].type) {
              for (var d = c[h].exterior, p = c[h].interiors, g = 0; g < d.length; g++)
                o.applyTransform(d[g], d[g], u);
              for (var f = 0; f < (p ? p.length : 0); f++)
                for (g = 0; g < p[f].length; g++) o.applyTransform(p[f][g], p[f][g], u);
            }
          (r = this._rect).copy(l), (this.center = [r.x + r.width / 2, r.y + r.height / 2]);
        },
        cloneShallow: function(e) {
          null == e && (e = this.name);
          var t = new s(e, this.geometries, this.center);
          return (t._rect = this._rect), (t.transformTo = null), t;
        }
      };
      var l = s;
      e.exports = l;
    },
    ,
    function(e, t, n) {
      var i = n(72).isDimensionStacked,
        a = n(2).map;
      (t.prepareDataCoordInfo = function(e, t, n) {
        var o,
          r = e.getBaseAxis(),
          s = e.getOtherAxis(r),
          l = (function(e, t) {
            var n = 0,
              i = e.scale.getExtent();
            'start' === t
              ? (n = i[0])
              : 'end' === t
              ? (n = i[1])
              : i[0] > 0
              ? (n = i[0])
              : i[1] < 0 && (n = i[1]);
            return n;
          })(s, n),
          u = r.dim,
          c = s.dim,
          h = t.mapDimension(c),
          d = t.mapDimension(u),
          p = 'x' === c || 'radius' === c ? 1 : 0,
          g = a(e.dimensions, function(e) {
            return t.mapDimension(e);
          }),
          f = t.getCalculationInfo('stackResultDimension');
        return (
          (o |= i(t, g[0])) && (g[0] = f),
          (o |= i(t, g[1])) && (g[1] = f),
          {
            dataDimsForPoint: g,
            valueStart: l,
            valueAxisDim: c,
            baseAxisDim: u,
            stacked: !!o,
            valueDim: h,
            baseDim: d,
            baseDataOffset: p,
            stackedOverDimension: t.getCalculationInfo('stackedOverDimension')
          }
        );
      }),
        (t.getStackedOnPoint = function(e, t, n, i) {
          var a = NaN;
          e.stacked && (a = n.get(n.getCalculationInfo('stackedOverDimension'), i)),
            isNaN(a) && (a = e.valueStart);
          var o = e.baseDataOffset,
            r = [];
          return (r[o] = n.get(e.baseDim, i)), (r[1 - o] = a), t.dataToPoint(r);
        });
    },
    function(e, t, n) {
      var i = n(33),
        a = n(28),
        o = n(410),
        r = a.min,
        s = a.max,
        l = a.scaleAndAdd,
        u = a.copy,
        c = [],
        h = [],
        d = [];
      function p(e) {
        return isNaN(e[0]) || isNaN(e[1]);
      }
      function g(e, t, n, i, a, o, r, s, l, u, c) {
        return 'none' !== u && u ? f.apply(this, arguments) : m.apply(this, arguments);
      }
      function f(e, t, n, i, a, o, r, s, l, c, g) {
        for (var f = 0, m = n, v = 0; v < i; v++) {
          var y = t[m];
          if (m >= a || m < 0) break;
          if (p(y)) {
            if (g) {
              m += o;
              continue;
            }
            break;
          }
          if (m === n) e[o > 0 ? 'moveTo' : 'lineTo'](y[0], y[1]);
          else if (l > 0) {
            var x = t[f],
              _ = 'y' === c ? 1 : 0,
              b = (y[_] - x[_]) * l;
            u(h, x),
              (h[_] = x[_] + b),
              u(d, y),
              (d[_] = y[_] - b),
              e.bezierCurveTo(h[0], h[1], d[0], d[1], y[0], y[1]);
          } else e.lineTo(y[0], y[1]);
          (f = m), (m += o);
        }
        return v;
      }
      function m(e, t, n, i, o, g, f, m, v, y, x) {
        for (var _ = 0, b = n, S = 0; S < i; S++) {
          var w = t[b];
          if (b >= o || b < 0) break;
          if (p(w)) {
            if (x) {
              b += g;
              continue;
            }
            break;
          }
          if (b === n) e[g > 0 ? 'moveTo' : 'lineTo'](w[0], w[1]), u(h, w);
          else if (v > 0) {
            var M = b + g,
              I = t[M];
            if (x) for (; I && p(t[M]); ) I = t[(M += g)];
            var A = 0.5,
              T = t[_];
            if (!(I = t[M]) || p(I)) u(d, w);
            else {
              var D, C;
              if ((p(I) && !x && (I = w), a.sub(c, I, T), 'x' === y || 'y' === y)) {
                var L = 'x' === y ? 0 : 1;
                (D = Math.abs(w[L] - T[L])), (C = Math.abs(w[L] - I[L]));
              } else (D = a.dist(w, T)), (C = a.dist(w, I));
              l(d, w, c, -v * (1 - (A = C / (C + D))));
            }
            r(h, h, m),
              s(h, h, f),
              r(d, d, m),
              s(d, d, f),
              e.bezierCurveTo(h[0], h[1], d[0], d[1], w[0], w[1]),
              l(h, w, c, v * A);
          } else e.lineTo(w[0], w[1]);
          (_ = b), (b += g);
        }
        return S;
      }
      function v(e, t) {
        var n = [1 / 0, 1 / 0],
          i = [-1 / 0, -1 / 0];
        if (t)
          for (var a = 0; a < e.length; a++) {
            var o = e[a];
            o[0] < n[0] && (n[0] = o[0]),
              o[1] < n[1] && (n[1] = o[1]),
              o[0] > i[0] && (i[0] = o[0]),
              o[1] > i[1] && (i[1] = o[1]);
          }
        return { min: t ? n : i, max: t ? i : n };
      }
      var y = i.extend({
          type: 'ec-polyline',
          shape: {
            points: [],
            smooth: 0,
            smoothConstraint: !0,
            smoothMonotone: null,
            connectNulls: !1
          },
          style: { fill: null, stroke: '#000' },
          brush: o(i.prototype.brush),
          buildPath: function(e, t) {
            var n = t.points,
              i = 0,
              a = n.length,
              o = v(n, t.smoothConstraint);
            if (t.connectNulls) {
              for (; a > 0 && p(n[a - 1]); a--);
              for (; i < a && p(n[i]); i++);
            }
            for (; i < a; )
              i +=
                g(e, n, i, a, a, 1, o.min, o.max, t.smooth, t.smoothMonotone, t.connectNulls) + 1;
          }
        }),
        x = i.extend({
          type: 'ec-polygon',
          shape: {
            points: [],
            stackedOnPoints: [],
            smooth: 0,
            stackedOnSmooth: 0,
            smoothConstraint: !0,
            smoothMonotone: null,
            connectNulls: !1
          },
          brush: o(i.prototype.brush),
          buildPath: function(e, t) {
            var n = t.points,
              i = t.stackedOnPoints,
              a = 0,
              o = n.length,
              r = t.smoothMonotone,
              s = v(n, t.smoothConstraint),
              l = v(i, t.smoothConstraint);
            if (t.connectNulls) {
              for (; o > 0 && p(n[o - 1]); o--);
              for (; a < o && p(n[a]); a++);
            }
            for (; a < o; ) {
              var u = g(e, n, a, o, o, 1, s.min, s.max, t.smooth, r, t.connectNulls);
              g(e, i, a + u - 1, u, o, -1, l.min, l.max, t.stackedOnSmooth, r, t.connectNulls),
                (a += u + 1),
                e.closePath();
            }
          }
        });
      (t.Polyline = y), (t.Polygon = x);
    },
    function(e, t, n) {
      var i = n(2),
        a = n(37),
        o = n(202),
        r = n(124),
        s = a.extend({
          type: 'cartesian2dAxis',
          axis: null,
          init: function() {
            s.superApply(this, 'init', arguments), this.resetRange();
          },
          mergeOption: function() {
            s.superApply(this, 'mergeOption', arguments), this.resetRange();
          },
          restoreData: function() {
            s.superApply(this, 'restoreData', arguments), this.resetRange();
          },
          getCoordSysModel: function() {
            return this.ecModel.queryComponents({
              mainType: 'grid',
              index: this.option.gridIndex,
              id: this.option.gridId
            })[0];
          }
        });
      function l(e, t) {
        return t.type || (t.data ? 'category' : 'value');
      }
      i.merge(s.prototype, r);
      var u = { offset: 0 };
      o('x', s, l, u), o('y', s, l, u);
      var c = s;
      e.exports = c;
    },
    function(e, t, n) {
      var i = n(2),
        a = {
          show: !0,
          zlevel: 0,
          z: 0,
          inverse: !1,
          name: '',
          nameLocation: 'end',
          nameRotate: null,
          nameTruncate: { maxWidth: null, ellipsis: '...', placeholder: '.' },
          nameTextStyle: {},
          nameGap: 15,
          silent: !1,
          triggerEvent: !1,
          tooltip: { show: !1 },
          axisPointer: {},
          axisLine: {
            show: !0,
            onZero: !0,
            onZeroAxisIndex: null,
            lineStyle: { color: '#333', width: 1, type: 'solid' },
            symbol: ['none', 'none'],
            symbolSize: [10, 15]
          },
          axisTick: { show: !0, inside: !1, length: 5, lineStyle: { width: 1 } },
          axisLabel: {
            show: !0,
            inside: !1,
            rotate: 0,
            showMinLabel: null,
            showMaxLabel: null,
            margin: 8,
            fontSize: 12
          },
          splitLine: { show: !0, lineStyle: { color: ['#ccc'], width: 1, type: 'solid' } },
          splitArea: {
            show: !1,
            areaStyle: { color: ['rgba(250,250,250,0.3)', 'rgba(200,200,200,0.3)'] }
          }
        },
        o = {};
      (o.categoryAxis = i.merge(
        {
          boundaryGap: !0,
          deduplication: null,
          splitLine: { show: !1 },
          axisTick: { alignWithLabel: !1, interval: 'auto' },
          axisLabel: { interval: 'auto' }
        },
        a
      )),
        (o.valueAxis = i.merge({ boundaryGap: [0, 0], splitNumber: 5 }, a)),
        (o.timeAxis = i.defaults({ scale: !0, min: 'dataMin', max: 'dataMax' }, o.valueAxis)),
        (o.logAxis = i.defaults({ scale: !0, logBase: 10 }, o.valueAxis));
      var r = o;
      e.exports = r;
    },
    function(e, t, n) {
      var i = n(2);
      t.layout = function(e, t, n) {
        n = n || {};
        var a = e.coordinateSystem,
          o = t.axis,
          r = {},
          s = o.getAxesOnZeroOf()[0],
          l = o.position,
          u = s ? 'onZero' : l,
          c = o.dim,
          h = a.getRect(),
          d = [h.x, h.x + h.width, h.y, h.y + h.height],
          p = { left: 0, right: 1, top: 0, bottom: 1, onZero: 2 },
          g = t.get('offset') || 0,
          f = 'x' === c ? [d[2] - g, d[3] + g] : [d[0] - g, d[1] + g];
        if (s) {
          var m = s.toGlobalCoord(s.dataToCoord(0));
          f[p.onZero] = Math.max(Math.min(m, f[1]), f[0]);
        }
        (r.position = ['y' === c ? f[p[u]] : d[0], 'x' === c ? f[p[u]] : d[3]]),
          (r.rotation = (Math.PI / 2) * ('x' === c ? 0 : 1)),
          (r.labelDirection = r.tickDirection = r.nameDirection = {
            top: -1,
            bottom: 1,
            left: -1,
            right: 1
          }[l]),
          (r.labelOffset = s ? f[p[l]] - f[p.onZero] : 0),
          t.get('axisTick.inside') && (r.tickDirection = -r.tickDirection),
          i.retrieve(n.labelInside, t.get('axisLabel.inside')) &&
            (r.labelDirection = -r.labelDirection);
        var v = t.get('axisLabel.rotate');
        return (r.labelRotate = 'top' === u ? -v : v), (r.z2 = 1), r;
      };
    },
    function(e, t, n) {
      var i = n(38),
        a = n(79),
        o = i.extend({
          type: 'series.__base_bar__',
          getInitialData: function(e, t) {
            return a(this.getSource(), this);
          },
          getMarkerPosition: function(e) {
            var t = this.coordinateSystem;
            if (t) {
              var n = t.dataToPoint(t.clampData(e)),
                i = this.getData(),
                a = i.getLayout('offset'),
                o = i.getLayout('size');
              return (n[t.getBaseAxis().isHorizontal() ? 0 : 1] += a + o / 2), n;
            }
            return [NaN, NaN];
          },
          defaultOption: {
            zlevel: 0,
            z: 2,
            coordinateSystem: 'cartesian2d',
            legendHoverLink: !0,
            barMinHeight: 0,
            barMinAngle: 0,
            large: !1,
            largeThreshold: 400,
            progressive: 3e3,
            progressiveChunkMode: 'mod',
            itemStyle: {},
            emphasis: {}
          }
        });
      e.exports = o;
    },
    function(e, t, n) {
      var i = n(6),
        a = n(295).getDefaultLabel;
      function o(e, t) {
        'outside' === e.textPosition && (e.textPosition = t);
      }
      t.setLabel = function(e, t, n, r, s, l, u) {
        var c = n.getModel('label'),
          h = n.getModel('emphasis.label');
        i.setLabelStyle(e, t, c, h, {
          labelFetcher: s,
          labelDataIndex: l,
          defaultText: a(s.getData(), l),
          isRectText: !0,
          autoColor: r
        }),
          o(e),
          o(t);
      };
    },
    function(e, t, n) {
      var i = n(4),
        a = n(2);
      e.exports = function(e, t) {
        a.each(t, function(t) {
          (t.update = 'updateView'),
            i.registerAction(t, function(n, i) {
              var a = {};
              return (
                i.eachComponent({ mainType: 'series', subType: e, query: n }, function(e) {
                  e[t.method] && e[t.method](n.name, n.dataIndex);
                  var i = e.getData();
                  i.each(function(t) {
                    var n = i.getName(t);
                    a[n] = e.isSelected(n) || !1;
                  });
                }),
                { name: n.name, selected: a, seriesId: n.seriesId }
              );
            });
        });
      };
    },
    function(e, t, n) {
      var i = n(2),
        a = n(158),
        o = n(298),
        r = n(206).onIrrelevantElement,
        s = n(6),
        l = n(205),
        u = n(149).getUID;
      function c(e) {
        var t = e.getItemStyle(),
          n = e.get('areaColor');
        return null != n && (t.fill = n), t;
      }
      function h(e, t) {
        t.eachChild(function(t) {
          i.each(t.__regions, function(n) {
            t.trigger(e.isSelected(n.name) ? 'emphasis' : 'normal');
          });
        });
      }
      function d(e, t) {
        var n = new s.Group();
        (this.uid = u('ec_map_draw')),
          (this._controller = new a(e.getZr())),
          (this._controllerHost = { target: t ? n : null }),
          (this.group = n),
          (this._updateGroup = t),
          this._mouseDownFlag,
          this._mapName,
          this._initialized,
          n.add((this._regionsGroup = new s.Group())),
          n.add((this._backgroundGroup = new s.Group()));
      }
      d.prototype = {
        constructor: d,
        draw: function(e, t, n, a, o) {
          var r = 'geo' === e.mainType,
            l = e.getData && e.getData();
          r &&
            t.eachComponent({ mainType: 'series', subType: 'map' }, function(t) {
              l || t.getHostGeoModel() !== e || (l = t.getData());
            });
          var u = e.coordinateSystem;
          this._updateBackground(u);
          var d = this._regionsGroup,
            p = this.group;
          u._roamTransformable.transform &&
            ((p.transform = u._roamTransformable.transform.slice()), p.decomposeTransform());
          var g = u._rawTransformable.scale,
            f = u._rawTransformable.position;
          d.removeAll();
          var m = ['itemStyle'],
            v = ['emphasis', 'itemStyle'],
            y = ['label'],
            x = ['emphasis', 'label'],
            _ = i.createHashMap();
          i.each(u.regions, function(t) {
            var n = _.get(t.name) || _.set(t.name, new s.Group()),
              a = new s.CompoundPath({ segmentIgnoreThreshold: 1, shape: { paths: [] } });
            n.add(a);
            var o,
              u = (N = e.getRegionModel(t.name) || e).getModel(m),
              h = N.getModel(v),
              b = c(u),
              S = c(h),
              w = N.getModel(y),
              M = N.getModel(x);
            if (l) {
              o = l.indexOfName(t.name);
              var I = l.getItemVisual(o, 'color', !0);
              I && (b.fill = I);
            }
            var A = function(e) {
              return [e[0] * g[0] + f[0], e[1] * g[1] + f[1]];
            };
            i.each(t.geometries, function(e) {
              if ('polygon' === e.type) {
                for (var t = [], n = 0; n < e.exterior.length; ++n) t.push(A(e.exterior[n]));
                a.shape.paths.push(
                  new s.Polygon({ segmentIgnoreThreshold: 1, shape: { points: t } })
                );
                for (n = 0; n < (e.interiors ? e.interiors.length : 0); ++n) {
                  for (var i = e.interiors[n], o = ((t = []), 0); o < i.length; ++o)
                    t.push(A(i[o]));
                  a.shape.paths.push(
                    new s.Polygon({ segmentIgnoreThreshold: 1, shape: { points: t } })
                  );
                }
              }
            }),
              a.setStyle(b),
              (a.style.strokeNoScale = !0),
              (a.culling = !0);
            var T = w.get('show'),
              D = M.get('show'),
              C = l && isNaN(l.get(l.mapDimension('value'), o)),
              L = l && l.getItemLayout(o);
            if (r || (C && (T || D)) || (L && L.showLabel)) {
              var P,
                O = r ? t.name : o;
              (!l || o >= 0) && (P = e);
              var k = new s.Text({
                position: A(t.center.slice()),
                scale: [1 / p.scale[0], 1 / p.scale[1]],
                z2: 10,
                silent: !0
              });
              s.setLabelStyle(
                k.style,
                (k.hoverStyle = {}),
                w,
                M,
                { labelFetcher: P, labelDataIndex: O, defaultText: t.name, useInsideStyle: !1 },
                { textAlign: 'center', textVerticalAlign: 'middle' }
              ),
                n.add(k);
            }
            if (l) l.setItemGraphicEl(o, n);
            else {
              var N = e.getRegionModel(t.name);
              a.eventData = {
                componentType: 'geo',
                componentIndex: e.componentIndex,
                geoIndex: e.componentIndex,
                name: t.name,
                region: (N && N.option) || {}
              };
            }
            (n.__regions || (n.__regions = [])).push(t),
              (n.highDownSilentOnTouch = !!e.get('selectedMode')),
              s.setHoverStyle(n, S),
              d.add(n);
          }),
            this._updateController(e, t, n),
            (function(e, t, n, a, o) {
              n.off('click'),
                n.off('mousedown'),
                t.get('selectedMode') &&
                  (n.on('mousedown', function() {
                    e._mouseDownFlag = !0;
                  }),
                  n.on('click', function(r) {
                    if (e._mouseDownFlag) {
                      e._mouseDownFlag = !1;
                      for (var s = r.target; !s.__regions; ) s = s.parent;
                      if (s) {
                        var l = {
                          type: ('geo' === t.mainType ? 'geo' : 'map') + 'ToggleSelect',
                          batch: i.map(s.__regions, function(e) {
                            return { name: e.name, from: o.uid };
                          })
                        };
                        (l[t.mainType + 'Id'] = t.id), a.dispatchAction(l), h(t, n);
                      }
                    }
                  }));
            })(this, e, d, n, a),
            h(e, d);
        },
        remove: function() {
          this._regionsGroup.removeAll(),
            this._backgroundGroup.removeAll(),
            this._controller.dispose(),
            this._mapName && l.removeGraphic(this._mapName, this.uid),
            (this._mapName = null),
            (this._controllerHost = {});
        },
        _updateBackground: function(e) {
          var t = e.map;
          this._mapName !== t &&
            i.each(
              l.makeGraphic(t, this.uid),
              function(e) {
                this._backgroundGroup.add(e);
              },
              this
            ),
            (this._mapName = t);
        },
        _updateController: function(e, t, n) {
          var a = e.coordinateSystem,
            s = this._controller,
            l = this._controllerHost;
          (l.zoomLimit = e.get('scaleLimit')),
            (l.zoom = a.getZoom()),
            s.enable(e.get('roam') || !1);
          var u = e.mainType;
          function c() {
            var t = { type: 'geoRoam', componentType: u };
            return (t[u + 'Id'] = e.id), t;
          }
          s.off('pan').on(
            'pan',
            function(e) {
              (this._mouseDownFlag = !1),
                o.updateViewOnPan(l, e.dx, e.dy),
                n.dispatchAction(i.extend(c(), { dx: e.dx, dy: e.dy }));
            },
            this
          ),
            s.off('zoom').on(
              'zoom',
              function(e) {
                if (
                  ((this._mouseDownFlag = !1),
                  o.updateViewOnZoom(l, e.scale, e.originX, e.originY),
                  n.dispatchAction(
                    i.extend(c(), { zoom: e.scale, originX: e.originX, originY: e.originY })
                  ),
                  this._updateGroup)
                ) {
                  var t = this.group.scale;
                  this._regionsGroup.traverse(function(e) {
                    'text' === e.type && e.attr('scale', [1 / t[0], 1 / t[1]]);
                  });
                }
              },
              this
            ),
            s.setPointerChecker(function(t, i, o) {
              return a.getViewRectAfterRoam().contain(i, o) && !r(t, n, e);
            });
        }
      };
      var p = d;
      e.exports = p;
    },
    function(e, t, n) {
      var i = n(4),
        a = '\0_ec_interaction_mutex';
      function o(e) {
        return e[a] || (e[a] = {});
      }
      i.registerAction(
        { type: 'takeGlobalCursor', event: 'globalCursorTaken', update: 'update' },
        function() {}
      ),
        (t.take = function(e, t, n) {
          o(e)[t] = n;
        }),
        (t.release = function(e, t, n) {
          var i = o(e);
          i[t] === n && (i[t] = null);
        }),
        (t.isTaken = function(e, t) {
          return !!o(e)[t];
        });
    },
    function(e, t, n) {
      var i = n(4),
        a = n(2),
        o = n(299).updateCenterAndZoom;
      i.registerAction({ type: 'geoRoam', event: 'geoRoam', update: 'updateTransform' }, function(
        e,
        t
      ) {
        var n = e.componentType || 'series';
        t.eachComponent({ mainType: n, query: e }, function(t) {
          var i = t.coordinateSystem;
          if ('geo' === i.type) {
            var r = o(i, e, t.get('scaleLimit'));
            t.setCenter && t.setCenter(r.center),
              t.setZoom && t.setZoom(r.zoom),
              'series' === n &&
                a.each(t.seriesGroup, function(e) {
                  e.setCenter(r.center), e.setZoom(r.zoom);
                });
          }
        });
      });
    },
    function(e, t, n) {
      var i = n(2),
        a = i.each,
        o = '\0__link_datas',
        r = '\0__link_mainData';
      function s(e, t) {
        if ((a = this)[r] === a) {
          var n = i.extend({}, this[o]);
          (n[this.dataType] = t), h(t, n, e);
        } else d(t, this.dataType, this[r], e);
        var a;
        return t;
      }
      function l(e, t) {
        return e.struct && e.struct.update(this), t;
      }
      function u(e, t) {
        return (
          a(t[o], function(n, i) {
            n !== t && d(n.cloneShallow(), i, t, e);
          }),
          t
        );
      }
      function c(e) {
        var t = this[r];
        return null == e || null == t ? t : t[o][e];
      }
      function h(e, t, n) {
        (e[o] = {}),
          a(t, function(t, i) {
            d(t, i, e, n);
          });
      }
      function d(e, t, n, i) {
        (n[o][t] = e),
          (e[r] = n),
          (e.dataType = t),
          i.struct && ((e[i.structAttr] = i.struct), (i.struct[i.datasAttr[t]] = e)),
          (e.getLinkedData = c);
      }
      var p = function(e) {
        var t = e.mainData,
          n = e.datas;
        n || ((n = { main: t }), (e.datasAttr = { main: 'data' })),
          (e.datas = e.mainData = null),
          h(t, n, e),
          a(n, function(n) {
            a(t.TRANSFERABLE_METHODS, function(t) {
              n.wrapMethod(t, i.curry(s, e));
            });
          }),
          t.wrapMethod('cloneShallow', i.curry(u, e)),
          a(t.CHANGABLE_METHODS, function(n) {
            t.wrapMethod(n, i.curry(l, e));
          }),
          i.assert(n[t.dataType] === t);
      };
      e.exports = p;
    },
    function(e, t, n) {
      var i = n(25);
      function a(e) {
        var t = e.children;
        return t.length && e.isExpand ? t[t.length - 1] : e.hierNode.thread;
      }
      function o(e) {
        var t = e.children;
        return t.length && e.isExpand ? t[0] : e.hierNode.thread;
      }
      function r(e, t, n) {
        return e.hierNode.ancestor.parentNode === t.parentNode ? e.hierNode.ancestor : n;
      }
      function s(e, t, n) {
        var i = n / (t.hierNode.i - e.hierNode.i);
        (t.hierNode.change -= i),
          (t.hierNode.shift += n),
          (t.hierNode.modifier += n),
          (t.hierNode.prelim += n),
          (e.hierNode.change += i);
      }
      function l(e, t) {
        return e.parentNode === t.parentNode ? 1 : 2;
      }
      (t.init = function(e) {
        e.hierNode = {
          defaultAncestor: null,
          ancestor: e,
          prelim: 0,
          modifier: 0,
          change: 0,
          shift: 0,
          i: 0,
          thread: null
        };
        for (var t, n, i = [e]; (t = i.pop()); )
          if (((n = t.children), t.isExpand && n.length))
            for (var a = n.length - 1; a >= 0; a--) {
              var o = n[a];
              (o.hierNode = {
                defaultAncestor: null,
                ancestor: o,
                prelim: 0,
                modifier: 0,
                change: 0,
                shift: 0,
                i: a,
                thread: null
              }),
                i.push(o);
            }
      }),
        (t.firstWalk = function(e, t) {
          var n = e.isExpand ? e.children : [],
            i = e.parentNode.children,
            l = e.hierNode.i ? i[e.hierNode.i - 1] : null;
          if (n.length) {
            !(function(e) {
              var t = e.children,
                n = t.length,
                i = 0,
                a = 0;
              for (; --n >= 0; ) {
                var o = t[n];
                (o.hierNode.prelim += i),
                  (o.hierNode.modifier += i),
                  (a += o.hierNode.change),
                  (i += o.hierNode.shift + a);
              }
            })(e);
            var u = (n[0].hierNode.prelim + n[n.length - 1].hierNode.prelim) / 2;
            l
              ? ((e.hierNode.prelim = l.hierNode.prelim + t(e, l)),
                (e.hierNode.modifier = e.hierNode.prelim - u))
              : (e.hierNode.prelim = u);
          } else l && (e.hierNode.prelim = l.hierNode.prelim + t(e, l));
          e.parentNode.hierNode.defaultAncestor = (function(e, t, n, i) {
            if (t) {
              for (
                var l = e,
                  u = e,
                  c = u.parentNode.children[0],
                  h = t,
                  d = l.hierNode.modifier,
                  p = u.hierNode.modifier,
                  g = c.hierNode.modifier,
                  f = h.hierNode.modifier;
                (h = a(h)), (u = o(u)), h && u;

              ) {
                (l = a(l)), (c = o(c)), (l.hierNode.ancestor = e);
                var m = h.hierNode.prelim + f - u.hierNode.prelim - p + i(h, u);
                m > 0 && (s(r(h, e, n), e, m), (p += m), (d += m)),
                  (f += h.hierNode.modifier),
                  (p += u.hierNode.modifier),
                  (d += l.hierNode.modifier),
                  (g += c.hierNode.modifier);
              }
              h && !a(l) && ((l.hierNode.thread = h), (l.hierNode.modifier += f - d)),
                u && !o(c) && ((c.hierNode.thread = u), (c.hierNode.modifier += p - g), (n = e));
            }
            return n;
          })(e, l, e.parentNode.hierNode.defaultAncestor || i[0], t);
        }),
        (t.secondWalk = function(e) {
          var t = e.hierNode.prelim + e.parentNode.hierNode.modifier;
          e.setLayout({ x: t }, !0), (e.hierNode.modifier += e.parentNode.hierNode.modifier);
        }),
        (t.separation = function(e) {
          return arguments.length ? e : l;
        }),
        (t.radialCoordinate = function(e, t) {
          var n = {};
          return (e -= Math.PI / 2), (n.x = t * Math.cos(e)), (n.y = t * Math.sin(e)), n;
        }),
        (t.getViewRect = function(e, t) {
          return i.getLayoutRect(e.getBoxLayoutParams(), {
            width: t.getWidth(),
            height: t.getHeight()
          });
        });
    },
    function(e, t, n) {
      var i = n(2),
        a = n(53),
        o = n(850),
        r = n(437),
        s = n(123),
        l = n(63),
        u = n(79);
      e.exports = function(e, t, n, c, h) {
        for (var d = new o(c), p = 0; p < e.length; p++)
          d.addNode(i.retrieve(e[p].id, e[p].name, p), p);
        var g = [],
          f = [],
          m = 0;
        for (p = 0; p < t.length; p++) {
          var v = t[p],
            y = v.source,
            x = v.target;
          d.addEdge(y, x, m) && (f.push(v), g.push(i.retrieve(v.id, y + ' > ' + x)), m++);
        }
        var _,
          b = n.get('coordinateSystem');
        if ('cartesian2d' === b || 'polar' === b) _ = u(e, n);
        else {
          var S = l.get(b),
            w = (S && 'view' !== S.type && S.dimensions) || [];
          i.indexOf(w, 'value') < 0 && w.concat(['value']);
          var M = s(e, { coordDimensions: w });
          (_ = new a(M, n)).initData(e);
        }
        var I = new a(['value'], n);
        return (
          I.initData(f, g),
          h && h(_, I),
          r({
            mainData: _,
            struct: d,
            structAttr: 'graph',
            datas: { node: _, edge: I },
            datasAttr: { node: 'data', edge: 'edgeData' }
          }),
          d.update(),
          d
        );
      };
    },
    function(e, t, n) {
      var i = n(4);
      i.registerAction(
        {
          type: 'focusNodeAdjacency',
          event: 'focusNodeAdjacency',
          update: 'series:focusNodeAdjacency'
        },
        function() {}
      ),
        i.registerAction(
          {
            type: 'unfocusNodeAdjacency',
            event: 'unfocusNodeAdjacency',
            update: 'series:unfocusNodeAdjacency'
          },
          function() {}
        );
    },
    function(e, t, n) {
      var i = n(28);
      function a(e) {
        e.eachEdge(function(e) {
          var t = e.getModel().get('lineStyle.curveness') || 0,
            n = i.clone(e.node1.getLayout()),
            a = i.clone(e.node2.getLayout()),
            o = [n, a];
          +t &&
            o.push([(n[0] + a[0]) / 2 - (n[1] - a[1]) * t, (n[1] + a[1]) / 2 - (a[0] - n[0]) * t]),
            e.setLayout(o);
        });
      }
      (t.simpleLayout = function(e) {
        var t = e.coordinateSystem;
        if (!t || 'view' === t.type) {
          var n = e.getGraph();
          n.eachNode(function(e) {
            var t = e.getModel();
            e.setLayout([+t.get('x'), +t.get('y')]);
          }),
            a(n);
        }
      }),
        (t.simpleLayoutEdge = a);
    },
    function(e, t, n) {
      var i = n(28),
        a = n(305),
        o = a.getSymbolSize,
        r = a.getNodeGlobalScale,
        s = Math.PI,
        l = [];
      var u = {
        value: function(e, t, n, i, a, o, r, s) {
          var l = 0,
            u = i.getSum('value'),
            c = (2 * Math.PI) / (u || s);
          n.eachNode(function(e) {
            var t = e.getValue('value'),
              n = (c * (u ? t : 1)) / 2;
            (l += n), e.setLayout([a * Math.cos(l) + o, a * Math.sin(l) + r]), (l += n);
          });
        },
        symbolSize: function(e, t, n, i, a, u, c, h) {
          var d = 0;
          l.length = h;
          var p = r(e);
          n.eachNode(function(e) {
            var t = o(e);
            isNaN(t) && (t = 2), t < 0 && (t = 0), (t *= p);
            var n = Math.asin(t / 2 / a);
            isNaN(n) && (n = s / 2), (l[e.dataIndex] = n), (d += 2 * n);
          });
          var g = (2 * s - d) / h / 2,
            f = 0;
          n.eachNode(function(e) {
            var t = g + l[e.dataIndex];
            (f += t), e.setLayout([a * Math.cos(f) + u, a * Math.sin(f) + c]), (f += t);
          });
        }
      };
      t.circularLayout = function(e, t) {
        var n = e.coordinateSystem;
        if (!n || 'view' === n.type) {
          var a = n.getBoundingRect(),
            o = e.getData(),
            r = o.graph,
            s = a.width / 2 + a.x,
            l = a.height / 2 + a.y,
            c = Math.min(a.width, a.height) / 2,
            h = o.count();
          o.setLayout({ cx: s, cy: l }),
            h &&
              (u[t](e, n, r, o, c, s, l, h),
              r.eachEdge(function(e) {
                var t,
                  n = e.getModel().get('lineStyle.curveness') || 0,
                  a = i.clone(e.node1.getLayout()),
                  o = i.clone(e.node2.getLayout()),
                  r = (a[0] + o[0]) / 2,
                  u = (a[1] + o[1]) / 2;
                +n && (t = [s * (n *= 3) + r * (1 - n), l * n + u * (1 - n)]),
                  e.setLayout([a, o, t]);
              }));
        }
      };
    },
    function(e, t, n) {
      var i = n(4),
        a = n(2),
        o = n(85),
        r = n(872);
      n(444), n(875), n(877);
      i.extendComponentView({
        type: 'parallel',
        render: function(e, t, n) {
          (this._model = e),
            (this._api = n),
            this._handlers ||
              ((this._handlers = {}),
              a.each(
                s,
                function(e, t) {
                  n.getZr().on(t, (this._handlers[t] = a.bind(e, this)));
                },
                this
              )),
            o.createOrUpdate(this, '_throttledDispatchExpand', e.get('axisExpandRate'), 'fixRate');
        },
        dispose: function(e, t) {
          a.each(this._handlers, function(e, n) {
            t.getZr().off(n, e);
          }),
            (this._handlers = null);
        },
        _throttledDispatchExpand: function(e) {
          this._dispatchExpand(e);
        },
        _dispatchExpand: function(e) {
          e && this._api.dispatchAction(a.extend({ type: 'parallelAxisExpand' }, e));
        }
      });
      var s = {
        mousedown: function(e) {
          l(this, 'click') && (this._mouseDownPoint = [e.offsetX, e.offsetY]);
        },
        mouseup: function(e) {
          var t = this._mouseDownPoint;
          if (l(this, 'click') && t) {
            var n = [e.offsetX, e.offsetY];
            if (Math.pow(t[0] - n[0], 2) + Math.pow(t[1] - n[1], 2) > 5) return;
            var i = this._model.coordinateSystem.getSlidedAxisExpandWindow([e.offsetX, e.offsetY]);
            'none' !== i.behavior && this._dispatchExpand({ axisExpandWindow: i.axisExpandWindow });
          }
          this._mouseDownPoint = null;
        },
        mousemove: function(e) {
          if (!this._mouseDownPoint && l(this, 'mousemove')) {
            var t = this._model,
              n = t.coordinateSystem.getSlidedAxisExpandWindow([e.offsetX, e.offsetY]),
              i = n.behavior;
            'jump' === i &&
              this._throttledDispatchExpand.debounceNextCall(t.get('axisExpandDebounce')),
              this._throttledDispatchExpand(
                'none' === i
                  ? null
                  : { axisExpandWindow: n.axisExpandWindow, animation: 'jump' === i && null }
              );
          }
        }
      };
      function l(e, t) {
        var n = e._model;
        return n.get('axisExpandable') && n.get('axisExpandTriggerOn') === t;
      }
      i.registerPreprocessor(r);
    },
    function(e, t, n) {
      var i = n(873);
      n(63).register('parallel', {
        create: function(e, t) {
          var n = [];
          return (
            e.eachComponent('parallel', function(a, o) {
              var r = new i(a, e, t);
              (r.name = 'parallel_' + o),
                r.resize(a, t),
                (a.coordinateSystem = r),
                (r.model = a),
                n.push(r);
            }),
            e.eachSeries(function(t) {
              if ('parallel' === t.get('coordinateSystem')) {
                var n = e.queryComponents({
                  mainType: 'parallel',
                  index: t.get('parallelIndex'),
                  id: t.get('parallelId')
                })[0];
                t.coordinateSystem = n.coordinateSystem;
              }
            }),
            n
          );
        }
      });
    },
    function(e, t, n) {
      var i = n(29),
        a = n(206).onIrrelevantElement,
        o = n(6);
      function r(e) {
        return i.create(e);
      }
      (t.makeRectPanelClipPath = function(e) {
        return (
          (e = r(e)),
          function(t, n) {
            return o.clipPointsByRect(t, e);
          }
        );
      }),
        (t.makeLinearBrushOtherExtent = function(e, t) {
          return (
            (e = r(e)),
            function(n) {
              var i = null != t ? t : n,
                a = i ? e.width : e.height,
                o = i ? e.x : e.y;
              return [o, o + (a || 0)];
            }
          );
        }),
        (t.makeRectIsTargetByCursor = function(e, t, n) {
          return (
            (e = r(e)),
            function(i, o, r) {
              return e.contain(o[0], o[1]) && !a(i, t, n);
            }
          );
        });
    },
    function(e, t, n) {
      var i = n(125),
        a = n(2),
        o = n(152).getDimensionTypeByAxis,
        r = {
          _baseAxisDim: null,
          getInitialData: function(e, t) {
            var n,
              r,
              s = t.getComponent('xAxis', this.get('xAxisIndex')),
              l = t.getComponent('yAxis', this.get('yAxisIndex')),
              u = s.get('type'),
              c = l.get('type');
            'category' === u
              ? ((e.layout = 'horizontal'), (n = s.getOrdinalMeta()), (r = !0))
              : 'category' === c
              ? ((e.layout = 'vertical'), (n = l.getOrdinalMeta()), (r = !0))
              : (e.layout = e.layout || 'horizontal');
            var h = ['x', 'y'],
              d = 'horizontal' === e.layout ? 0 : 1,
              p = (this._baseAxisDim = h[d]),
              g = h[1 - d],
              f = [s, l],
              m = f[d].get('type'),
              v = f[1 - d].get('type'),
              y = e.data;
            if (y && r) {
              var x = [];
              a.each(y, function(e, t) {
                var n;
                e.value && a.isArray(e.value)
                  ? ((n = e.value.slice()), e.value.unshift(t))
                  : a.isArray(e)
                  ? ((n = e.slice()), e.unshift(t))
                  : (n = e),
                  x.push(n);
              }),
                (e.data = x);
            }
            var _ = this.defaultValueDimensions;
            return i(this, {
              coordDimensions: [
                {
                  name: p,
                  type: o(m),
                  ordinalMeta: n,
                  otherDims: { tooltip: !1, itemName: 0 },
                  dimsDef: ['base']
                },
                { name: g, type: o(v), dimsDef: _.slice() }
              ],
              dimensionsCount: _.length + 1
            });
          },
          getBaseAxis: function() {
            var e = this._baseAxisDim;
            return this.ecModel.getComponent(e + 'Axis', this.get(e + 'AxisIndex')).axis;
          }
        };
      t.seriesModelMixin = r;
    },
    function(e, t, n) {
      var i = n(6),
        a = n(304),
        o = n(2),
        r = n(54).createSymbol,
        s = n(28),
        l = n(84);
      function u(e, t, n) {
        i.Group.call(this), this.add(this.createLine(e, t, n)), this._updateEffectSymbol(e, t);
      }
      var c = u.prototype;
      (c.createLine = function(e, t, n) {
        return new a(e, t, n);
      }),
        (c._updateEffectSymbol = function(e, t) {
          var n = e.getItemModel(t).getModel('effect'),
            i = n.get('symbolSize'),
            a = n.get('symbol');
          o.isArray(i) || (i = [i, i]);
          var s = n.get('color') || e.getItemVisual(t, 'color'),
            l = this.childAt(1);
          this._symbolType !== a &&
            (this.remove(l),
            ((l = r(a, -0.5, -0.5, 1, 1, s)).z2 = 100),
            (l.culling = !0),
            this.add(l)),
            l &&
              (l.setStyle('shadowColor', s),
              l.setStyle(n.getItemStyle(['color'])),
              l.attr('scale', i),
              l.setColor(s),
              l.attr('scale', i),
              (this._symbolType = a),
              this._updateEffectAnimation(e, n, t));
        }),
        (c._updateEffectAnimation = function(e, t, n) {
          var i = this.childAt(1);
          if (i) {
            var a = this,
              r = e.getItemLayout(n),
              s = 1e3 * t.get('period'),
              l = t.get('loop'),
              u = t.get('constantSpeed'),
              c = o.retrieve(t.get('delay'), function(t) {
                return ((t / e.count()) * s) / 3;
              }),
              h = 'function' === typeof c;
            if (
              ((i.ignore = !0),
              this.updateAnimationPoints(i, r),
              u > 0 && (s = (this.getLineLength(i) / u) * 1e3),
              s !== this._period || l !== this._loop)
            ) {
              i.stopAnimation();
              var d = c;
              h && (d = c(n)), i.__t > 0 && (d = -s * i.__t), (i.__t = 0);
              var p = i
                .animate('', l)
                .when(s, { __t: 1 })
                .delay(d)
                .during(function() {
                  a.updateSymbolPosition(i);
                });
              l ||
                p.done(function() {
                  a.remove(i);
                }),
                p.start();
            }
            (this._period = s), (this._loop = l);
          }
        }),
        (c.getLineLength = function(e) {
          return s.dist(e.__p1, e.__cp1) + s.dist(e.__cp1, e.__p2);
        }),
        (c.updateAnimationPoints = function(e, t) {
          (e.__p1 = t[0]),
            (e.__p2 = t[1]),
            (e.__cp1 = t[2] || [(t[0][0] + t[1][0]) / 2, (t[0][1] + t[1][1]) / 2]);
        }),
        (c.updateData = function(e, t, n) {
          this.childAt(0).updateData(e, t, n), this._updateEffectSymbol(e, t);
        }),
        (c.updateSymbolPosition = function(e) {
          var t = e.__p1,
            n = e.__p2,
            i = e.__cp1,
            a = e.__t,
            o = e.position,
            r = l.quadraticAt,
            s = l.quadraticDerivativeAt;
          (o[0] = r(t[0], i[0], n[0], a)), (o[1] = r(t[1], i[1], n[1], a));
          var u = s(t[0], i[0], n[0], a),
            c = s(t[1], i[1], n[1], a);
          (e.rotation = -Math.atan2(c, u) - Math.PI / 2), (e.ignore = !1);
        }),
        (c.updateLayout = function(e, t) {
          this.childAt(0).updateLayout(e, t);
          var n = e.getItemModel(t).getModel('effect');
          this._updateEffectAnimation(e, n, t);
        }),
        o.inherits(u, i.Group);
      var h = u;
      e.exports = h;
    },
    function(e, t, n) {
      var i = n(6),
        a = n(2);
      function o(e, t, n) {
        i.Group.call(this), this._createPolyline(e, t, n);
      }
      var r = o.prototype;
      (r._createPolyline = function(e, t, n) {
        var a = e.getItemLayout(t),
          o = new i.Polyline({ shape: { points: a } });
        this.add(o), this._updateCommonStl(e, t, n);
      }),
        (r.updateData = function(e, t, n) {
          var a = e.hostModel,
            o = this.childAt(0),
            r = { shape: { points: e.getItemLayout(t) } };
          i.updateProps(o, r, a, t), this._updateCommonStl(e, t, n);
        }),
        (r._updateCommonStl = function(e, t, n) {
          var o = this.childAt(0),
            r = e.getItemModel(t),
            s = e.getItemVisual(t, 'color'),
            l = n && n.lineStyle,
            u = n && n.hoverLineStyle;
          (n && !e.hasItemOption) ||
            ((l = r.getModel('lineStyle').getLineStyle()),
            (u = r.getModel('emphasis.lineStyle').getLineStyle())),
            o.useStyle(a.defaults({ strokeNoScale: !0, fill: 'none', stroke: s }, l)),
            (o.hoverStyle = u),
            i.setHoverStyle(this);
        }),
        (r.updateLayout = function(e, t) {
          this.childAt(0).setShape('points', e.getItemLayout(t));
        }),
        a.inherits(o, i.Group);
      var s = o;
      e.exports = s;
    },
    function(e, t, n) {
      var i = {
        seriesType: 'lines',
        plan: n(122)(),
        reset: function(e) {
          var t = e.coordinateSystem,
            n = e.get('polyline'),
            i = e.pipelineContext.large;
          return {
            progress: function(a, o) {
              var r = [];
              if (i) {
                var s,
                  l = a.end - a.start;
                if (n) {
                  for (var u = 0, c = a.start; c < a.end; c++) u += e.getLineCoordsCount(c);
                  s = new Float32Array(l + 2 * u);
                } else s = new Float32Array(4 * l);
                var h = 0,
                  d = [];
                for (c = a.start; c < a.end; c++) {
                  var p = e.getLineCoords(c, r);
                  n && (s[h++] = p);
                  for (var g = 0; g < p; g++)
                    (d = t.dataToPoint(r[g], !1, d)), (s[h++] = d[0]), (s[h++] = d[1]);
                }
                o.setLayout('linesPoints', s);
              } else
                for (c = a.start; c < a.end; c++) {
                  var f = o.getItemModel(c),
                    m = ((p = e.getLineCoords(c, r)), []);
                  if (n) for (var v = 0; v < p; v++) m.push(t.dataToPoint(r[v]));
                  else {
                    (m[0] = t.dataToPoint(r[0])), (m[1] = t.dataToPoint(r[1]));
                    var y = f.get('lineStyle.curveness');
                    +y &&
                      (m[2] = [
                        (m[0][0] + m[1][0]) / 2 - (m[0][1] - m[1][1]) * y,
                        (m[0][1] + m[1][1]) / 2 - (m[1][0] - m[0][0]) * y
                      ]);
                  }
                  o.setItemLayout(c, m);
                }
            }
          };
        }
      };
      e.exports = i;
    },
    function(e, t, n) {
      var i = n(4);
      n(918), n(921), n(922), n(159), n(926), i.extendComponentView({ type: 'single' });
    },
    function(e, t, n) {
      var i = n(2);
      t.layout = function(e, t) {
        t = t || {};
        var n = e.coordinateSystem,
          a = e.axis,
          o = {},
          r = a.position,
          s = a.orient,
          l = n.getRect(),
          u = [l.x, l.x + l.width, l.y, l.y + l.height],
          c = { horizontal: { top: u[2], bottom: u[3] }, vertical: { left: u[0], right: u[1] } };
        (o.position = [
          'vertical' === s ? c.vertical[r] : u[0],
          'horizontal' === s ? c.horizontal[r] : u[3]
        ]),
          (o.rotation = (Math.PI / 2) * { horizontal: 0, vertical: 1 }[s]),
          (o.labelDirection = o.tickDirection = o.nameDirection = {
            top: -1,
            bottom: 1,
            right: 1,
            left: -1
          }[r]),
          e.get('axisTick.inside') && (o.tickDirection = -o.tickDirection),
          i.retrieve(t.labelInside, e.get('axisLabel.inside')) &&
            (o.labelDirection = -o.labelDirection);
        var h = t.rotate;
        return (
          null == h && (h = e.get('axisLabel.rotate')),
          (o.labelRotation = 'top' === r ? -h : h),
          (o.z2 = 1),
          o
        );
      };
    },
    function(e, t, n) {
      var i = n(2),
        a = n(18);
      e.exports = function(e, t) {
        var n,
          o = [],
          r = e.seriesIndex;
        if (null == r || !(n = t.getSeriesByIndex(r))) return { point: [] };
        var s = n.getData(),
          l = a.queryDataIndex(s, e);
        if (null == l || l < 0 || i.isArray(l)) return { point: [] };
        var u = s.getItemGraphicEl(l),
          c = n.coordinateSystem;
        if (n.getTooltipPosition) o = n.getTooltipPosition(l) || [];
        else if (c && c.dataToPoint)
          o =
            c.dataToPoint(
              s.getValues(
                i.map(c.dimensions, function(e) {
                  return s.mapDimension(e);
                }),
                l,
                !0
              )
            ) || [];
        else if (u) {
          var h = u.getBoundingRect().clone();
          h.applyTransform(u.transform), (o = [h.x + h.width / 2, h.y + h.height / 2]);
        }
        return { point: o, el: u };
      };
    },
    function(e, t, n) {
      var i = n(2),
        a = n(35),
        o = (0, n(18).makeInner)(),
        r = i.each;
      function s(e, t, n) {
        e.handler('leave', null, n);
      }
      function l(e, t, n, i) {
        t.handler(e, n, i);
      }
      (t.register = function(e, t, n) {
        if (!a.node) {
          var u = t.getZr();
          o(u).records || (o(u).records = {}),
            (function(e, t) {
              if (o(e).initialized) return;
              function n(n, i) {
                e.on(n, function(n) {
                  var a = (function(e) {
                    var t = { showTip: [], hideTip: [] };
                    return {
                      dispatchAction: function n(i) {
                        var a = t[i.type];
                        a ? a.push(i) : ((i.dispatchAction = n), e.dispatchAction(i));
                      },
                      pendings: t
                    };
                  })(t);
                  r(o(e).records, function(e) {
                    e && i(e, n, a.dispatchAction);
                  }),
                    (function(e, t) {
                      var n,
                        i = e.showTip.length,
                        a = e.hideTip.length;
                      i ? (n = e.showTip[i - 1]) : a && (n = e.hideTip[a - 1]);
                      n && ((n.dispatchAction = null), t.dispatchAction(n));
                    })(a.pendings, t);
                });
              }
              (o(e).initialized = !0),
                n('click', i.curry(l, 'click')),
                n('mousemove', i.curry(l, 'mousemove')),
                n('globalout', s);
            })(u, t),
            ((o(u).records[e] || (o(u).records[e] = {})).handler = n);
        }
      }),
        (t.unregister = function(e, t) {
          if (!a.node) {
            var n = t.getZr();
            (o(n).records || {})[e] && (o(n).records[e] = null);
          }
        });
    },
    function(e, t, n) {
      var i = n(307),
        a = n(207),
        o = n(430),
        r = n(104),
        s = i.extend({
          makeElOption: function(e, t, n, i, r) {
            var s = n.axis,
              c = s.grid,
              h = i.get('type'),
              d = l(c, s)
                .getOtherAxis(s)
                .getGlobalExtent(),
              p = s.toGlobalCoord(s.dataToCoord(t, !0));
            if (h && 'none' !== h) {
              var g = a.buildElStyle(i),
                f = u[h](s, p, d);
              (f.style = g), (e.graphicKey = f.type), (e.pointer = f);
            }
            var m = o.layout(c.model, n);
            a.buildCartesianSingleLabelElOption(t, e, m, n, i, r);
          },
          getHandleTransform: function(e, t, n) {
            var i = o.layout(t.axis.grid.model, t, { labelInside: !1 });
            return (
              (i.labelMargin = n.get('handle.margin')),
              {
                position: a.getTransformedPosition(t.axis, e, i),
                rotation: i.rotation + (i.labelDirection < 0 ? Math.PI : 0)
              }
            );
          },
          updateHandleTransform: function(e, t, n, i) {
            var a = n.axis,
              o = a.grid,
              r = a.getGlobalExtent(!0),
              s = l(o, a)
                .getOtherAxis(a)
                .getGlobalExtent(),
              u = 'x' === a.dim ? 0 : 1,
              c = e.position;
            (c[u] += t[u]), (c[u] = Math.min(r[1], c[u])), (c[u] = Math.max(r[0], c[u]));
            var h = (s[1] + s[0]) / 2,
              d = [h, h];
            d[u] = c[u];
            return {
              position: c,
              rotation: e.rotation,
              cursorPoint: d,
              tooltipOption: [{ verticalAlign: 'middle' }, { align: 'center' }][u]
            };
          }
        });
      function l(e, t) {
        var n = {};
        return (n[t.dim + 'AxisIndex'] = t.index), e.getCartesian(n);
      }
      var u = {
        line: function(e, t, n) {
          return {
            type: 'Line',
            subPixelOptimize: !0,
            shape: a.makeLineShape([t, n[0]], [t, n[1]], c(e))
          };
        },
        shadow: function(e, t, n) {
          var i = Math.max(1, e.getBandWidth()),
            o = n[1] - n[0];
          return { type: 'Rect', shape: a.makeRectShape([t - i / 2, n[0]], [i, o], c(e)) };
        }
      };
      function c(e) {
        return 'x' === e.dim ? 0 : 1;
      }
      r.registerAxisPointerClass('CartesianAxisPointer', s);
      var h = s;
      e.exports = h;
    },
    function(e, t, n) {
      var i = n(25),
        a = i.getLayoutRect,
        o = i.box,
        r = i.positionElement,
        s = n(30),
        l = n(6);
      (t.layout = function(e, t, n) {
        var i = t.getBoxLayoutParams(),
          s = t.get('padding'),
          l = { width: n.getWidth(), height: n.getHeight() },
          u = a(i, l, s);
        o(t.get('orient'), e, t.get('itemGap'), u.width, u.height), r(e, i, l, s);
      }),
        (t.makeBackground = function(e, t) {
          var n = s.normalizeCssArray(t.get('padding')),
            i = t.getItemStyle(['color', 'opacity']);
          return (
            (i.fill = t.get('backgroundColor')),
            (e = new l.Rect({
              shape: {
                x: e.x - n[3],
                y: e.y - n[0],
                width: e.width + n[1] + n[3],
                height: e.height + n[0] + n[2],
                r: t.get('borderRadius')
              },
              style: i,
              silent: !0,
              z2: -1
            }))
          );
        });
    },
    function(e, t, n) {
      n(23).__DEV__;
      var i = n(2),
        a = n(6),
        o = n(18),
        r = n(445),
        s = i.each,
        l = i.indexOf,
        u = i.curry,
        c = ['dataToPoint', 'pointToData'],
        h = ['grid', 'xAxis', 'yAxis', 'geo', 'graph', 'polar', 'radiusAxis', 'angleAxis', 'bmap'];
      function d(e, t, n) {
        var i = (this._targetInfoList = []),
          a = {},
          o = f(t, e);
        s(m, function(e, t) {
          (!n || !n.include || l(n.include, t) >= 0) && e(o, i, a);
        });
      }
      var p = d.prototype;
      function g(e) {
        return e[0] > e[1] && e.reverse(), e;
      }
      function f(e, t) {
        return o.parseFinder(e, t, { includeMainTypes: h });
      }
      (p.setOutputRanges = function(e, t) {
        this.matchOutputRanges(e, t, function(e, t, n) {
          if (((e.coordRanges || (e.coordRanges = [])).push(t), !e.coordRange)) {
            e.coordRange = t;
            var i = x[e.brushType](0, n, t);
            e.__rangeOffset = {
              offset: b[e.brushType](i.values, e.range, [1, 1]),
              xyMinMax: i.xyMinMax
            };
          }
        });
      }),
        (p.matchOutputRanges = function(e, t, n) {
          s(
            e,
            function(e) {
              var a = this.findTargetInfo(e, t);
              a &&
                !0 !== a &&
                i.each(a.coordSyses, function(i) {
                  var a = x[e.brushType](1, i, e.range);
                  n(e, a.values, i, t);
                });
            },
            this
          );
        }),
        (p.setInputRanges = function(e, t) {
          s(
            e,
            function(e) {
              var n = this.findTargetInfo(e, t);
              if (((e.range = e.range || []), n && !0 !== n)) {
                e.panelId = n.panelId;
                var i = x[e.brushType](0, n.coordSys, e.coordRange),
                  a = e.__rangeOffset;
                e.range = a
                  ? b[e.brushType](
                      i.values,
                      a.offset,
                      (function(e, t) {
                        var n = w(e),
                          i = w(t),
                          a = [n[0] / i[0], n[1] / i[1]];
                        return isNaN(a[0]) && (a[0] = 1), isNaN(a[1]) && (a[1] = 1), a;
                      })(i.xyMinMax, a.xyMinMax)
                    )
                  : i.values;
              }
            },
            this
          );
        }),
        (p.makePanelOpts = function(e, t) {
          return i.map(this._targetInfoList, function(n) {
            var i = n.getPanelRect();
            return {
              panelId: n.panelId,
              defaultBrushType: t && t(n),
              clipPath: r.makeRectPanelClipPath(i),
              isTargetByCursor: r.makeRectIsTargetByCursor(i, e, n.coordSysModel),
              getLinearBrushOtherExtent: r.makeLinearBrushOtherExtent(i)
            };
          });
        }),
        (p.controlSeries = function(e, t, n) {
          var i = this.findTargetInfo(e, n);
          return !0 === i || (i && l(i.coordSyses, t.coordinateSystem) >= 0);
        }),
        (p.findTargetInfo = function(e, t) {
          for (var n = this._targetInfoList, i = f(t, e), a = 0; a < n.length; a++) {
            var o = n[a],
              r = e.panelId;
            if (r) {
              if (o.panelId === r) return o;
            } else for (a = 0; a < v.length; a++) if (v[a](i, o)) return o;
          }
          return !0;
        });
      var m = {
          grid: function(e, t) {
            var n = e.xAxisModels,
              a = e.yAxisModels,
              o = e.gridModels,
              r = i.createHashMap(),
              u = {},
              c = {};
            (n || a || o) &&
              (s(n, function(e) {
                var t = e.axis.grid.model;
                r.set(t.id, t), (u[t.id] = !0);
              }),
              s(a, function(e) {
                var t = e.axis.grid.model;
                r.set(t.id, t), (c[t.id] = !0);
              }),
              s(o, function(e) {
                r.set(e.id, e), (u[e.id] = !0), (c[e.id] = !0);
              }),
              r.each(function(e) {
                var i = e.coordinateSystem,
                  o = [];
                s(i.getCartesians(), function(e, t) {
                  (l(n, e.getAxis('x').model) >= 0 || l(a, e.getAxis('y').model) >= 0) && o.push(e);
                }),
                  t.push({
                    panelId: 'grid--' + e.id,
                    gridModel: e,
                    coordSysModel: e,
                    coordSys: o[0],
                    coordSyses: o,
                    getPanelRect: y.grid,
                    xAxisDeclared: u[e.id],
                    yAxisDeclared: c[e.id]
                  });
              }));
          },
          geo: function(e, t) {
            s(e.geoModels, function(e) {
              var n = e.coordinateSystem;
              t.push({
                panelId: 'geo--' + e.id,
                geoModel: e,
                coordSysModel: e,
                coordSys: n,
                coordSyses: [n],
                getPanelRect: y.geo
              });
            });
          }
        },
        v = [
          function(e, t) {
            var n = e.xAxisModel,
              i = e.yAxisModel,
              a = e.gridModel;
            return (
              !a && n && (a = n.axis.grid.model),
              !a && i && (a = i.axis.grid.model),
              a && a === t.gridModel
            );
          },
          function(e, t) {
            var n = e.geoModel;
            return n && n === t.geoModel;
          }
        ],
        y = {
          grid: function() {
            return this.coordSys.grid.getRect().clone();
          },
          geo: function() {
            var e = this.coordSys,
              t = e.getBoundingRect().clone();
            return t.applyTransform(a.getTransform(e)), t;
          }
        },
        x = {
          lineX: u(_, 0),
          lineY: u(_, 1),
          rect: function(e, t, n) {
            var i = t[c[e]]([n[0][0], n[1][0]]),
              a = t[c[e]]([n[0][1], n[1][1]]),
              o = [g([i[0], a[0]]), g([i[1], a[1]])];
            return { values: o, xyMinMax: o };
          },
          polygon: function(e, t, n) {
            var a = [
              [1 / 0, -1 / 0],
              [1 / 0, -1 / 0]
            ];
            return {
              values: i.map(n, function(n) {
                var i = t[c[e]](n);
                return (
                  (a[0][0] = Math.min(a[0][0], i[0])),
                  (a[1][0] = Math.min(a[1][0], i[1])),
                  (a[0][1] = Math.max(a[0][1], i[0])),
                  (a[1][1] = Math.max(a[1][1], i[1])),
                  i
                );
              }),
              xyMinMax: a
            };
          }
        };
      function _(e, t, n, a) {
        var o = n.getAxis(['x', 'y'][e]),
          r = g(
            i.map([0, 1], function(e) {
              return t ? o.coordToData(o.toLocalCoord(a[e])) : o.toGlobalCoord(o.dataToCoord(a[e]));
            })
          ),
          s = [];
        return (s[e] = r), (s[1 - e] = [NaN, NaN]), { values: r, xyMinMax: s };
      }
      var b = {
        lineX: u(S, 0),
        lineY: u(S, 1),
        rect: function(e, t, n) {
          return [
            [e[0][0] - n[0] * t[0][0], e[0][1] - n[0] * t[0][1]],
            [e[1][0] - n[1] * t[1][0], e[1][1] - n[1] * t[1][1]]
          ];
        },
        polygon: function(e, t, n) {
          return i.map(e, function(e, i) {
            return [e[0] - n[0] * t[i][0], e[1] - n[1] * t[i][1]];
          });
        }
      };
      function S(e, t, n, i) {
        return [t[0] - i[e] * n[0], t[1] - i[e] * n[1]];
      }
      function w(e) {
        return e ? [e[0][1] - e[0][0], e[1][1] - e[1][0]] : [NaN, NaN];
      }
      var M = d;
      e.exports = M;
    },
    function(e, t, n) {
      var i = n(2).each,
        a = '\0_ec_hist_store';
      function o(e) {
        var t = e[a];
        return t || (t = e[a] = [{}]), t;
      }
      (t.push = function(e, t) {
        var n = o(e);
        i(t, function(t, i) {
          for (var a = n.length - 1; a >= 0; a--) {
            if (n[a][i]) break;
          }
          if (a < 0) {
            var o = e.queryComponents({ mainType: 'dataZoom', subType: 'select', id: i })[0];
            if (o) {
              var r = o.getPercentRange();
              n[0][i] = { dataZoomId: i, start: r[0], end: r[1] };
            }
          }
        }),
          n.push(t);
      }),
        (t.pop = function(e) {
          var t = o(e),
            n = t[t.length - 1];
          t.length > 1 && t.pop();
          var a = {};
          return (
            i(n, function(e, n) {
              for (var i = t.length - 1; i >= 0; i--) {
                if ((e = t[i][n])) {
                  a[n] = e;
                  break;
                }
              }
            }),
            a
          );
        }),
        (t.clear = function(e) {
          e[a] = null;
        }),
        (t.count = function(e) {
          return o(e).length;
        });
    },
    function(e, t, n) {
      var i = n(4),
        a = n(2),
        o = n(36),
        r = n(18).isNameSpecified,
        s = n(86).legend.selector,
        l = {
          all: { type: 'all', title: a.clone(s.all) },
          inverse: { type: 'inverse', title: a.clone(s.inverse) }
        },
        u = i.extendComponentModel({
          type: 'legend.plain',
          dependencies: ['series'],
          layoutMode: { type: 'box', ignoreSize: !0 },
          init: function(e, t, n) {
            this.mergeDefaultAndTheme(e, n),
              (e.selected = e.selected || {}),
              this._updateSelector(e);
          },
          mergeOption: function(e) {
            u.superCall(this, 'mergeOption', e), this._updateSelector(e);
          },
          _updateSelector: function(e) {
            var t = e.selector;
            !0 === t && (t = e.selector = ['all', 'inverse']),
              a.isArray(t) &&
                a.each(t, function(e, n) {
                  a.isString(e) && (e = { type: e }), (t[n] = a.merge(e, l[e.type]));
                });
          },
          optionUpdated: function() {
            this._updateData(this.ecModel);
            var e = this._data;
            if (e[0] && 'single' === this.get('selectedMode')) {
              for (var t = !1, n = 0; n < e.length; n++) {
                var i = e[n].get('name');
                if (this.isSelected(i)) {
                  this.select(i), (t = !0);
                  break;
                }
              }
              !t && this.select(e[0].get('name'));
            }
          },
          _updateData: function(e) {
            var t = [],
              n = [];
            e.eachRawSeries(function(i) {
              var a,
                o = i.name;
              if ((n.push(o), i.legendDataProvider)) {
                var s = i.legendDataProvider(),
                  l = s.mapArray(s.getName);
                e.isSeriesFiltered(i) || (n = n.concat(l)), l.length ? (t = t.concat(l)) : (a = !0);
              } else a = !0;
              a && r(i) && t.push(i.name);
            }),
              (this._availableNames = n);
            var i = this.get('data') || t,
              s = a.map(
                i,
                function(e) {
                  return (
                    ('string' !== typeof e && 'number' !== typeof e) || (e = { name: e }),
                    new o(e, this, this.ecModel)
                  );
                },
                this
              );
            this._data = s;
          },
          getData: function() {
            return this._data;
          },
          select: function(e) {
            var t = this.option.selected;
            if ('single' === this.get('selectedMode')) {
              var n = this._data;
              a.each(n, function(e) {
                t[e.get('name')] = !1;
              });
            }
            t[e] = !0;
          },
          unSelect: function(e) {
            'single' !== this.get('selectedMode') && (this.option.selected[e] = !1);
          },
          toggleSelected: function(e) {
            var t = this.option.selected;
            t.hasOwnProperty(e) || (t[e] = !0), this[t[e] ? 'unSelect' : 'select'](e);
          },
          allSelect: function() {
            var e = this._data,
              t = this.option.selected;
            a.each(e, function(e) {
              t[e.get('name', !0)] = !0;
            });
          },
          inverseSelect: function() {
            var e = this._data,
              t = this.option.selected;
            a.each(e, function(e) {
              var n = e.get('name', !0);
              t.hasOwnProperty(n) || (t[n] = !0), (t[n] = !t[n]);
            });
          },
          isSelected: function(e) {
            var t = this.option.selected;
            return !(t.hasOwnProperty(e) && !t[e]) && a.indexOf(this._availableNames, e) >= 0;
          },
          getOrient: function() {
            return 'vertical' === this.get('orient')
              ? { index: 1, name: 'vertical' }
              : { index: 0, name: 'horizontal' };
          },
          defaultOption: {
            zlevel: 0,
            z: 4,
            show: !0,
            orient: 'horizontal',
            left: 'center',
            top: 0,
            align: 'auto',
            backgroundColor: 'rgba(0,0,0,0)',
            borderColor: '#ccc',
            borderRadius: 0,
            borderWidth: 0,
            padding: 5,
            itemGap: 10,
            itemWidth: 25,
            itemHeight: 14,
            inactiveColor: '#ccc',
            inactiveBorderColor: '#ccc',
            itemStyle: { borderWidth: 0 },
            textStyle: { color: '#333' },
            selectedMode: !0,
            selector: !1,
            selectorLabel: {
              show: !0,
              borderRadius: 10,
              padding: [3, 5, 3, 5],
              fontSize: 12,
              fontFamily: ' sans-serif',
              color: '#666',
              borderWidth: 1,
              borderColor: '#666'
            },
            emphasis: { selectorLabel: { show: !0, color: '#eee', backgroundColor: '#666' } },
            selectorPosition: 'auto',
            selectorItemGap: 7,
            selectorButtonGap: 10,
            tooltip: { show: !1 }
          }
        }),
        c = u;
      e.exports = c;
    },
    function(e, t, n) {
      n(23).__DEV__;
      var i = n(4),
        a = n(2),
        o = n(54).createSymbol,
        r = n(6),
        s = n(455).makeBackground,
        l = n(25),
        u = a.curry,
        c = a.each,
        h = r.Group,
        d = i.extendComponentView({
          type: 'legend.plain',
          newlineDisabled: !1,
          init: function() {
            this.group.add((this._contentGroup = new h())),
              this._backgroundEl,
              this.group.add((this._selectorGroup = new h())),
              (this._isFirstRender = !0);
          },
          getContentGroup: function() {
            return this._contentGroup;
          },
          getSelectorGroup: function() {
            return this._selectorGroup;
          },
          render: function(e, t, n) {
            var i = this._isFirstRender;
            if (((this._isFirstRender = !1), this.resetInner(), e.get('show', !0))) {
              var o = e.get('align'),
                r = e.get('orient');
              (o && 'auto' !== o) ||
                (o = 'right' === e.get('left') && 'vertical' === r ? 'right' : 'left');
              var u = e.get('selector', !0),
                c = e.get('selectorPosition', !0);
              !u || (c && 'auto' !== c) || (c = 'horizontal' === r ? 'end' : 'start'),
                this.renderInner(o, e, t, n, u, r, c);
              var h = e.getBoxLayoutParams(),
                d = { width: n.getWidth(), height: n.getHeight() },
                p = e.get('padding'),
                g = l.getLayoutRect(h, d, p),
                f = this.layoutInner(e, o, g, i, u, c),
                m = l.getLayoutRect(a.defaults({ width: f.width, height: f.height }, h), d, p);
              this.group.attr('position', [m.x - f.x, m.y - f.y]),
                this.group.add((this._backgroundEl = s(f, e)));
            }
          },
          resetInner: function() {
            this.getContentGroup().removeAll(),
              this._backgroundEl && this.group.remove(this._backgroundEl),
              this.getSelectorGroup().removeAll();
          },
          renderInner: function(e, t, n, i, o, r, s) {
            var l = this.getContentGroup(),
              d = a.createHashMap(),
              p = t.get('selectedMode'),
              v = [];
            n.eachRawSeries(function(e) {
              !e.get('legendHoverLink') && v.push(e.id);
            }),
              c(
                t.getData(),
                function(a, o) {
                  var r = a.get('name');
                  if (this.newlineDisabled || ('' !== r && '\n' !== r)) {
                    var s = n.getSeriesByName(r)[0];
                    if (!d.get(r))
                      if (s) {
                        var c = s.getData(),
                          y = c.getVisual('color'),
                          x = c.getVisual('borderColor');
                        'function' === typeof y && (y = y(s.getDataParams(0))),
                          'function' === typeof x && (x = x(s.getDataParams(0)));
                        var _ = c.getVisual('legendSymbol') || 'roundRect',
                          b = c.getVisual('symbol');
                        this._createItem(r, o, a, t, _, b, e, y, x, p)
                          .on('click', u(g, r, i))
                          .on('mouseover', u(f, s.name, null, i, v))
                          .on('mouseout', u(m, s.name, null, i, v)),
                          d.set(r, !0);
                      } else
                        n.eachRawSeries(function(n) {
                          if (!d.get(r) && n.legendDataProvider) {
                            var s = n.legendDataProvider(),
                              l = s.indexOfName(r);
                            if (l < 0) return;
                            var c = s.getItemVisual(l, 'color'),
                              h = s.getItemVisual(l, 'borderColor');
                            this._createItem(r, o, a, t, 'roundRect', null, e, c, h, p)
                              .on('click', u(g, r, i))
                              .on('mouseover', u(f, null, r, i, v))
                              .on('mouseout', u(m, null, r, i, v)),
                              d.set(r, !0);
                          }
                        }, this);
                  } else l.add(new h({ newline: !0 }));
                },
                this
              ),
              o && this._createSelector(o, t, i, r, s);
          },
          _createSelector: function(e, t, n, i, a) {
            var o = this.getSelectorGroup();
            c(e, function(e) {
              !(function(e) {
                var i = e.type,
                  a = new r.Text({
                    style: { x: 0, y: 0, align: 'center', verticalAlign: 'middle' },
                    onclick: function() {
                      n.dispatchAction({
                        type: 'all' === i ? 'legendAllSelect' : 'legendInverseSelect'
                      });
                    }
                  });
                o.add(a);
                var s = t.getModel('selectorLabel'),
                  l = t.getModel('emphasis.selectorLabel');
                r.setLabelStyle(a.style, (a.hoverStyle = {}), s, l, {
                  defaultText: e.title,
                  isRectText: !1
                }),
                  r.setHoverStyle(a);
              })(e);
            });
          },
          _createItem: function(e, t, n, i, s, l, u, c, d, g) {
            var f = i.get('itemWidth'),
              m = i.get('itemHeight'),
              v = i.get('inactiveColor'),
              y = i.get('inactiveBorderColor'),
              x = i.get('symbolKeepAspect'),
              _ = i.getModel('itemStyle'),
              b = i.isSelected(e),
              S = new h(),
              w = n.getModel('textStyle'),
              M = n.get('icon'),
              I = n.getModel('tooltip'),
              A = I.parentModel,
              T = o((s = M || s), 0, 0, f, m, b ? c : v, null == x || x);
            if ((S.add(p(T, s, _, d, y, b)), !M && l && (l !== s || 'none' === l))) {
              var D = 0.8 * m;
              'none' === l && (l = 'circle');
              var C = o(l, (f - D) / 2, (m - D) / 2, D, D, b ? c : v, null == x || x);
              S.add(p(C, l, _, d, y, b));
            }
            var L = 'left' === u ? f + 5 : -5,
              P = u,
              O = i.get('formatter'),
              k = e;
            'string' === typeof O && O
              ? (k = O.replace('{name}', null != e ? e : ''))
              : 'function' === typeof O && (k = O(e)),
              S.add(
                new r.Text({
                  style: r.setTextStyle({}, w, {
                    text: k,
                    x: L,
                    y: m / 2,
                    textFill: b ? w.getTextColor() : v,
                    textAlign: P,
                    textVerticalAlign: 'middle'
                  })
                })
              );
            var N = new r.Rect({
              shape: S.getBoundingRect(),
              invisible: !0,
              tooltip: I.get('show')
                ? a.extend(
                    {
                      content: e,
                      formatter:
                        A.get('formatter', !0) ||
                        function() {
                          return e;
                        },
                      formatterParams: {
                        componentType: 'legend',
                        legendIndex: i.componentIndex,
                        name: e,
                        $vars: ['name']
                      }
                    },
                    I.option
                  )
                : null
            });
            return (
              S.add(N),
              S.eachChild(function(e) {
                e.silent = !0;
              }),
              (N.silent = !g),
              this.getContentGroup().add(S),
              r.setHoverStyle(S),
              (S.__legendDataIndex = t),
              S
            );
          },
          layoutInner: function(e, t, n, i, a, o) {
            var r = this.getContentGroup(),
              s = this.getSelectorGroup();
            l.box(e.get('orient'), r, e.get('itemGap'), n.width, n.height);
            var u = r.getBoundingRect(),
              c = [-u.x, -u.y];
            if (a) {
              l.box('horizontal', s, e.get('selectorItemGap', !0));
              var h = s.getBoundingRect(),
                d = [-h.x, -h.y],
                p = e.get('selectorButtonGap', !0),
                g = e.getOrient().index,
                f = 0 === g ? 'width' : 'height',
                m = 0 === g ? 'height' : 'width',
                v = 0 === g ? 'y' : 'x';
              'end' === o ? (d[g] += u[f] + p) : (c[g] += h[f] + p),
                (d[1 - g] += u[m] / 2 - h[m] / 2),
                s.attr('position', d),
                r.attr('position', c);
              var y = { x: 0, y: 0 };
              return (
                (y[f] = u[f] + p + h[f]),
                (y[m] = Math.max(u[m], h[m])),
                (y[v] = Math.min(0, h[v] + d[1 - g])),
                y
              );
            }
            return r.attr('position', c), this.group.getBoundingRect();
          },
          remove: function() {
            this.getContentGroup().removeAll(), (this._isFirstRender = !0);
          }
        });
      function p(e, t, n, i, a, o) {
        var r;
        return (
          'line' !== t && t.indexOf('empty') < 0
            ? ((r = n.getItemStyle()), (e.style.stroke = i), o || (r.stroke = a))
            : (r = n.getItemStyle(['borderWidth', 'borderColor'])),
          e.setStyle(r)
        );
      }
      function g(e, t) {
        t.dispatchAction({ type: 'legendToggleSelect', name: e });
      }
      function f(e, t, n, i) {
        var a = n.getZr().storage.getDisplayList()[0];
        (a && a.useHoverLayer) ||
          n.dispatchAction({ type: 'highlight', seriesName: e, name: t, excludeSeriesId: i });
      }
      function m(e, t, n, i) {
        var a = n.getZr().storage.getDisplayList()[0];
        (a && a.useHoverLayer) ||
          n.dispatchAction({ type: 'downplay', seriesName: e, name: t, excludeSeriesId: i });
      }
      e.exports = d;
    },
    function(e, t, n) {
      n(309), n(127), n(128), n(1013), n(1014), n(311), n(312);
    },
    function(e, t, n) {
      n(309), n(127), n(128), n(1015), n(1016), n(311), n(312);
    },
    function(e, t, n) {
      var i = n(4),
        a = n(463);
      n(464), n(465), n(1019), n(1020), n(470), i.registerPreprocessor(a);
    },
    function(e, t, n) {
      var i = n(2),
        a = i.each;
      function o(e, t) {
        return e && e.hasOwnProperty && e.hasOwnProperty(t);
      }
      e.exports = function(e) {
        var t = e && e.visualMap;
        i.isArray(t) || (t = t ? [t] : []),
          a(t, function(e) {
            if (e) {
              o(e, 'splitList') &&
                !o(e, 'pieces') &&
                ((e.pieces = e.splitList), delete e.splitList);
              var t = e.pieces;
              t &&
                i.isArray(t) &&
                a(t, function(e) {
                  i.isObject(e) &&
                    (o(e, 'start') && !o(e, 'min') && (e.min = e.start),
                    o(e, 'end') && !o(e, 'max') && (e.max = e.end));
                });
            }
          });
      };
    },
    function(e, t, n) {
      n(37).registerSubTypeDefaulter('visualMap', function(e) {
        return e.categories ||
          ((e.pieces ? e.pieces.length > 0 : e.splitNumber > 0) && !e.calculable)
          ? 'piecewise'
          : 'continuous';
      });
    },
    function(e, t, n) {
      var i = n(4),
        a = n(2),
        o = n(208),
        r = n(106),
        s = i.PRIORITY.VISUAL.COMPONENT;
      function l(e, t, n, i) {
        for (
          var a = t.targetVisuals[i],
            o = r.prepareVisualTypes(a),
            s = { color: e.getData().getVisual('color') },
            l = 0,
            u = o.length;
          l < u;
          l++
        ) {
          var c = o[l],
            h = a['opacity' === c ? '__alphaForOpacity' : c];
          h && h.applyVisual(n, d, p);
        }
        return s.color;
        function d(e) {
          return s[e];
        }
        function p(e, t) {
          s[e] = t;
        }
      }
      i.registerVisual(s, {
        createOnAllSeries: !0,
        reset: function(e, t) {
          var n = [];
          return (
            t.eachComponent('visualMap', function(t) {
              var i = e.pipelineContext;
              !t.isTargetSeries(e) ||
                (i && i.large) ||
                n.push(
                  o.incrementalApplyVisual(
                    t.stateList,
                    t.targetVisuals,
                    a.bind(t.getValueState, t),
                    t.getDataDimension(e.getData())
                  )
                );
            }),
            n
          );
        }
      }),
        i.registerVisual(s, {
          createOnAllSeries: !0,
          reset: function(e, t) {
            var n = e.getData(),
              i = [];
            t.eachComponent('visualMap', function(t) {
              if (t.isTargetSeries(e)) {
                var o = t.getVisualMeta(a.bind(l, null, e, t)) || { stops: [], outerColors: [] },
                  r = t.getDataDimension(n),
                  s = n.getDimensionInfo(r);
                null != s && ((o.dimension = s.index), i.push(o));
              }
            }),
              e.getData().setVisual('visualMeta', i);
          }
        });
    },
    function(e, t, n) {
      var i = n(4),
        a = n(2),
        o = n(35),
        r = n(467),
        s = n(106),
        l = n(208),
        u = n(18),
        c = n(16),
        h = s.mapVisual,
        d = s.eachVisual,
        p = a.isArray,
        g = a.each,
        f = c.asc,
        m = c.linearMap,
        v = a.noop,
        y = i.extendComponentModel({
          type: 'visualMap',
          dependencies: ['series'],
          stateList: ['inRange', 'outOfRange'],
          replacableOptionKeys: ['inRange', 'outOfRange', 'target', 'controller', 'color'],
          dataBound: [-1 / 0, 1 / 0],
          layoutMode: { type: 'box', ignoreSize: !0 },
          defaultOption: {
            show: !0,
            zlevel: 0,
            z: 4,
            seriesIndex: 'all',
            min: 0,
            max: 200,
            dimension: null,
            inRange: null,
            outOfRange: null,
            left: 0,
            right: null,
            top: null,
            bottom: 0,
            itemWidth: null,
            itemHeight: null,
            inverse: !1,
            orient: 'vertical',
            backgroundColor: 'rgba(0,0,0,0)',
            borderColor: '#ccc',
            contentColor: '#5793f3',
            inactiveColor: '#aaa',
            borderWidth: 0,
            padding: 5,
            textGap: 10,
            precision: 0,
            color: null,
            formatter: null,
            text: null,
            textStyle: { color: '#333' }
          },
          init: function(e, t, n) {
            this._dataExtent,
              (this.targetVisuals = {}),
              (this.controllerVisuals = {}),
              this.textStyleModel,
              this.itemSize,
              this.mergeDefaultAndTheme(e, n);
          },
          optionUpdated: function(e, t) {
            var n = this.option;
            o.canvasSupported || (n.realtime = !1),
              !t && l.replaceVisualOption(n, e, this.replacableOptionKeys),
              (this.textStyleModel = this.getModel('textStyle')),
              this.resetItemSize(),
              this.completeVisualOption();
          },
          resetVisual: function(e) {
            var t = this.stateList;
            (e = a.bind(e, this)),
              (this.controllerVisuals = l.createVisualMappings(this.option.controller, t, e)),
              (this.targetVisuals = l.createVisualMappings(this.option.target, t, e));
          },
          getTargetSeriesIndices: function() {
            var e = this.option.seriesIndex,
              t = [];
            return (
              null == e || 'all' === e
                ? this.ecModel.eachSeries(function(e, n) {
                    t.push(n);
                  })
                : (t = u.normalizeToArray(e)),
              t
            );
          },
          eachTargetSeries: function(e, t) {
            a.each(
              this.getTargetSeriesIndices(),
              function(n) {
                e.call(t, this.ecModel.getSeriesByIndex(n));
              },
              this
            );
          },
          isTargetSeries: function(e) {
            var t = !1;
            return (
              this.eachTargetSeries(function(n) {
                n === e && (t = !0);
              }),
              t
            );
          },
          formatValueText: function(e, t, n) {
            var i,
              o,
              r = this.option,
              s = r.precision,
              l = this.dataBound,
              u = r.formatter;
            return (
              (n = n || ['<', '>']),
              a.isArray(e) && ((e = e.slice()), (i = !0)),
              (o = t ? e : i ? [c(e[0]), c(e[1])] : c(e)),
              a.isString(u)
                ? u.replace('{value}', i ? o[0] : o).replace('{value2}', i ? o[1] : o)
                : a.isFunction(u)
                ? i
                  ? u(e[0], e[1])
                  : u(e)
                : i
                ? e[0] === l[0]
                  ? n[0] + ' ' + o[1]
                  : e[1] === l[1]
                  ? n[1] + ' ' + o[0]
                  : o[0] + ' - ' + o[1]
                : o
            );
            function c(e) {
              return e === l[0] ? 'min' : e === l[1] ? 'max' : (+e).toFixed(Math.min(s, 20));
            }
          },
          resetExtent: function() {
            var e = this.option,
              t = f([e.min, e.max]);
            this._dataExtent = t;
          },
          getDataDimension: function(e) {
            var t = this.option.dimension,
              n = e.dimensions;
            if (null != t || n.length) {
              if (null != t) return e.getDimension(t);
              for (var i = e.dimensions, a = i.length - 1; a >= 0; a--) {
                var o = i[a];
                if (!e.getDimensionInfo(o).isCalculationCoord) return o;
              }
            }
          },
          getExtent: function() {
            return this._dataExtent.slice();
          },
          completeVisualOption: function() {
            var e = this.ecModel,
              t = this.option,
              n = { inRange: t.inRange, outOfRange: t.outOfRange },
              i = t.target || (t.target = {}),
              o = t.controller || (t.controller = {});
            a.merge(i, n), a.merge(o, n);
            var l = this.isCategory();
            function u(n) {
              p(t.color) && !n.inRange && (n.inRange = { color: t.color.slice().reverse() }),
                (n.inRange = n.inRange || { color: e.get('gradientColor') }),
                g(
                  this.stateList,
                  function(e) {
                    var t = n[e];
                    if (a.isString(t)) {
                      var i = r.get(t, 'active', l);
                      i ? ((n[e] = {}), (n[e][t] = i)) : delete n[e];
                    }
                  },
                  this
                );
            }
            u.call(this, i),
              u.call(this, o),
              function(e, t, n) {
                var i = e[t],
                  a = e[n];
                i &&
                  !a &&
                  ((a = e[n] = {}),
                  g(i, function(e, t) {
                    if (s.isValidType(t)) {
                      var n = r.get(t, 'inactive', l);
                      null != n &&
                        ((a[t] = n),
                        'color' !== t ||
                          a.hasOwnProperty('opacity') ||
                          a.hasOwnProperty('colorAlpha') ||
                          (a.opacity = [0, 0]));
                    }
                  }));
              }.call(this, i, 'inRange', 'outOfRange'),
              function(e) {
                var t = (e.inRange || {}).symbol || (e.outOfRange || {}).symbol,
                  n = (e.inRange || {}).symbolSize || (e.outOfRange || {}).symbolSize,
                  i = this.get('inactiveColor');
                g(
                  this.stateList,
                  function(o) {
                    var r = this.itemSize,
                      s = e[o];
                    s || (s = e[o] = { color: l ? i : [i] }),
                      null == s.symbol &&
                        (s.symbol = (t && a.clone(t)) || (l ? 'roundRect' : ['roundRect'])),
                      null == s.symbolSize &&
                        (s.symbolSize = (n && a.clone(n)) || (l ? r[0] : [r[0], r[0]])),
                      (s.symbol = h(s.symbol, function(e) {
                        return 'none' === e || 'square' === e ? 'roundRect' : e;
                      }));
                    var u = s.symbolSize;
                    if (null != u) {
                      var c = -1 / 0;
                      d(u, function(e) {
                        e > c && (c = e);
                      }),
                        (s.symbolSize = h(u, function(e) {
                          return m(e, [0, c], [0, r[0]], !0);
                        }));
                    }
                  },
                  this
                );
              }.call(this, o);
          },
          resetItemSize: function() {
            this.itemSize = [parseFloat(this.get('itemWidth')), parseFloat(this.get('itemHeight'))];
          },
          isCategory: function() {
            return !!this.option.categories;
          },
          setSelected: v,
          getValueState: v,
          getVisualMeta: v
        });
      e.exports = y;
    },
    function(e, t, n) {
      var i = n(2),
        a = {
          get: function(e, t, n) {
            var a = i.clone((o[e] || {})[t]);
            return n && i.isArray(a) ? a[a.length - 1] : a;
          }
        },
        o = {
          color: { active: ['#006edd', '#e0ffff'], inactive: ['rgba(0,0,0,0)'] },
          colorHue: { active: [0, 360], inactive: [0, 0] },
          colorSaturation: { active: [0.3, 1], inactive: [0, 0] },
          colorLightness: { active: [0.9, 0.5], inactive: [0, 0] },
          colorAlpha: { active: [0.3, 1], inactive: [0, 0] },
          opacity: { active: [0.3, 1], inactive: [0, 0] },
          symbol: { active: ['circle', 'roundRect', 'diamond'], inactive: ['none'] },
          symbolSize: { active: [10, 50], inactive: [0, 0] }
        },
        r = a;
      e.exports = r;
    },
    function(e, t, n) {
      var i = n(4),
        a = n(2),
        o = n(6),
        r = n(30),
        s = n(25),
        l = n(106),
        u = i.extendComponentView({
          type: 'visualMap',
          autoPositionValues: { left: 1, right: 1, top: 1, bottom: 1 },
          init: function(e, t) {
            (this.ecModel = e), (this.api = t), this.visualMapModel;
          },
          render: function(e, t, n, i) {
            (this.visualMapModel = e),
              !1 !== e.get('show') ? this.doRender.apply(this, arguments) : this.group.removeAll();
          },
          renderBackground: function(e) {
            var t = this.visualMapModel,
              n = r.normalizeCssArray(t.get('padding') || 0),
              i = e.getBoundingRect();
            e.add(
              new o.Rect({
                z2: -1,
                silent: !0,
                shape: {
                  x: i.x - n[3],
                  y: i.y - n[0],
                  width: i.width + n[3] + n[1],
                  height: i.height + n[0] + n[2]
                },
                style: {
                  fill: t.get('backgroundColor'),
                  stroke: t.get('borderColor'),
                  lineWidth: t.get('borderWidth')
                }
              })
            );
          },
          getControllerVisual: function(e, t, n) {
            var i = (n = n || {}).forceState,
              o = this.visualMapModel,
              r = {};
            if (('symbol' === t && (r.symbol = o.get('itemSymbol')), 'color' === t)) {
              var s = o.get('contentColor');
              r.color = s;
            }
            function u(e) {
              return r[e];
            }
            function c(e, t) {
              r[e] = t;
            }
            var h = o.controllerVisuals[i || o.getValueState(e)],
              d = l.prepareVisualTypes(h);
            return (
              a.each(d, function(i) {
                var a = h[i];
                n.convertOpacityToAlpha &&
                  'opacity' === i &&
                  ((i = 'colorAlpha'), (a = h.__alphaForOpacity)),
                  l.dependsOn(i, t) && a && a.applyVisual(e, u, c);
              }),
              r[t]
            );
          },
          positionGroup: function(e) {
            var t = this.visualMapModel,
              n = this.api;
            s.positionElement(e, t.getBoxLayoutParams(), {
              width: n.getWidth(),
              height: n.getHeight()
            });
          },
          doRender: a.noop
        });
      e.exports = u;
    },
    function(e, t, n) {
      var i = n(2),
        a = n(25).getLayoutRect;
      (t.getItemAlign = function(e, t, n) {
        var i = e.option,
          o = i.align;
        if (null != o && 'auto' !== o) return o;
        for (
          var r = { width: t.getWidth(), height: t.getHeight() },
            s = 'horizontal' === i.orient ? 1 : 0,
            l = [
              ['left', 'right', 'width'],
              ['top', 'bottom', 'height']
            ],
            u = l[s],
            c = [0, null, 10],
            h = {},
            d = 0;
          d < 3;
          d++
        )
          (h[l[1 - s][d]] = c[d]), (h[u[d]] = 2 === d ? n[0] : i[u[d]]);
        var p = [
            ['x', 'width', 3],
            ['y', 'height', 0]
          ][s],
          g = a(h, r, i.padding);
        return u[(g.margin[p[2]] || 0) + g[p[0]] + 0.5 * g[p[1]] < 0.5 * r[p[1]] ? 0 : 1];
      }),
        (t.makeHighDownBatch = function(e, t) {
          return (
            i.each(e || [], function(e) {
              null != e.dataIndex && ((e.dataIndexInside = e.dataIndex), (e.dataIndex = null)),
                (e.highlightKey = 'visualMap' + (t ? t.componentIndex : ''));
            }),
            e
          );
        });
    },
    function(e, t, n) {
      n(4).registerAction(
        { type: 'selectDataRange', event: 'dataRangeSelected', update: 'update' },
        function(e, t) {
          t.eachComponent({ mainType: 'visualMap', query: e }, function(t) {
            t.setSelected(e.selected);
          });
        }
      );
    },
    function(e, t, n) {
      var i = n(4),
        a = n(463);
      n(464), n(465), n(1021), n(1022), n(470), i.registerPreprocessor(a);
    },
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    function(e, t, n) {
      var i = n(4);
      n(789), n(790);
      var a = n(103),
        o = n(155),
        r = n(792);
      n(156),
        i.registerVisual(a('line', 'circle', 'line')),
        i.registerLayout(o('line')),
        i.registerProcessor(i.PRIORITY.PROCESSOR.STATISTIC, r('line'));
    },
    function(e, t, n) {
      var i = n(4),
        a = n(2),
        o = n(200),
        r = o.layout,
        s = o.largeLayout;
      n(296),
        n(799),
        n(800),
        n(156),
        i.registerLayout(i.PRIORITY.VISUAL.LAYOUT, a.curry(r, 'bar')),
        i.registerLayout(i.PRIORITY.VISUAL.PROGRESSIVE_LAYOUT, s),
        i.registerVisual({
          seriesType: 'bar',
          reset: function(e) {
            e.getData().setVisual('legendSymbol', 'roundRect');
          }
        });
    },
    function(e, t, n) {
      var i = n(4),
        a = n(2);
      n(803), n(804);
      var o = n(433),
        r = n(204),
        s = n(805),
        l = n(157);
      o('pie', [
        { type: 'pieToggleSelect', event: 'pieselectchanged', method: 'toggleSelected' },
        { type: 'pieSelect', event: 'pieselected', method: 'select' },
        { type: 'pieUnSelect', event: 'pieunselected', method: 'unSelect' }
      ]),
        i.registerVisual(r('pie')),
        i.registerLayout(a.curry(s, 'pie')),
        i.registerProcessor(l('pie'));
    },
    function(e, t, n) {
      var i = n(4);
      n(811), n(816), n(817);
      var a = n(204),
        o = n(103),
        r = n(818),
        s = n(157),
        l = n(819);
      i.registerVisual(a('radar')),
        i.registerVisual(o('radar', 'circle')),
        i.registerLayout(r),
        i.registerProcessor(s('radar')),
        i.registerPreprocessor(l);
    },
    function(e, t, n) {
      var i = n(4);
      n(159),
        n(976),
        n(977),
        i.registerAction(
          { type: 'showTip', event: 'showTip', update: 'tooltip:manuallyShowTip' },
          function() {}
        ),
        i.registerAction(
          { type: 'hideTip', event: 'hideTip', update: 'tooltip:manuallyHideTip' },
          function() {}
        );
    },
    function(e, t, n) {
      var i = n(2),
        a = n(4),
        o = n(6),
        r = n(25).getLayoutRect;
      a.extendComponentModel({
        type: 'title',
        layoutMode: { type: 'box', ignoreSize: !0 },
        defaultOption: {
          zlevel: 0,
          z: 6,
          show: !0,
          text: '',
          target: 'blank',
          subtext: '',
          subtarget: 'blank',
          left: 0,
          top: 0,
          backgroundColor: 'rgba(0,0,0,0)',
          borderColor: '#ccc',
          borderWidth: 0,
          padding: 5,
          itemGap: 10,
          textStyle: { fontSize: 18, fontWeight: 'bolder', color: '#333' },
          subtextStyle: { color: '#aaa' }
        }
      }),
        a.extendComponentView({
          type: 'title',
          render: function(e, t, n) {
            if ((this.group.removeAll(), e.get('show'))) {
              var a = this.group,
                s = e.getModel('textStyle'),
                l = e.getModel('subtextStyle'),
                u = e.get('textAlign'),
                c = i.retrieve2(e.get('textBaseline'), e.get('textVerticalAlign')),
                h = new o.Text({
                  style: o.setTextStyle(
                    {},
                    s,
                    { text: e.get('text'), textFill: s.getTextColor() },
                    { disableBox: !0 }
                  ),
                  z2: 10
                }),
                d = h.getBoundingRect(),
                p = e.get('subtext'),
                g = new o.Text({
                  style: o.setTextStyle(
                    {},
                    l,
                    {
                      text: p,
                      textFill: l.getTextColor(),
                      y: d.height + e.get('itemGap'),
                      textVerticalAlign: 'top'
                    },
                    { disableBox: !0 }
                  ),
                  z2: 10
                }),
                f = e.get('link'),
                m = e.get('sublink'),
                v = e.get('triggerEvent', !0);
              (h.silent = !f && !v),
                (g.silent = !m && !v),
                f &&
                  h.on('click', function() {
                    window.open(f, '_' + e.get('target'));
                  }),
                m &&
                  g.on('click', function() {
                    window.open(m, '_' + e.get('subtarget'));
                  }),
                (h.eventData = g.eventData = v
                  ? { componentType: 'title', componentIndex: e.componentIndex }
                  : null),
                a.add(h),
                p && a.add(g);
              var y = a.getBoundingRect(),
                x = e.getBoxLayoutParams();
              (x.width = y.width), (x.height = y.height);
              var _ = r(x, { width: n.getWidth(), height: n.getHeight() }, e.get('padding'));
              u ||
                ('middle' === (u = e.get('left') || e.get('right')) && (u = 'center'),
                'right' === u ? (_.x += _.width) : 'center' === u && (_.x += _.width / 2)),
                c ||
                  ('center' === (c = e.get('top') || e.get('bottom')) && (c = 'middle'),
                  'bottom' === c ? (_.y += _.height) : 'middle' === c && (_.y += _.height / 2),
                  (c = c || 'top')),
                a.attr('position', [_.x, _.y]);
              var b = { textAlign: u, textVerticalAlign: c };
              h.setStyle(b), g.setStyle(b), (y = a.getBoundingRect());
              var S = _.margin,
                w = e.getItemStyle(['color', 'opacity']);
              w.fill = e.get('backgroundColor');
              var M = new o.Rect({
                shape: {
                  x: y.x - S[3],
                  y: y.y - S[0],
                  width: y.width + S[1] + S[3],
                  height: y.height + S[0] + S[2],
                  r: e.get('borderRadius')
                },
                style: w,
                subPixelOptimize: !0,
                silent: !0
              });
              a.add(M);
            }
          }
        });
    },
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    function(e, t, n) {
      var i = n(180),
        a = n(1032);
      n(1033),
        n(1034),
        i.registerCoordinateSystem('bmap', a),
        i.registerAction({ type: 'bmapRoam', event: 'bmapRoam', update: 'updateLayout' }, function(
          e,
          t
        ) {
          t.eachComponent('bmap', function(e) {
            var t = e.getBMap(),
              n = t.getCenter();
            e.setCenterAndZoom([n.lng, n.lat], t.getZoom());
          });
        });
      t.version = '1.0.0';
    },
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    function(e, t, n) {
      var i = n(120)([
          ['lineWidth', 'width'],
          ['stroke', 'color'],
          ['opacity'],
          ['shadowBlur'],
          ['shadowOffsetX'],
          ['shadowOffsetY'],
          ['shadowColor']
        ]),
        a = {
          getLineStyle: function(e) {
            var t = i(this, e);
            return (t.lineDash = this.getLineDash(t.lineWidth)), t;
          },
          getLineDash: function(e) {
            null == e && (e = 1);
            var t = this.get('type'),
              n = Math.max(e, 2),
              i = 4 * e;
            return 'solid' !== t && null != t && ('dashed' === t ? [i, i] : [n, n]);
          }
        };
      e.exports = a;
    },
    function(e, t, n) {
      var i = n(120)([
          ['fill', 'color'],
          ['shadowBlur'],
          ['shadowOffsetX'],
          ['shadowOffsetY'],
          ['opacity'],
          ['shadowColor']
        ]),
        a = {
          getAreaStyle: function(e, t) {
            return i(this, e, t);
          }
        };
      e.exports = a;
    },
    function(e, t, n) {
      var i = n(52),
        a = n(6),
        o = ['textStyle', 'color'],
        r = {
          getTextColor: function(e) {
            var t = this.ecModel;
            return this.getShallow('color') || (!e && t ? t.get(o) : null);
          },
          getFont: function() {
            return a.getFont(
              {
                fontStyle: this.getShallow('fontStyle'),
                fontWeight: this.getShallow('fontWeight'),
                fontSize: this.getShallow('fontSize'),
                fontFamily: this.getShallow('fontFamily')
              },
              this.ecModel
            );
          },
          getTextRect: function(e) {
            return i.getBoundingRect(
              e,
              this.getFont(),
              this.getShallow('align'),
              this.getShallow('verticalAlign') || this.getShallow('baseline'),
              this.getShallow('padding'),
              this.getShallow('lineHeight'),
              this.getShallow('rich'),
              this.getShallow('truncateText')
            );
          }
        };
      e.exports = r;
    },
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    function(e, t, n) {
      var i = n(120)([
          ['fill', 'color'],
          ['stroke', 'borderColor'],
          ['lineWidth', 'borderWidth'],
          ['opacity'],
          ['shadowBlur'],
          ['shadowOffsetX'],
          ['shadowOffsetY'],
          ['shadowColor'],
          ['textPosition'],
          ['textAlign']
        ]),
        a = {
          getItemStyle: function(e, t) {
            var n = i(this, e, t),
              a = this.getBorderLineDash();
            return a && (n.lineDash = a), n;
          },
          getBorderLineDash: function() {
            var e = this.get('borderType');
            return 'solid' === e || null == e ? null : 'dashed' === e ? [5, 5] : [1, 1];
          }
        };
      e.exports = a;
    },
    function(e, t) {
      e.exports = {
        getBoxLayoutParams: function() {
          return {
            left: this.get('left'),
            top: this.get('top'),
            right: this.get('right'),
            bottom: this.get('bottom'),
            width: this.get('width'),
            height: this.get('height')
          };
        }
      };
    },
    function(e, t) {
      var n = '';
      'undefined' !== typeof navigator && (n = navigator.platform || '');
      var i = {
        color: [
          '#c23531',
          '#2f4554',
          '#61a0a8',
          '#d48265',
          '#91c7ae',
          '#749f83',
          '#ca8622',
          '#bda29a',
          '#6e7074',
          '#546570',
          '#c4ccd3'
        ],
        gradientColor: ['#f6efa6', '#d88273', '#bf444c'],
        textStyle: {
          fontFamily: n.match(/^Win/) ? 'Microsoft YaHei' : 'sans-serif',
          fontSize: 12,
          fontStyle: 'normal',
          fontWeight: 'normal'
        },
        blendMode: null,
        animation: 'auto',
        animationDuration: 1e3,
        animationDurationUpdate: 300,
        animationEasing: 'exponentialOut',
        animationEasingUpdate: 'cubicOut',
        animationThreshold: 2e3,
        progressiveThreshold: 3e3,
        progressive: 400,
        hoverLayerThreshold: 3e3,
        useUTC: !1
      };
      e.exports = i;
    },
    function(e, t, n) {
      var i = n(2),
        a = n(18),
        o = n(37),
        r = i.each,
        s = i.clone,
        l = i.map,
        u = i.merge,
        c = /^(min|max)?(.+)$/;
      function h(e) {
        (this._api = e),
          (this._timelineOptions = []),
          (this._mediaList = []),
          this._mediaDefault,
          (this._currentMediaIndices = []),
          this._optionBackup,
          this._newBaseOption;
      }
      function d(e, t, n) {
        var a,
          o,
          s = [],
          l = [],
          u = e.timeline;
        if (
          (e.baseOption && (o = e.baseOption),
          (u || e.options) && ((o = o || {}), (s = (e.options || []).slice())),
          e.media)
        ) {
          o = o || {};
          var c = e.media;
          r(c, function(e) {
            e && e.option && (e.query ? l.push(e) : a || (a = e));
          });
        }
        return (
          o || (o = e),
          o.timeline || (o.timeline = u),
          r(
            [o].concat(s).concat(
              i.map(l, function(e) {
                return e.option;
              })
            ),
            function(e) {
              r(t, function(t) {
                t(e, n);
              });
            }
          ),
          { baseOption: o, timelineOptions: s, mediaDefault: a, mediaList: l }
        );
      }
      function p(e, t, n) {
        var a = { width: t, height: n, aspectratio: t / n },
          o = !0;
        return (
          i.each(e, function(e, t) {
            var n = t.match(c);
            if (n && n[1] && n[2]) {
              var i = n[1],
                r = n[2].toLowerCase();
              (function(e, t, n) {
                return 'min' === n ? e >= t : 'max' === n ? e <= t : e === t;
              })(a[r], e, i) || (o = !1);
            }
          }),
          o
        );
      }
      h.prototype = {
        constructor: h,
        setOption: function(e, t) {
          e &&
            i.each(a.normalizeToArray(e.series), function(e) {
              e && e.data && i.isTypedArray(e.data) && i.setAsPrimitive(e.data);
            }),
            (e = s(e));
          var n,
            c,
            h = this._optionBackup,
            p = d.call(this, e, t, !h);
          (this._newBaseOption = p.baseOption),
            h
              ? ((n = h.baseOption),
                (c = p.baseOption),
                r((c = c || {}), function(e, t) {
                  if (null != e) {
                    var i = n[t];
                    if (o.hasClass(t)) {
                      (e = a.normalizeToArray(e)), (i = a.normalizeToArray(i));
                      var r = a.mappingToExists(i, e);
                      n[t] = l(r, function(e) {
                        return e.option && e.exist ? u(e.exist, e.option, !0) : e.exist || e.option;
                      });
                    } else n[t] = u(i, e, !0);
                  }
                }),
                p.timelineOptions.length && (h.timelineOptions = p.timelineOptions),
                p.mediaList.length && (h.mediaList = p.mediaList),
                p.mediaDefault && (h.mediaDefault = p.mediaDefault))
              : (this._optionBackup = p);
        },
        mountOption: function(e) {
          var t = this._optionBackup;
          return (
            (this._timelineOptions = l(t.timelineOptions, s)),
            (this._mediaList = l(t.mediaList, s)),
            (this._mediaDefault = s(t.mediaDefault)),
            (this._currentMediaIndices = []),
            s(e ? t.baseOption : this._newBaseOption)
          );
        },
        getTimelineOption: function(e) {
          var t,
            n = this._timelineOptions;
          if (n.length) {
            var i = e.getComponent('timeline');
            i && (t = s(n[i.getCurrentIndex()], !0));
          }
          return t;
        },
        getMediaOption: function(e) {
          var t,
            n,
            i = this._api.getWidth(),
            a = this._api.getHeight(),
            o = this._mediaList,
            r = this._mediaDefault,
            u = [],
            c = [];
          if (!o.length && !r) return c;
          for (var h = 0, d = o.length; h < d; h++) p(o[h].query, i, a) && u.push(h);
          return (
            !u.length && r && (u = [-1]),
            u.length &&
              ((t = u), (n = this._currentMediaIndices), t.join(',') !== n.join(',')) &&
              (c = l(u, function(e) {
                return s(-1 === e ? r.option : o[e].option);
              })),
            (this._currentMediaIndices = u),
            c
          );
        }
      };
      var g = h;
      e.exports = g;
    },
    function(e, t, n) {
      var i = n(2),
        a = i.each,
        o = i.isArray,
        r = i.isObject,
        s = n(776),
        l = n(18).normalizeToArray;
      function u(e) {
        a(c, function(t) {
          t[0] in e && !(t[1] in e) && (e[t[1]] = e[t[0]]);
        });
      }
      var c = [
          ['x', 'left'],
          ['y', 'top'],
          ['x2', 'right'],
          ['y2', 'bottom']
        ],
        h = [
          'grid',
          'geo',
          'parallel',
          'legend',
          'toolbox',
          'title',
          'visualMap',
          'dataZoom',
          'timeline'
        ];
      e.exports = function(e, t) {
        s(e, t),
          (e.series = l(e.series)),
          a(e.series, function(e) {
            if (r(e)) {
              var t = e.type;
              if ('line' === t) null != e.clipOverflow && (e.clip = e.clipOverflow);
              else if ('pie' === t || 'gauge' === t)
                null != e.clockWise && (e.clockwise = e.clockWise);
              else if ('gauge' === t) {
                var n = (function(e, t) {
                  t = t.split(',');
                  for (var n = e, i = 0; i < t.length && null != (n = n && n[t[i]]); i++);
                  return n;
                })(e, 'pointer.color');
                null != n &&
                  (function(e, t, n, i) {
                    t = t.split(',');
                    for (var a, o = e, r = 0; r < t.length - 1; r++)
                      null == o[(a = t[r])] && (o[a] = {}), (o = o[a]);
                    (i || null == o[t[r]]) && (o[t[r]] = n);
                  })(e, 'itemStyle.color', n);
              }
              u(e);
            }
          }),
          e.dataRange && (e.visualMap = e.dataRange),
          a(h, function(t) {
            var n = e[t];
            n &&
              (o(n) || (n = [n]),
              a(n, function(e) {
                u(e);
              }));
          });
      };
    },
    function(e, t, n) {
      var i = n(2),
        a = n(18),
        o = i.each,
        r = i.isObject,
        s = [
          'areaStyle',
          'lineStyle',
          'nodeStyle',
          'linkStyle',
          'chordStyle',
          'label',
          'labelLine'
        ];
      function l(e) {
        var t = e && e.itemStyle;
        if (t)
          for (var n = 0, a = s.length; n < a; n++) {
            var o = s[n],
              r = t.normal,
              l = t.emphasis;
            r &&
              r[o] &&
              ((e[o] = e[o] || {}),
              e[o].normal ? i.merge(e[o].normal, r[o]) : (e[o].normal = r[o]),
              (r[o] = null)),
              l &&
                l[o] &&
                ((e[o] = e[o] || {}),
                e[o].emphasis ? i.merge(e[o].emphasis, l[o]) : (e[o].emphasis = l[o]),
                (l[o] = null));
          }
      }
      function u(e, t, n) {
        if (e && e[t] && (e[t].normal || e[t].emphasis)) {
          var a = e[t].normal,
            o = e[t].emphasis;
          a && (n ? ((e[t].normal = e[t].emphasis = null), i.defaults(e[t], a)) : (e[t] = a)),
            o && ((e.emphasis = e.emphasis || {}), (e.emphasis[t] = o));
        }
      }
      function c(e) {
        u(e, 'itemStyle'),
          u(e, 'lineStyle'),
          u(e, 'areaStyle'),
          u(e, 'label'),
          u(e, 'labelLine'),
          u(e, 'upperLabel'),
          u(e, 'edgeLabel');
      }
      function h(e, t) {
        var n = r(e) && e[t],
          i = r(n) && n.textStyle;
        if (i)
          for (var o = 0, s = a.TEXT_STYLE_OPTIONS.length; o < s; o++) {
            t = a.TEXT_STYLE_OPTIONS[o];
            i.hasOwnProperty(t) && (n[t] = i[t]);
          }
      }
      function d(e) {
        e && (c(e), h(e, 'label'), e.emphasis && h(e.emphasis, 'label'));
      }
      function p(e) {
        return i.isArray(e) ? e : e ? [e] : [];
      }
      function g(e) {
        return (i.isArray(e) ? e[0] : e) || {};
      }
      e.exports = function(e, t) {
        o(p(e.series), function(e) {
          r(e) &&
            (function(e) {
              if (r(e)) {
                l(e),
                  c(e),
                  h(e, 'label'),
                  h(e, 'upperLabel'),
                  h(e, 'edgeLabel'),
                  e.emphasis &&
                    (h(e.emphasis, 'label'),
                    h(e.emphasis, 'upperLabel'),
                    h(e.emphasis, 'edgeLabel')),
                  (n = e.markPoint) && (l(n), d(n)),
                  (a = e.markLine) && (l(a), d(a));
                var t = e.markArea;
                t && d(t);
                var n,
                  a,
                  o = e.data;
                if ('graph' === e.type) {
                  o = o || e.nodes;
                  var s = e.links || e.edges;
                  if (s && !i.isTypedArray(s)) for (var p = 0; p < s.length; p++) d(s[p]);
                  i.each(e.categories, function(e) {
                    c(e);
                  });
                }
                if (o && !i.isTypedArray(o)) for (p = 0; p < o.length; p++) d(o[p]);
                if ((n = e.markPoint) && n.data) {
                  var g = n.data;
                  for (p = 0; p < g.length; p++) d(g[p]);
                }
                if ((a = e.markLine) && a.data) {
                  var f = a.data;
                  for (p = 0; p < f.length; p++)
                    i.isArray(f[p]) ? (d(f[p][0]), d(f[p][1])) : d(f[p]);
                }
                'gauge' === e.type
                  ? (h(e, 'axisLabel'), h(e, 'title'), h(e, 'detail'))
                  : 'treemap' === e.type
                  ? (u(e.breadcrumb, 'itemStyle'),
                    i.each(e.levels, function(e) {
                      c(e);
                    }))
                  : 'tree' === e.type && c(e.leaves);
              }
            })(e);
        });
        var n = [
          'xAxis',
          'yAxis',
          'radiusAxis',
          'angleAxis',
          'singleAxis',
          'parallelAxis',
          'radar'
        ];
        t && n.push('valueAxis', 'categoryAxis', 'logAxis', 'timeAxis'),
          o(n, function(t) {
            o(p(e[t]), function(e) {
              e && (h(e, 'axisLabel'), h(e.axisPointer, 'label'));
            });
          }),
          o(p(e.parallel), function(e) {
            var t = e && e.parallelAxisDefault;
            h(t, 'axisLabel'), h(t && t.axisPointer, 'label');
          }),
          o(p(e.calendar), function(e) {
            u(e, 'itemStyle'), h(e, 'dayLabel'), h(e, 'monthLabel'), h(e, 'yearLabel');
          }),
          o(p(e.radar), function(e) {
            h(e, 'name');
          }),
          o(p(e.geo), function(e) {
            r(e) &&
              (d(e),
              o(p(e.regions), function(e) {
                d(e);
              }));
          }),
          o(p(e.timeline), function(e) {
            d(e), u(e, 'label'), u(e, 'itemStyle'), u(e, 'controlStyle', !0);
            var t = e.data;
            i.isArray(t) &&
              i.each(t, function(e) {
                i.isObject(e) && (u(e, 'label'), u(e, 'itemStyle'));
              });
          }),
          o(p(e.toolbox), function(e) {
            u(e, 'iconStyle'),
              o(e.feature, function(e) {
                u(e, 'iconStyle');
              });
          }),
          h(g(e.axisPointer), 'label'),
          h(g(e.tooltip).axisPointer, 'label');
      };
    },
    function(e, t, n) {
      var i = n(2),
        a = i.createHashMap,
        o = i.each;
      function r(e) {
        o(e, function(t, n) {
          var i = [],
            a = [NaN, NaN],
            o = [t.stackResultDimension, t.stackedOverDimension],
            r = t.data,
            s = t.isStackedByIndex,
            l = r.map(o, function(o, l, u) {
              var c,
                h,
                d = r.get(t.stackedDimension, u);
              if (isNaN(d)) return a;
              s ? (h = r.getRawIndex(u)) : (c = r.get(t.stackedByDimension, u));
              for (var p = NaN, g = n - 1; g >= 0; g--) {
                var f = e[g];
                if ((s || (h = f.data.rawIndexOf(f.stackedByDimension, c)), h >= 0)) {
                  var m = f.data.getByRawIndex(f.stackResultDimension, h);
                  if ((d >= 0 && m > 0) || (d <= 0 && m < 0)) {
                    (d += m), (p = m);
                    break;
                  }
                }
              }
              return (i[0] = d), (i[1] = p), i;
            });
          r.hostModel.setData(l), (t.data = l);
        });
      }
      e.exports = function(e) {
        var t = a();
        e.eachSeries(function(e) {
          var n = e.get('stack');
          if (n) {
            var i = t.get(n) || t.set(n, []),
              a = e.getData(),
              o = {
                stackResultDimension: a.getCalculationInfo('stackResultDimension'),
                stackedOverDimension: a.getCalculationInfo('stackedOverDimension'),
                stackedDimension: a.getCalculationInfo('stackedDimension'),
                stackedByDimension: a.getCalculationInfo('stackedByDimension'),
                isStackedByIndex: a.getCalculationInfo('isStackedByIndex'),
                data: a,
                seriesModel: e
              };
            if (!o.stackedDimension || (!o.isStackedByIndex && !o.stackedByDimension)) return;
            i.length && a.setCalculationInfo('stackedOnSeries', i[i.length - 1].seriesModel),
              i.push(o);
          }
        }),
          t.each(r);
      };
    },
    function(e, t, n) {
      var i = n(195),
        a = {
          createOnAllSeries: !0,
          performRawSeries: !0,
          reset: function(e, t) {
            var n = e.getData(),
              a = (e.visualColorAccessPath || 'itemStyle.color').split('.'),
              o = e.get(a) || e.getColorFromPalette(e.name, null, t.getSeriesCount());
            n.setVisual('color', o);
            var r = (e.visualBorderColorAccessPath || 'itemStyle.borderColor').split('.'),
              s = e.get(r);
            if ((n.setVisual('borderColor', s), !t.isSeriesFiltered(e))) {
              'function' !== typeof o ||
                o instanceof i ||
                n.each(function(t) {
                  n.setItemVisual(t, 'color', o(e.getDataParams(t)));
                });
              return {
                dataEach: n.hasItemOption
                  ? function(e, t) {
                      var n = e.getItemModel(t),
                        i = n.get(a, !0),
                        o = n.get(r, !0);
                      null != i && e.setItemVisual(t, 'color', i),
                        null != o && e.setItemVisual(t, 'borderColor', o);
                    }
                  : null
              };
            }
          }
        };
      e.exports = a;
    },
    function(e, t, n) {
      var i = n(2),
        a = n(86),
        o = n(101).retrieveRawValue;
      e.exports = function(e, t) {
        var n = t.getModel('aria');
        if (n.get('show'))
          if (n.get('description')) e.setAttribute('aria-label', n.get('description'));
          else {
            var r = 0;
            t.eachSeries(function(e, t) {
              ++r;
            }, this);
            var s,
              l = n.get('data.maxCount') || 10,
              u = n.get('series.maxCount') || 10,
              c = Math.min(r, u);
            if (!(r < 1)) {
              var h = (function() {
                var e = t.getModel('title').option;
                e && e.length && (e = e[0]);
                return e && e.text;
              })();
              s = h ? p(g('general.withTitle'), { title: h }) : g('general.withoutTitle');
              var d = [];
              (s += p(g(r > 1 ? 'series.multiple.prefix' : 'series.single.prefix'), {
                seriesCount: r
              })),
                t.eachSeries(function(e, t) {
                  if (t < c) {
                    var n,
                      i = e.get('name'),
                      s = 'series.' + (r > 1 ? 'multiple' : 'single') + '.';
                    n = p((n = g(i ? s + 'withName' : s + 'withoutName')), {
                      seriesId: e.seriesIndex,
                      seriesName: e.get('name'),
                      seriesType:
                        ((y = e.subType), a.series.typeNames[y] || '\u81ea\u5b9a\u4e49\u56fe')
                    });
                    var u = e.getData();
                    (window.data = u),
                      u.count() > l
                        ? (n += p(g('data.partialData'), { displayCnt: l }))
                        : (n += g('data.allData'));
                    for (var h = [], f = 0; f < u.count(); f++)
                      if (f < l) {
                        var m = u.getName(f),
                          v = o(u, f);
                        h.push(
                          p(g(m ? 'data.withName' : 'data.withoutName'), { name: m, value: v })
                        );
                      }
                    (n += h.join(g('data.separator.middle')) + g('data.separator.end')), d.push(n);
                  }
                  var y;
                }),
                (s +=
                  d.join(g('series.multiple.separator.middle')) +
                  g('series.multiple.separator.end')),
                e.setAttribute('aria-label', s);
            }
          }
        function p(e, t) {
          if ('string' !== typeof e) return e;
          var n = e;
          return (
            i.each(t, function(e, t) {
              n = n.replace(new RegExp('\\{\\s*' + t + '\\s*\\}', 'g'), e);
            }),
            n
          );
        }
        function g(e) {
          var t = n.get(e);
          if (null == t) {
            for (var i = e.split('.'), o = a.aria, r = 0; r < i.length; ++r) o = o[i[r]];
            return o;
          }
          return t;
        }
      };
    },
    function(e, t, n) {
      var i = n(2),
        a = n(6),
        o = Math.PI;
      e.exports = function(e, t) {
        (t = t || {}),
          i.defaults(t, {
            text: 'loading',
            color: '#c23531',
            textColor: '#000',
            maskColor: 'rgba(255, 255, 255, 0.8)',
            zlevel: 0
          });
        var n = new a.Rect({ style: { fill: t.maskColor }, zlevel: t.zlevel, z: 1e4 }),
          r = new a.Arc({
            shape: { startAngle: -o / 2, endAngle: -o / 2 + 0.1, r: 10 },
            style: { stroke: t.color, lineCap: 'round', lineWidth: 5 },
            zlevel: t.zlevel,
            z: 10001
          }),
          s = new a.Rect({
            style: {
              fill: 'none',
              text: t.text,
              textPosition: 'right',
              textDistance: 10,
              textFill: t.textColor
            },
            zlevel: t.zlevel,
            z: 10001
          });
        r
          .animateShape(!0)
          .when(1e3, { endAngle: (3 * o) / 2 })
          .start('circularInOut'),
          r
            .animateShape(!0)
            .when(1e3, { startAngle: (3 * o) / 2 })
            .delay(300)
            .start('circularInOut');
        var l = new a.Group();
        return (
          l.add(r),
          l.add(s),
          l.add(n),
          (l.resize = function() {
            var t = e.getWidth() / 2,
              i = e.getHeight() / 2;
            r.setShape({ cx: t, cy: i });
            var a = r.shape.r;
            s.setShape({ x: t - a, y: i - a, width: 2 * a, height: 2 * a }),
              n.setShape({ x: 0, y: 0, width: e.getWidth(), height: e.getHeight() });
          }),
          l.resize(),
          l
        );
      };
    },
    function(e, t, n) {
      var i = n(2),
        a = i.each,
        o = i.map,
        r = i.isFunction,
        s = i.createHashMap,
        l = i.noop,
        u = n(292).createTask,
        c = n(149).getUID,
        h = n(403),
        d = n(417),
        p = n(18).normalizeToArray;
      function g(e, t, n, i) {
        (this.ecInstance = e), (this.api = t), this.unfinished;
        (n = this._dataProcessorHandlers = n.slice()), (i = this._visualHandlers = i.slice());
        (this._allHandlers = n.concat(i)), (this._stageTaskMap = s());
      }
      var f = g.prototype;
      function m(e, t, n, i, o) {
        var r;
        function s(e, t) {
          return e.setDirty && (!e.dirtyMap || e.dirtyMap.get(t.__pipeline.id));
        }
        (o = o || {}),
          a(t, function(t, a) {
            if (!o.visualType || o.visualType === t.visualType) {
              var l = e._stageTaskMap.get(t.uid),
                u = l.seriesTaskMap,
                c = l.overallTask;
              if (c) {
                var h,
                  d = c.agentStubMap;
                d.each(function(e) {
                  s(o, e) && (e.dirty(), (h = !0));
                }),
                  h && c.dirty(),
                  v(c, i);
                var p = e.getPerformArgs(c, o.block);
                d.each(function(e) {
                  e.perform(p);
                }),
                  (r |= c.perform(p));
              } else
                u &&
                  u.each(function(a, l) {
                    s(o, a) && a.dirty();
                    var u = e.getPerformArgs(a, o.block);
                    (u.skip = !t.performRawSeries && n.isSeriesFiltered(a.context.model)),
                      v(a, i),
                      (r |= a.perform(u));
                  });
            }
          }),
          (e.unfinished |= r);
      }
      (f.restoreData = function(e, t) {
        e.restoreData(t),
          this._stageTaskMap.each(function(e) {
            var t = e.overallTask;
            t && t.dirty();
          });
      }),
        (f.getPerformArgs = function(e, t) {
          if (e.__pipeline) {
            var n = this._pipelineMap.get(e.__pipeline.id),
              i = n.context,
              a =
                !t &&
                n.progressiveEnabled &&
                (!i || i.progressiveRender) &&
                e.__idxInPipeline > n.blockIndex
                  ? n.step
                  : null,
              o = i && i.modDataCount;
            return { step: a, modBy: null != o ? Math.ceil(o / a) : null, modDataCount: o };
          }
        }),
        (f.getPipeline = function(e) {
          return this._pipelineMap.get(e);
        }),
        (f.updateStreamModes = function(e, t) {
          var n = this._pipelineMap.get(e.uid),
            i = e.getData().count(),
            a = n.progressiveEnabled && t.incrementalPrepareRender && i >= n.threshold,
            o = e.get('large') && i >= e.get('largeThreshold'),
            r = 'mod' === e.get('progressiveChunkMode') ? i : null;
          e.pipelineContext = n.context = { progressiveRender: a, modDataCount: r, large: o };
        }),
        (f.restorePipelines = function(e) {
          var t = this,
            n = (t._pipelineMap = s());
          e.eachSeries(function(e) {
            var i = e.getProgressive(),
              a = e.uid;
            n.set(a, {
              id: a,
              head: null,
              tail: null,
              threshold: e.getProgressiveThreshold(),
              progressiveEnabled: i && !(e.preventIncremental && e.preventIncremental()),
              blockIndex: -1,
              step: Math.round(i || 700),
              count: 0
            }),
              T(t, e, e.dataTask);
          });
        }),
        (f.prepareStageTasks = function() {
          var e = this._stageTaskMap,
            t = this.ecInstance.getModel(),
            n = this.api;
          a(
            this._allHandlers,
            function(i) {
              var o = e.get(i.uid) || e.set(i.uid, []);
              i.reset &&
                (function(e, t, n, i, a) {
                  var o = n.seriesTaskMap || (n.seriesTaskMap = s()),
                    r = t.seriesType,
                    l = t.getTargetSeries;
                  t.createOnAllSeries
                    ? i.eachRawSeries(c)
                    : r
                    ? i.eachRawSeriesByType(r, c)
                    : l && l(i, a).each(c);
                  function c(n) {
                    var r = n.uid,
                      s = o.get(r) || o.set(r, u({ plan: S, reset: w, count: A }));
                    (s.context = {
                      model: n,
                      ecModel: i,
                      api: a,
                      useClearVisual: t.isVisual && !t.isLayout,
                      plan: t.plan,
                      reset: t.reset,
                      scheduler: e
                    }),
                      T(e, n, s);
                  }
                  var h = e._pipelineMap;
                  o.each(function(e, t) {
                    h.get(t) || (e.dispose(), o.removeKey(t));
                  });
                })(this, i, o, t, n),
                i.overallReset &&
                  (function(e, t, n, i, o) {
                    var r = (n.overallTask = n.overallTask || u({ reset: y }));
                    r.context = { ecModel: i, api: o, overallReset: t.overallReset, scheduler: e };
                    var l = (r.agentStubMap = r.agentStubMap || s()),
                      c = t.seriesType,
                      h = t.getTargetSeries,
                      d = !0,
                      p = t.modifyOutputEnd;
                    c
                      ? i.eachRawSeriesByType(c, g)
                      : h
                      ? h(i, o).each(g)
                      : ((d = !1), a(i.getSeries(), g));
                    function g(t) {
                      var n = t.uid,
                        i = l.get(n);
                      i || ((i = l.set(n, u({ reset: x, onDirty: b }))), r.dirty()),
                        (i.context = { model: t, overallProgress: d, modifyOutputEnd: p }),
                        (i.agent = r),
                        (i.__block = d),
                        T(e, t, i);
                    }
                    var f = e._pipelineMap;
                    l.each(function(e, t) {
                      f.get(t) || (e.dispose(), r.dirty(), l.removeKey(t));
                    });
                  })(this, i, o, t, n);
            },
            this
          );
        }),
        (f.prepareView = function(e, t, n, i) {
          var a = e.renderTask,
            o = a.context;
          (o.model = t),
            (o.ecModel = n),
            (o.api = i),
            (a.__block = !e.incrementalPrepareRender),
            T(this, t, a);
        }),
        (f.performDataProcessorTasks = function(e, t) {
          m(this, this._dataProcessorHandlers, e, t, { block: !0 });
        }),
        (f.performVisualTasks = function(e, t, n) {
          m(this, this._visualHandlers, e, t, n);
        }),
        (f.performSeriesTasks = function(e) {
          var t;
          e.eachSeries(function(e) {
            t |= e.dataTask.perform();
          }),
            (this.unfinished |= t);
        }),
        (f.plan = function() {
          this._pipelineMap.each(function(e) {
            var t = e.tail;
            do {
              if (t.__block) {
                e.blockIndex = t.__idxInPipeline;
                break;
              }
              t = t.getUpstream();
            } while (t);
          });
        });
      var v = (f.updatePayload = function(e, t) {
        'remain' !== t && (e.context.payload = t);
      });
      function y(e) {
        e.overallReset(e.ecModel, e.api, e.payload);
      }
      function x(e, t) {
        return e.overallProgress && _;
      }
      function _() {
        this.agent.dirty(), this.getDownstream().dirty();
      }
      function b() {
        this.agent && this.agent.dirty();
      }
      function S(e) {
        return e.plan && e.plan(e.model, e.ecModel, e.api, e.payload);
      }
      function w(e) {
        e.useClearVisual && e.data.clearAllVisual();
        var t = (e.resetDefines = p(e.reset(e.model, e.ecModel, e.api, e.payload)));
        return t.length > 1
          ? o(t, function(e, t) {
              return I(t);
            })
          : M;
      }
      var M = I(0);
      function I(e) {
        return function(t, n) {
          var i = n.data,
            a = n.resetDefines[e];
          if (a && a.dataEach) for (var o = t.start; o < t.end; o++) a.dataEach(i, o);
          else a && a.progress && a.progress(t, i);
        };
      }
      function A(e) {
        return e.data.count();
      }
      function T(e, t, n) {
        var i = t.uid,
          a = e._pipelineMap.get(i);
        !a.head && (a.head = n),
          a.tail && a.tail.pipe(n),
          (a.tail = n),
          (n.__idxInPipeline = a.count++),
          (n.__pipeline = a);
      }
      function D(e) {
        C = null;
        try {
          e(L, P);
        } catch (t) {}
        return C;
      }
      g.wrapStageHandler = function(e, t) {
        return (
          r(e) && (e = { overallReset: e, seriesType: D(e) }),
          (e.uid = c('stageHandler')),
          t && (e.visualType = t),
          e
        );
      };
      var C,
        L = {},
        P = {};
      function O(e, t) {
        for (var n in t.prototype) e[n] = l;
      }
      O(L, h),
        O(P, d),
        (L.eachSeriesByType = L.eachRawSeriesByType = function(e) {
          C = e;
        }),
        (L.eachComponent = function(e) {
          'series' === e.mainType && e.subType && (C = e.subType);
        });
      var k = g;
      e.exports = k;
    },
    function(e, t) {
      var n = [
          '#37A2DA',
          '#32C5E9',
          '#67E0E3',
          '#9FE6B8',
          '#FFDB5C',
          '#ff9f7f',
          '#fb7293',
          '#E062AE',
          '#E690D1',
          '#e7bcf3',
          '#9d96f5',
          '#8378EA',
          '#96BFFF'
        ],
        i = {
          color: n,
          colorLayer: [
            ['#37A2DA', '#ffd85c', '#fd7b5f'],
            ['#37A2DA', '#67E0E3', '#FFDB5C', '#ff9f7f', '#E062AE', '#9d96f5'],
            [
              '#37A2DA',
              '#32C5E9',
              '#9FE6B8',
              '#FFDB5C',
              '#ff9f7f',
              '#fb7293',
              '#e7bcf3',
              '#8378EA',
              '#96BFFF'
            ],
            n
          ]
        };
      e.exports = i;
    },
    function(e, t) {
      var n = [
          '#dd6b66',
          '#759aa0',
          '#e69d87',
          '#8dc1a9',
          '#ea7e53',
          '#eedd78',
          '#73a373',
          '#73b9bc',
          '#7289ab',
          '#91ca8c',
          '#f49f42'
        ],
        i = {
          color: n,
          backgroundColor: '#333',
          tooltip: { axisPointer: { lineStyle: { color: '#eee' }, crossStyle: { color: '#eee' } } },
          legend: { textStyle: { color: '#eee' } },
          textStyle: { color: '#eee' },
          title: { textStyle: { color: '#eee' } },
          toolbox: { iconStyle: { normal: { borderColor: '#eee' } } },
          dataZoom: { textStyle: { color: '#eee' } },
          visualMap: { textStyle: { color: '#eee' } },
          timeline: {
            lineStyle: { color: '#eee' },
            itemStyle: { normal: { color: n[1] } },
            label: { normal: { textStyle: { color: '#eee' } } },
            controlStyle: { normal: { color: '#eee', borderColor: '#eee' } }
          },
          timeAxis: {
            axisLine: { lineStyle: { color: '#eee' } },
            axisTick: { lineStyle: { color: '#eee' } },
            axisLabel: { textStyle: { color: '#eee' } },
            splitLine: { lineStyle: { type: 'dashed', color: '#aaa' } },
            splitArea: { areaStyle: { color: '#eee' } }
          },
          logAxis: {
            axisLine: { lineStyle: { color: '#eee' } },
            axisTick: { lineStyle: { color: '#eee' } },
            axisLabel: { textStyle: { color: '#eee' } },
            splitLine: { lineStyle: { type: 'dashed', color: '#aaa' } },
            splitArea: { areaStyle: { color: '#eee' } }
          },
          valueAxis: {
            axisLine: { lineStyle: { color: '#eee' } },
            axisTick: { lineStyle: { color: '#eee' } },
            axisLabel: { textStyle: { color: '#eee' } },
            splitLine: { lineStyle: { type: 'dashed', color: '#aaa' } },
            splitArea: { areaStyle: { color: '#eee' } }
          },
          categoryAxis: {
            axisLine: { lineStyle: { color: '#eee' } },
            axisTick: { lineStyle: { color: '#eee' } },
            axisLabel: { textStyle: { color: '#eee' } },
            splitLine: { lineStyle: { type: 'dashed', color: '#aaa' } },
            splitArea: { areaStyle: { color: '#eee' } }
          },
          line: { symbol: 'circle' },
          graph: { color: n },
          gauge: { title: { textStyle: { color: '#eee' } } },
          candlestick: {
            itemStyle: {
              normal: {
                color: '#FD1050',
                color0: '#0CF49B',
                borderColor: '#FD1050',
                borderColor0: '#0CF49B'
              }
            }
          }
        };
      i.categoryAxis.splitLine.show = !1;
      var a = i;
      e.exports = a;
    },
    ,
    function(e, t, n) {
      var i = n(2),
        a = n(79),
        o = n(64),
        r = n(124),
        s = n(36),
        l = n(25);
      l.getLayoutRect;
      t.getLayoutRect = l.getLayoutRect;
      var u = n(72),
        c = u.enableDataStack,
        h = u.isDimensionStacked,
        d = u.getStackedDimension,
        p = n(294);
      t.completeDimensions = p;
      var g = n(123);
      t.createDimensions = g;
      var f = n(54);
      t.createSymbol = f.createSymbol;
      var m = { isDimensionStacked: h, enableDataStack: c, getStackedDimension: d };
      (t.createList = function(e) {
        return a(e.getSource(), e);
      }),
        (t.dataStack = m),
        (t.createScale = function(e, t) {
          var n = t;
          s.isInstance(t) || ((n = new s(t)), i.mixin(n, r));
          var a = o.createScaleByModel(n);
          return a.setExtent(e[0], e[1]), o.niceScaleExtent(a, n), a;
        }),
        (t.mixinAxisModelCommonMethods = function(e) {
          i.mixin(e, r);
        });
    },
    function(e, t, n) {
      var i = n(2),
        a = n(198),
        o = n(420),
        r = a.prototype,
        s = a.extend({
          type: 'ordinal',
          init: function(e, t) {
            (e && !i.isArray(e)) || (e = new o({ categories: e })),
              (this._ordinalMeta = e),
              (this._extent = t || [0, e.categories.length - 1]);
          },
          parse: function(e) {
            return 'string' === typeof e ? this._ordinalMeta.getOrdinal(e) : Math.round(e);
          },
          contain: function(e) {
            return (
              (e = this.parse(e)),
              r.contain.call(this, e) && null != this._ordinalMeta.categories[e]
            );
          },
          normalize: function(e) {
            return r.normalize.call(this, this.parse(e));
          },
          scale: function(e) {
            return Math.round(r.scale.call(this, e));
          },
          getTicks: function() {
            for (var e = [], t = this._extent, n = t[0]; n <= t[1]; ) e.push(n), n++;
            return e;
          },
          getLabel: function(e) {
            if (!this.isBlank()) return this._ordinalMeta.categories[e];
          },
          count: function() {
            return this._extent[1] - this._extent[0] + 1;
          },
          unionExtentFromData: function(e, t) {
            this.unionExtent(e.getApproximateExtent(t));
          },
          getOrdinalMeta: function() {
            return this._ordinalMeta;
          },
          niceTicks: i.noop,
          niceExtent: i.noop
        });
      s.create = function() {
        return new s();
      };
      var l = s;
      e.exports = l;
    },
    function(e, t, n) {
      var i = n(2),
        a = n(16),
        o = n(30),
        r = n(421),
        s = n(199),
        l = s.prototype,
        u = Math.ceil,
        c = Math.floor,
        h = s.extend({
          type: 'time',
          getLabel: function(e) {
            var t = this._stepLvl,
              n = new Date(e);
            return o.formatTime(t[0], n, this.getSetting('useUTC'));
          },
          niceExtent: function(e) {
            var t = this._extent;
            if (
              (t[0] === t[1] && ((t[0] -= 864e5), (t[1] += 864e5)),
              t[1] === -1 / 0 && t[0] === 1 / 0)
            ) {
              var n = new Date();
              (t[1] = +new Date(n.getFullYear(), n.getMonth(), n.getDate())), (t[0] = t[1] - 864e5);
            }
            this.niceTicks(e.splitNumber, e.minInterval, e.maxInterval);
            var i = this._interval;
            e.fixMin || (t[0] = a.round(c(t[0] / i) * i)),
              e.fixMax || (t[1] = a.round(u(t[1] / i) * i));
          },
          niceTicks: function(e, t, n) {
            e = e || 10;
            var i = this._extent,
              o = i[1] - i[0],
              s = o / e;
            null != t && s < t && (s = t), null != n && s > n && (s = n);
            var l = d.length,
              h = (function(e, t, n, i) {
                for (; n < i; ) {
                  var a = (n + i) >>> 1;
                  e[a][1] < t ? (n = a + 1) : (i = a);
                }
                return n;
              })(d, s, 0, l),
              p = d[Math.min(h, l - 1)],
              g = p[1];
            if ('year' === p[0]) {
              var f = o / g;
              g *= a.nice(f / e, !0);
            }
            var m = this.getSetting('useUTC')
                ? 0
                : 60 * new Date(+i[0] || +i[1]).getTimezoneOffset() * 1e3,
              v = [Math.round(u((i[0] - m) / g) * g + m), Math.round(c((i[1] - m) / g) * g + m)];
            r.fixExtent(v, i), (this._stepLvl = p), (this._interval = g), (this._niceExtent = v);
          },
          parse: function(e) {
            return +a.parseDate(e);
          }
        });
      i.each(['contain', 'normalize'], function(e) {
        h.prototype[e] = function(t) {
          return l[e].call(this, this.parse(t));
        };
      });
      var d = [
        ['hh:mm:ss', 1e3],
        ['hh:mm:ss', 5e3],
        ['hh:mm:ss', 1e4],
        ['hh:mm:ss', 15e3],
        ['hh:mm:ss', 3e4],
        ['hh:mm\nMM-dd', 6e4],
        ['hh:mm\nMM-dd', 3e5],
        ['hh:mm\nMM-dd', 6e5],
        ['hh:mm\nMM-dd', 9e5],
        ['hh:mm\nMM-dd', 18e5],
        ['hh:mm\nMM-dd', 36e5],
        ['hh:mm\nMM-dd', 72e5],
        ['hh:mm\nMM-dd', 216e5],
        ['hh:mm\nMM-dd', 432e5],
        ['MM-dd\nyyyy', 864e5],
        ['MM-dd\nyyyy', 1728e5],
        ['MM-dd\nyyyy', 2592e5],
        ['MM-dd\nyyyy', 3456e5],
        ['MM-dd\nyyyy', 432e6],
        ['MM-dd\nyyyy', 5184e5],
        ['week', 6048e5],
        ['MM-dd\nyyyy', 864e6],
        ['week', 12096e5],
        ['week', 18144e5],
        ['month', 26784e5],
        ['week', 36288e5],
        ['month', 53568e5],
        ['week', 6048e6],
        ['quarter', 8208e6],
        ['month', 107136e5],
        ['month', 13392e6],
        ['half-year', 16416e6],
        ['month', 214272e5],
        ['month', 26784e6],
        ['year', 32832e6]
      ];
      h.create = function(e) {
        return new h({ useUTC: e.ecModel.get('useUTC') });
      };
      var p = h;
      e.exports = p;
    },
    function(e, t, n) {
      var i = n(2),
        a = n(52),
        o = n(18).makeInner,
        r = n(64),
        s = r.makeLabelFormatter,
        l = r.getOptionCategoryInterval,
        u = r.shouldShowAllLabels,
        c = o();
      function h(e, t) {
        var n,
          a,
          o = d(e, 'labels'),
          r = l(t),
          s = p(o, r);
        return (
          s ||
          (i.isFunction(r)
            ? (n = m(e, r))
            : ((a =
                'auto' === r
                  ? (function(e) {
                      var t = c(e).autoInterval;
                      return null != t ? t : (c(e).autoInterval = e.calculateCategoryInterval());
                    })(e)
                  : r),
              (n = f(e, a))),
          g(o, r, { labels: n, labelCategoryInterval: a }))
        );
      }
      function d(e, t) {
        return c(e)[t] || (c(e)[t] = []);
      }
      function p(e, t) {
        for (var n = 0; n < e.length; n++) if (e[n].key === t) return e[n].value;
      }
      function g(e, t, n) {
        return e.push({ key: t, value: n }), n;
      }
      function f(e, t, n) {
        var i = s(e),
          a = e.scale,
          o = a.getExtent(),
          r = e.getLabelModel(),
          l = [],
          c = Math.max((t || 0) + 1, 1),
          h = o[0],
          d = a.count();
        0 !== h && c > 1 && d / c > 2 && (h = Math.round(Math.ceil(h / c) * c));
        var p = u(e),
          g = r.get('showMinLabel') || p,
          f = r.get('showMaxLabel') || p;
        g && h !== o[0] && v(o[0]);
        for (var m = h; m <= o[1]; m += c) v(m);
        function v(e) {
          l.push(n ? e : { formattedLabel: i(e), rawLabel: a.getLabel(e), tickValue: e });
        }
        return f && m - c !== o[1] && v(o[1]), l;
      }
      function m(e, t, n) {
        var a = e.scale,
          o = s(e),
          r = [];
        return (
          i.each(a.getTicks(), function(e) {
            var i = a.getLabel(e);
            t(e, i) && r.push(n ? e : { formattedLabel: o(e), rawLabel: i, tickValue: e });
          }),
          r
        );
      }
      (t.createAxisLabels = function(e) {
        return 'category' === e.type
          ? (function(e) {
              var t = e.getLabelModel(),
                n = h(e, t);
              return !t.get('show') || e.scale.isBlank()
                ? { labels: [], labelCategoryInterval: n.labelCategoryInterval }
                : n;
            })(e)
          : (function(e) {
              var t = e.scale.getTicks(),
                n = s(e);
              return {
                labels: i.map(t, function(t, i) {
                  return { formattedLabel: n(t, i), rawLabel: e.scale.getLabel(t), tickValue: t };
                })
              };
            })(e);
      }),
        (t.createAxisTicks = function(e, t) {
          return 'category' === e.type
            ? (function(e, t) {
                var n,
                  a,
                  o = d(e, 'ticks'),
                  r = l(t),
                  s = p(o, r);
                if (s) return s;
                (t.get('show') && !e.scale.isBlank()) || (n = []);
                if (i.isFunction(r)) n = m(e, r, !0);
                else if ('auto' === r) {
                  var u = h(e, e.getLabelModel());
                  (a = u.labelCategoryInterval),
                    (n = i.map(u.labels, function(e) {
                      return e.tickValue;
                    }));
                } else n = f(e, (a = r), !0);
                return g(o, r, { ticks: n, tickCategoryInterval: a });
              })(e, t)
            : { ticks: e.scale.getTicks() };
        }),
        (t.calculateCategoryInterval = function(e) {
          var t = (function(e) {
              var t = e.getLabelModel();
              return {
                axisRotate: e.getRotate
                  ? e.getRotate()
                  : e.isHorizontal && !e.isHorizontal()
                  ? 90
                  : 0,
                labelRotate: t.get('rotate') || 0,
                font: t.getFont()
              };
            })(e),
            n = s(e),
            i = ((t.axisRotate - t.labelRotate) / 180) * Math.PI,
            o = e.scale,
            r = o.getExtent(),
            l = o.count();
          if (r[1] - r[0] < 1) return 0;
          var u = 1;
          l > 40 && (u = Math.max(1, Math.floor(l / 40)));
          for (
            var h = r[0],
              d = e.dataToCoord(h + 1) - e.dataToCoord(h),
              p = Math.abs(d * Math.cos(i)),
              g = Math.abs(d * Math.sin(i)),
              f = 0,
              m = 0;
            h <= r[1];
            h += u
          ) {
            var v,
              y,
              x = a.getBoundingRect(n(h), t.font, 'center', 'top');
            (v = 1.3 * x.width),
              (y = 1.3 * x.height),
              (f = Math.max(f, v, 7)),
              (m = Math.max(m, y, 7));
          }
          var _ = f / p,
            b = m / g;
          isNaN(_) && (_ = 1 / 0), isNaN(b) && (b = 1 / 0);
          var S = Math.max(0, Math.floor(Math.min(_, b))),
            w = c(e.model),
            M = e.getExtent(),
            I = w.lastAutoInterval,
            A = w.lastTickCount;
          return (
            null != I &&
            null != A &&
            Math.abs(I - S) <= 1 &&
            Math.abs(A - l) <= 1 &&
            I > S &&
            w.axisExtend0 === M[0] &&
            w.axisExtend1 === M[1]
              ? (S = I)
              : ((w.lastTickCount = l),
                (w.lastAutoInterval = S),
                (w.axisExtend0 = M[0]),
                (w.axisExtend1 = M[1])),
            S
          );
        });
    },
    function(e, t, n) {
      n(23).__DEV__;
      var i = n(79),
        a = n(38).extend({
          type: 'series.line',
          dependencies: ['grid', 'polar'],
          getInitialData: function(e, t) {
            return i(this.getSource(), this);
          },
          defaultOption: {
            zlevel: 0,
            z: 2,
            coordinateSystem: 'cartesian2d',
            legendHoverLink: !0,
            hoverAnimation: !0,
            clip: !0,
            label: { position: 'top' },
            lineStyle: { width: 2, type: 'solid' },
            step: !1,
            smooth: !1,
            smoothMonotone: null,
            symbol: 'emptyCircle',
            symbolSize: 4,
            symbolRotate: null,
            showSymbol: !0,
            showAllSymbol: 'auto',
            connectNulls: !1,
            sampling: 'none',
            animationEasing: 'linear',
            progressive: 0,
            hoverLayerThreshold: 1 / 0
          }
        });
      e.exports = a;
    },
    function(e, t, n) {
      n(23).__DEV__;
      var i = n(2),
        a = n(153),
        o = n(201),
        r = n(791),
        s = n(6),
        l = n(18),
        u = n(427),
        c = u.Polyline,
        h = u.Polygon,
        d = n(71),
        p = n(426),
        g = p.prepareDataCoordInfo,
        f = p.getStackedOnPoint,
        m = n(154),
        v = m.createGridClipPath,
        y = m.createPolarClipPath;
      function x(e, t) {
        if (e.length === t.length) {
          for (var n = 0; n < e.length; n++) {
            var i = e[n],
              a = t[n];
            if (i[0] !== a[0] || i[1] !== a[1]) return;
          }
          return !0;
        }
      }
      function _(e) {
        return 'number' === typeof e ? e : e ? 0.5 : 0;
      }
      function b(e, t, n) {
        for (
          var i = t.getBaseAxis(), a = 'x' === i.dim || 'radius' === i.dim ? 0 : 1, o = [], r = 0;
          r < e.length - 1;
          r++
        ) {
          var s = e[r + 1],
            l = e[r];
          o.push(l);
          var u = [];
          switch (n) {
            case 'end':
              (u[a] = s[a]), (u[1 - a] = l[1 - a]), o.push(u);
              break;
            case 'middle':
              var c = (l[a] + s[a]) / 2,
                h = [];
              (u[a] = h[a] = c), (u[1 - a] = l[1 - a]), (h[1 - a] = s[1 - a]), o.push(u), o.push(h);
              break;
            default:
              (u[a] = l[a]), (u[1 - a] = s[1 - a]), o.push(u);
          }
        }
        return e[r] && o.push(e[r]), o;
      }
      function S(e, t, n) {
        var a = e.get('showAllSymbol'),
          r = 'auto' === a;
        if (!a || r) {
          var s = n.getAxesByScale('ordinal')[0];
          if (
            s &&
            (!r ||
              !(function(e, t) {
                var n = e.getExtent(),
                  i = Math.abs(n[1] - n[0]) / e.scale.count();
                isNaN(i) && (i = 0);
                for (var a = t.count(), r = Math.max(1, Math.round(a / 5)), s = 0; s < a; s += r)
                  if (1.5 * o.getSymbolSize(t, s)[e.isHorizontal() ? 1 : 0] > i) return !1;
                return !0;
              })(s, t))
          ) {
            var l = t.mapDimension(s.dim),
              u = {};
            return (
              i.each(s.getViewLabels(), function(e) {
                u[e.tickValue] = 1;
              }),
              function(e) {
                return !u.hasOwnProperty(t.get(l, e));
              }
            );
          }
        }
      }
      function w(e, t, n) {
        if ('cartesian2d' === e.type) {
          var i = e.getBaseAxis().isHorizontal(),
            a = v(e, t, n);
          if (!n.get('clip', !0)) {
            var o = a.shape,
              r = Math.max(o.width, o.height);
            i ? ((o.y -= r), (o.height += 2 * r)) : ((o.x -= r), (o.width += 2 * r));
          }
          return a;
        }
        return y(e, t, n);
      }
      var M = d.extend({
        type: 'line',
        init: function() {
          var e = new s.Group(),
            t = new a();
          this.group.add(t.group), (this._symbolDraw = t), (this._lineGroup = e);
        },
        render: function(e, t, n) {
          var a = e.coordinateSystem,
            o = this.group,
            r = e.getData(),
            l = e.getModel('lineStyle'),
            u = e.getModel('areaStyle'),
            c = r.mapArray(r.getItemLayout),
            h = 'polar' === a.type,
            d = this._coordSys,
            p = this._symbolDraw,
            m = this._polyline,
            v = this._polygon,
            y = this._lineGroup,
            M = e.get('animation'),
            I = !u.isEmpty(),
            A = u.get('origin'),
            T = (function(e, t, n) {
              if (!n.valueDim) return [];
              for (var i = [], a = 0, o = t.count(); a < o; a++) i.push(f(n, e, t, a));
              return i;
            })(a, r, g(a, r, A)),
            D = e.get('showSymbol'),
            C = D && !h && S(e, r, a),
            L = this._data;
          L &&
            L.eachItemGraphicEl(function(e, t) {
              e.__temp && (o.remove(e), L.setItemGraphicEl(t, null));
            }),
            D || p.remove(),
            o.add(y);
          var P,
            O = !h && e.get('step');
          a &&
            a.getArea &&
            (null != (P = a.getArea()).width
              ? ((P.x -= 0.1), (P.y -= 0.1), (P.width += 0.2), (P.height += 0.2))
              : P.r0 && ((P.r0 -= 0.5), (P.r1 += 0.5))),
            m && d.type === a.type && O === this._step
              ? (I && !v
                  ? (v = this._newPolygon(c, T, a, M))
                  : v && !I && (y.remove(v), (v = this._polygon = null)),
                y.setClipPath(w(a, !1, e)),
                D && p.updateData(r, { isIgnore: C, clipShape: P }),
                r.eachItemGraphicEl(function(e) {
                  e.stopAnimation(!0);
                }),
                (x(this._stackedOnPoints, T) && x(this._points, c)) ||
                  (M
                    ? this._updateAnimation(r, T, a, n, O, A)
                    : (O && ((c = b(c, a, O)), (T = b(T, a, O))),
                      m.setShape({ points: c }),
                      v && v.setShape({ points: c, stackedOnPoints: T }))))
              : (D && p.updateData(r, { isIgnore: C, clipShape: P }),
                O && ((c = b(c, a, O)), (T = b(T, a, O))),
                (m = this._newPolyline(c, a, M)),
                I && (v = this._newPolygon(c, T, a, M)),
                y.setClipPath(w(a, !0, e)));
          var k =
            (function(e, t) {
              var n = e.getVisual('visualMeta');
              if (n && n.length && e.count() && 'cartesian2d' === t.type) {
                for (var a, o, r = n.length - 1; r >= 0; r--) {
                  var l = n[r].dimension,
                    u = e.dimensions[l],
                    c = e.getDimensionInfo(u);
                  if ('x' === (a = c && c.coordDim) || 'y' === a) {
                    o = n[r];
                    break;
                  }
                }
                if (o) {
                  var h = t.getAxis(a),
                    d = i.map(o.stops, function(e) {
                      return { coord: h.toGlobalCoord(h.dataToCoord(e.value)), color: e.color };
                    }),
                    p = d.length,
                    g = o.outerColors.slice();
                  p && d[0].coord > d[p - 1].coord && (d.reverse(), g.reverse());
                  var f = d[0].coord - 10,
                    m = d[p - 1].coord + 10,
                    v = m - f;
                  if (v < 0.001) return 'transparent';
                  i.each(d, function(e) {
                    e.offset = (e.coord - f) / v;
                  }),
                    d.push({ offset: p ? d[p - 1].offset : 0.5, color: g[1] || 'transparent' }),
                    d.unshift({ offset: p ? d[0].offset : 0.5, color: g[0] || 'transparent' });
                  var y = new s.LinearGradient(0, 0, 0, 0, d, !0);
                  return (y[a] = f), (y[a + '2'] = m), y;
                }
              }
            })(r, a) || r.getVisual('color');
          m.useStyle(i.defaults(l.getLineStyle(), { fill: 'none', stroke: k, lineJoin: 'bevel' }));
          var N = e.get('smooth');
          if (
            ((N = _(e.get('smooth'))),
            m.setShape({
              smooth: N,
              smoothMonotone: e.get('smoothMonotone'),
              connectNulls: e.get('connectNulls')
            }),
            v)
          ) {
            var R = r.getCalculationInfo('stackedOnSeries'),
              E = 0;
            v.useStyle(i.defaults(u.getAreaStyle(), { fill: k, opacity: 0.7, lineJoin: 'bevel' })),
              R && (E = _(R.get('smooth'))),
              v.setShape({
                smooth: N,
                stackedOnSmooth: E,
                smoothMonotone: e.get('smoothMonotone'),
                connectNulls: e.get('connectNulls')
              });
          }
          (this._data = r),
            (this._coordSys = a),
            (this._stackedOnPoints = T),
            (this._points = c),
            (this._step = O),
            (this._valueOrigin = A);
        },
        dispose: function() {},
        highlight: function(e, t, n, i) {
          var a = e.getData(),
            r = l.queryDataIndex(a, i);
          if (!(r instanceof Array) && null != r && r >= 0) {
            var s = a.getItemGraphicEl(r);
            if (!s) {
              var u = a.getItemLayout(r);
              if (!u) return;
              ((s = new o(a, r)).position = u),
                s.setZ(e.get('zlevel'), e.get('z')),
                (s.ignore = isNaN(u[0]) || isNaN(u[1])),
                (s.__temp = !0),
                a.setItemGraphicEl(r, s),
                s.stopSymbolAnimation(!0),
                this.group.add(s);
            }
            s.highlight();
          } else d.prototype.highlight.call(this, e, t, n, i);
        },
        downplay: function(e, t, n, i) {
          var a = e.getData(),
            o = l.queryDataIndex(a, i);
          if (null != o && o >= 0) {
            var r = a.getItemGraphicEl(o);
            r && (r.__temp ? (a.setItemGraphicEl(o, null), this.group.remove(r)) : r.downplay());
          } else d.prototype.downplay.call(this, e, t, n, i);
        },
        _newPolyline: function(e) {
          var t = this._polyline;
          return (
            t && this._lineGroup.remove(t),
            (t = new c({ shape: { points: e }, silent: !0, z2: 10 })),
            this._lineGroup.add(t),
            (this._polyline = t),
            t
          );
        },
        _newPolygon: function(e, t) {
          var n = this._polygon;
          return (
            n && this._lineGroup.remove(n),
            (n = new h({ shape: { points: e, stackedOnPoints: t }, silent: !0 })),
            this._lineGroup.add(n),
            (this._polygon = n),
            n
          );
        },
        _updateAnimation: function(e, t, n, i, a, o) {
          var l = this._polyline,
            u = this._polygon,
            c = e.hostModel,
            h = r(this._data, e, this._stackedOnPoints, t, this._coordSys, n, this._valueOrigin, o),
            d = h.current,
            p = h.stackedOnCurrent,
            g = h.next,
            f = h.stackedOnNext;
          a &&
            ((d = b(h.current, n, a)),
            (p = b(h.stackedOnCurrent, n, a)),
            (g = b(h.next, n, a)),
            (f = b(h.stackedOnNext, n, a))),
            (l.shape.__points = h.current),
            (l.shape.points = d),
            s.updateProps(l, { shape: { points: g } }, c),
            u &&
              (u.setShape({ points: d, stackedOnPoints: p }),
              s.updateProps(u, { shape: { points: g, stackedOnPoints: f } }, c));
          for (var m = [], v = h.status, y = 0; y < v.length; y++) {
            if ('=' === v[y].cmd) {
              var x = e.getItemGraphicEl(v[y].idx1);
              x && m.push({ el: x, ptIdx: y });
            }
          }
          l.animators &&
            l.animators.length &&
            l.animators[0].during(function() {
              for (var e = 0; e < m.length; e++) {
                m[e].el.attr('position', l.shape.__points[m[e].ptIdx]);
              }
            });
        },
        remove: function(e) {
          var t = this.group,
            n = this._data;
          this._lineGroup.removeAll(),
            this._symbolDraw.remove(!0),
            n &&
              n.eachItemGraphicEl(function(e, i) {
                e.__temp && (t.remove(e), n.setItemGraphicEl(i, null));
              }),
            (this._polyline = this._polygon = this._coordSys = this._points = this._stackedOnPoints = this._data = null);
        }
      });
      e.exports = M;
    },
    function(e, t, n) {
      var i = n(426),
        a = i.prepareDataCoordInfo,
        o = i.getStackedOnPoint;
      e.exports = function(e, t, n, i, r, s, l, u) {
        for (
          var c = (function(e, t) {
              var n = [];
              return (
                t
                  .diff(e)
                  .add(function(e) {
                    n.push({ cmd: '+', idx: e });
                  })
                  .update(function(e, t) {
                    n.push({ cmd: '=', idx: t, idx1: e });
                  })
                  .remove(function(e) {
                    n.push({ cmd: '-', idx: e });
                  })
                  .execute(),
                n
              );
            })(e, t),
            h = [],
            d = [],
            p = [],
            g = [],
            f = [],
            m = [],
            v = [],
            y = a(r, t, l),
            x = a(s, e, u),
            _ = 0;
          _ < c.length;
          _++
        ) {
          var b = c[_],
            S = !0;
          switch (b.cmd) {
            case '=':
              var w = e.getItemLayout(b.idx),
                M = t.getItemLayout(b.idx1);
              (isNaN(w[0]) || isNaN(w[1])) && (w = M.slice()),
                h.push(w),
                d.push(M),
                p.push(n[b.idx]),
                g.push(i[b.idx1]),
                v.push(t.getRawIndex(b.idx1));
              break;
            case '+':
              var I = b.idx;
              h.push(
                r.dataToPoint([t.get(y.dataDimsForPoint[0], I), t.get(y.dataDimsForPoint[1], I)])
              ),
                d.push(t.getItemLayout(I).slice()),
                p.push(o(y, r, t, I)),
                g.push(i[I]),
                v.push(t.getRawIndex(I));
              break;
            case '-':
              I = b.idx;
              var A = e.getRawIndex(I);
              A !== I
                ? (h.push(e.getItemLayout(I)),
                  d.push(
                    s.dataToPoint([
                      e.get(x.dataDimsForPoint[0], I),
                      e.get(x.dataDimsForPoint[1], I)
                    ])
                  ),
                  p.push(n[I]),
                  g.push(o(x, s, e, I)),
                  v.push(A))
                : (S = !1);
          }
          S && (f.push(b), m.push(m.length));
        }
        m.sort(function(e, t) {
          return v[e] - v[t];
        });
        var T = [],
          D = [],
          C = [],
          L = [],
          P = [];
        for (_ = 0; _ < m.length; _++) {
          I = m[_];
          (T[_] = h[I]), (D[_] = d[I]), (C[_] = p[I]), (L[_] = g[I]), (P[_] = f[I]);
        }
        return { current: T, next: D, stackedOnCurrent: C, stackedOnNext: L, status: P };
      };
    },
    function(e, t) {
      var n = {
          average: function(e) {
            for (var t = 0, n = 0, i = 0; i < e.length; i++) isNaN(e[i]) || ((t += e[i]), n++);
            return 0 === n ? NaN : t / n;
          },
          sum: function(e) {
            for (var t = 0, n = 0; n < e.length; n++) t += e[n] || 0;
            return t;
          },
          max: function(e) {
            for (var t = -1 / 0, n = 0; n < e.length; n++) e[n] > t && (t = e[n]);
            return isFinite(t) ? t : NaN;
          },
          min: function(e) {
            for (var t = 1 / 0, n = 0; n < e.length; n++) e[n] < t && (t = e[n]);
            return isFinite(t) ? t : NaN;
          },
          nearest: function(e) {
            return e[0];
          }
        },
        i = function(e, t) {
          return Math.round(e.length / 2);
        };
      e.exports = function(e) {
        return {
          seriesType: e,
          modifyOutputEnd: !0,
          reset: function(e, t, a) {
            var o = e.getData(),
              r = e.get('sampling'),
              s = e.coordinateSystem;
            if ('cartesian2d' === s.type && r) {
              var l,
                u = s.getBaseAxis(),
                c = s.getOtherAxis(u),
                h = u.getExtent(),
                d = h[1] - h[0],
                p = Math.round(o.count() / d);
              if (p > 1)
                'string' === typeof r ? (l = n[r]) : 'function' === typeof r && (l = r),
                  l && e.setData(o.downSample(o.mapDimension(c.dim), 1 / p, l, i));
            }
          }
        };
      };
    },
    function(e, t, n) {
      var i = n(2),
        a = n(29),
        o = n(794);
      function r(e) {
        o.call(this, e);
      }
      (r.prototype = {
        constructor: r,
        type: 'cartesian2d',
        dimensions: ['x', 'y'],
        getBaseAxis: function() {
          return (
            this.getAxesByScale('ordinal')[0] || this.getAxesByScale('time')[0] || this.getAxis('x')
          );
        },
        containPoint: function(e) {
          var t = this.getAxis('x'),
            n = this.getAxis('y');
          return t.contain(t.toLocalCoord(e[0])) && n.contain(n.toLocalCoord(e[1]));
        },
        containData: function(e) {
          return this.getAxis('x').containData(e[0]) && this.getAxis('y').containData(e[1]);
        },
        dataToPoint: function(e, t, n) {
          var i = this.getAxis('x'),
            a = this.getAxis('y');
          return (
            ((n = n || [])[0] = i.toGlobalCoord(i.dataToCoord(e[0]))),
            (n[1] = a.toGlobalCoord(a.dataToCoord(e[1]))),
            n
          );
        },
        clampData: function(e, t) {
          var n = this.getAxis('x').scale,
            i = this.getAxis('y').scale,
            a = n.getExtent(),
            o = i.getExtent(),
            r = n.parse(e[0]),
            s = i.parse(e[1]);
          return (
            ((t = t || [])[0] = Math.min(Math.max(Math.min(a[0], a[1]), r), Math.max(a[0], a[1]))),
            (t[1] = Math.min(Math.max(Math.min(o[0], o[1]), s), Math.max(o[0], o[1]))),
            t
          );
        },
        pointToData: function(e, t) {
          var n = this.getAxis('x'),
            i = this.getAxis('y');
          return (
            ((t = t || [])[0] = n.coordToData(n.toLocalCoord(e[0]))),
            (t[1] = i.coordToData(i.toLocalCoord(e[1]))),
            t
          );
        },
        getOtherAxis: function(e) {
          return this.getAxis('x' === e.dim ? 'y' : 'x');
        },
        getArea: function() {
          var e = this.getAxis('x').getGlobalExtent(),
            t = this.getAxis('y').getGlobalExtent(),
            n = Math.min(e[0], e[1]),
            i = Math.min(t[0], t[1]),
            o = Math.max(e[0], e[1]) - n,
            r = Math.max(t[0], t[1]) - i;
          return new a(n, i, o, r);
        }
      }),
        i.inherits(r, o);
      var s = r;
      e.exports = s;
    },
    function(e, t, n) {
      var i = n(2);
      function a(e) {
        return this._axes[e];
      }
      var o = function(e) {
        (this._axes = {}), (this._dimList = []), (this.name = e || '');
      };
      o.prototype = {
        constructor: o,
        type: 'cartesian',
        getAxis: function(e) {
          return this._axes[e];
        },
        getAxes: function() {
          return i.map(this._dimList, a, this);
        },
        getAxesByScale: function(e) {
          return (
            (e = e.toLowerCase()),
            i.filter(this.getAxes(), function(t) {
              return t.scale.type === e;
            })
          );
        },
        addAxis: function(e) {
          var t = e.dim;
          (this._axes[t] = e), this._dimList.push(t);
        },
        dataToCoord: function(e) {
          return this._dataCoordConvert(e, 'dataToCoord');
        },
        coordToData: function(e) {
          return this._dataCoordConvert(e, 'coordToData');
        },
        _dataCoordConvert: function(e, t) {
          for (var n = this._dimList, i = e instanceof Array ? [] : {}, a = 0; a < n.length; a++) {
            var o = n[a],
              r = this._axes[o];
            i[o] = r[t](e[o]);
          }
          return i;
        }
      };
      var r = o;
      e.exports = r;
    },
    function(e, t, n) {
      var i = n(2),
        a = n(87),
        o = function(e, t, n, i, o) {
          a.call(this, e, t, n), (this.type = i || 'value'), (this.position = o || 'bottom');
        };
      (o.prototype = {
        constructor: o,
        index: 0,
        getAxesOnZeroOf: null,
        model: null,
        isHorizontal: function() {
          var e = this.position;
          return 'top' === e || 'bottom' === e;
        },
        getGlobalExtent: function(e) {
          var t = this.getExtent();
          return (
            (t[0] = this.toGlobalCoord(t[0])),
            (t[1] = this.toGlobalCoord(t[1])),
            e && t[0] > t[1] && t.reverse(),
            t
          );
        },
        getOtherAxis: function() {
          this.grid.getOtherAxis();
        },
        pointToData: function(e, t) {
          return this.coordToData(this.toLocalCoord(e['x' === this.dim ? 0 : 1]), t);
        },
        toLocalCoord: null,
        toGlobalCoord: null
      }),
        i.inherits(o, a);
      var r = o;
      e.exports = r;
    },
    function(e, t, n) {
      n(428);
      var i = n(37).extend({
        type: 'grid',
        dependencies: ['xAxis', 'yAxis'],
        layoutMode: 'box',
        coordinateSystem: null,
        defaultOption: {
          show: !1,
          zlevel: 0,
          z: 0,
          left: '10%',
          top: 60,
          right: '10%',
          bottom: 60,
          containLabel: !1,
          backgroundColor: 'rgba(0,0,0,0)',
          borderWidth: 1,
          borderColor: '#ccc'
        }
      });
      e.exports = i;
    },
    function(e, t, n) {
      n(428), n(798);
    },
    function(e, t, n) {
      var i = n(2),
        a = n(6),
        o = n(88),
        r = n(104),
        s = n(430),
        l = ['axisLine', 'axisTickLabel', 'axisName'],
        u = ['splitArea', 'splitLine'],
        c = r.extend({
          type: 'cartesianAxis',
          axisPointerClass: 'CartesianAxisPointer',
          render: function(e, t, n, r) {
            this.group.removeAll();
            var h = this._axisGroup;
            if (
              ((this._axisGroup = new a.Group()), this.group.add(this._axisGroup), e.get('show'))
            ) {
              var d = e.getCoordSysModel(),
                p = s.layout(d, e),
                g = new o(e, p);
              i.each(l, g.add, g),
                this._axisGroup.add(g.getGroup()),
                i.each(
                  u,
                  function(t) {
                    e.get(t + '.show') && this['_' + t](e, d);
                  },
                  this
                ),
                a.groupTransition(h, this._axisGroup, e),
                c.superCall(this, 'render', e, t, n, r);
            }
          },
          remove: function() {
            this._splitAreaColors = null;
          },
          _splitLine: function(e, t) {
            var n = e.axis;
            if (!n.scale.isBlank()) {
              var o = e.getModel('splitLine'),
                r = o.getModel('lineStyle'),
                s = r.get('color');
              s = i.isArray(s) ? s : [s];
              for (
                var l = t.coordinateSystem.getRect(),
                  u = n.isHorizontal(),
                  c = 0,
                  h = n.getTicksCoords({ tickModel: o }),
                  d = [],
                  p = [],
                  g = r.getLineStyle(),
                  f = 0;
                f < h.length;
                f++
              ) {
                var m = n.toGlobalCoord(h[f].coord);
                u
                  ? ((d[0] = m), (d[1] = l.y), (p[0] = m), (p[1] = l.y + l.height))
                  : ((d[0] = l.x), (d[1] = m), (p[0] = l.x + l.width), (p[1] = m));
                var v = c++ % s.length,
                  y = h[f].tickValue;
                this._axisGroup.add(
                  new a.Line({
                    anid: null != y ? 'line_' + h[f].tickValue : null,
                    subPixelOptimize: !0,
                    shape: { x1: d[0], y1: d[1], x2: p[0], y2: p[1] },
                    style: i.defaults({ stroke: s[v] }, g),
                    silent: !0
                  })
                );
              }
            }
          },
          _splitArea: function(e, t) {
            var n = e.axis;
            if (!n.scale.isBlank()) {
              var o = e.getModel('splitArea'),
                r = o.getModel('areaStyle'),
                s = r.get('color'),
                l = t.coordinateSystem.getRect(),
                u = n.getTicksCoords({ tickModel: o, clamp: !0 });
              if (u.length) {
                var c = s.length,
                  h = this._splitAreaColors,
                  d = i.createHashMap(),
                  p = 0;
                if (h)
                  for (var g = 0; g < u.length; g++) {
                    var f = h.get(u[g].tickValue);
                    if (null != f) {
                      p = (f + (c - 1) * g) % c;
                      break;
                    }
                  }
                var m = n.toGlobalCoord(u[0].coord),
                  v = r.getAreaStyle();
                s = i.isArray(s) ? s : [s];
                for (g = 1; g < u.length; g++) {
                  var y,
                    x,
                    _,
                    b,
                    S = n.toGlobalCoord(u[g].coord);
                  n.isHorizontal()
                    ? ((y = m), (x = l.y), (_ = S - y), (b = l.height), (m = y + _))
                    : ((y = l.x), (x = m), (_ = l.width), (m = x + (b = S - x)));
                  var w = u[g - 1].tickValue;
                  null != w && d.set(w, p),
                    this._axisGroup.add(
                      new a.Rect({
                        anid: null != w ? 'area_' + w : null,
                        shape: { x: y, y: x, width: _, height: b },
                        style: i.defaults({ fill: s[p] }, v),
                        silent: !0
                      })
                    ),
                    (p = (p + 1) % c);
                }
                this._splitAreaColors = d;
              }
            }
          }
        });
      c.extend({ type: 'xAxis' }), c.extend({ type: 'yAxis' });
    },
    function(e, t, n) {
      var i = n(431).extend({
        type: 'series.bar',
        dependencies: ['grid', 'polar'],
        brushSelector: 'rect',
        getProgressive: function() {
          return !!this.get('large') && this.get('progressive');
        },
        getProgressiveThreshold: function() {
          var e = this.get('progressiveThreshold'),
            t = this.get('largeThreshold');
          return t > e && (e = t), e;
        },
        defaultOption: { clip: !0, roundCap: !1 }
      });
      e.exports = i;
    },
    function(e, t, n) {
      n(23).__DEV__;
      var i = n(4),
        a = n(2),
        o = n(6),
        r = n(432).setLabel,
        s = n(36),
        l = n(801),
        u = n(33),
        c = n(85).throttle,
        h = n(154).createClipPath,
        d = n(802),
        p = ['itemStyle', 'barBorderWidth'],
        g = [0, 0];
      a.extend(s.prototype, l);
      var f = i.extendChartView({
          type: 'bar',
          render: function(e, t, n) {
            this._updateDrawMode(e);
            var i = e.get('coordinateSystem');
            return (
              ('cartesian2d' !== i && 'polar' !== i) ||
                (this._isLargeDraw ? this._renderLarge(e, t, n) : this._renderNormal(e, t, n)),
              this.group
            );
          },
          incrementalPrepareRender: function(e, t, n) {
            this._clear(), this._updateDrawMode(e);
          },
          incrementalRender: function(e, t, n, i) {
            this._incrementalRenderLarge(e, t);
          },
          _updateDrawMode: function(e) {
            var t = e.pipelineContext.large;
            (null == this._isLargeDraw || t ^ this._isLargeDraw) &&
              ((this._isLargeDraw = t), this._clear());
          },
          _renderNormal: function(e, t, n) {
            var i,
              a = this.group,
              r = e.getData(),
              s = this._data,
              l = e.coordinateSystem,
              u = l.getBaseAxis();
            'cartesian2d' === l.type
              ? (i = u.isHorizontal())
              : 'polar' === l.type && (i = 'angle' === u.dim);
            var c = e.isAnimationEnabled() ? e : null,
              h = e.get('clip', !0),
              d = (function(e, t) {
                var n = e.getArea && e.getArea();
                if ('cartesian2d' === e.type) {
                  var i = e.getBaseAxis();
                  if ('category' !== i.type || !i.onBand) {
                    var a = t.getLayout('bandWidth');
                    i.isHorizontal()
                      ? ((n.x -= a), (n.width += 2 * a))
                      : ((n.y -= a), (n.height += 2 * a));
                  }
                }
                return n;
              })(l, r);
            a.removeClipPath();
            var p = e.get('roundCap', !0);
            r
              .diff(s)
              .add(function(t) {
                if (r.hasValue(t)) {
                  var n = r.getItemModel(t),
                    o = S[l.type](r, t, n);
                  if (h) if (y[l.type](d, o)) return void a.remove(s);
                  var s = x[l.type](t, o, i, c, !1, p);
                  r.setItemGraphicEl(t, s), a.add(s), w(s, r, t, n, o, e, i, 'polar' === l.type);
                }
              })
              .update(function(t, n) {
                var u = s.getItemGraphicEl(n);
                if (r.hasValue(t)) {
                  var g = r.getItemModel(t),
                    f = S[l.type](r, t, g);
                  if (h) if (y[l.type](d, f)) return void a.remove(u);
                  u ? o.updateProps(u, { shape: f }, c, t) : (u = x[l.type](t, f, i, c, !0, p)),
                    r.setItemGraphicEl(t, u),
                    a.add(u),
                    w(u, r, t, g, f, e, i, 'polar' === l.type);
                } else a.remove(u);
              })
              .remove(function(e) {
                var t = s.getItemGraphicEl(e);
                'cartesian2d' === l.type ? t && _(e, c, t) : t && b(e, c, t);
              })
              .execute(),
              (this._data = r);
          },
          _renderLarge: function(e, t, n) {
            this._clear(), I(e, this.group);
            var i = e.get('clip', !0) ? h(e.coordinateSystem, !1, e) : null;
            i ? this.group.setClipPath(i) : this.group.removeClipPath();
          },
          _incrementalRenderLarge: function(e, t) {
            I(t, this.group, !0);
          },
          dispose: a.noop,
          remove: function(e) {
            this._clear(e);
          },
          _clear: function(e) {
            var t = this.group,
              n = this._data;
            e && e.get('animation') && n && !this._isLargeDraw
              ? n.eachItemGraphicEl(function(t) {
                  'sector' === t.type ? b(t.dataIndex, e, t) : _(t.dataIndex, e, t);
                })
              : t.removeAll(),
              (this._data = null);
          }
        }),
        m = Math.max,
        v = Math.min,
        y = {
          cartesian2d: function(e, t) {
            var n = t.width < 0 ? -1 : 1,
              i = t.height < 0 ? -1 : 1;
            n < 0 && ((t.x += t.width), (t.width = -t.width)),
              i < 0 && ((t.y += t.height), (t.height = -t.height));
            var a = m(t.x, e.x),
              o = v(t.x + t.width, e.x + e.width),
              r = m(t.y, e.y),
              s = v(t.y + t.height, e.y + e.height);
            (t.x = a), (t.y = r), (t.width = o - a), (t.height = s - r);
            var l = t.width < 0 || t.height < 0;
            return (
              n < 0 && ((t.x += t.width), (t.width = -t.width)),
              i < 0 && ((t.y += t.height), (t.height = -t.height)),
              l
            );
          },
          polar: function(e) {
            return !1;
          }
        },
        x = {
          cartesian2d: function(e, t, n, i, r) {
            var s = new o.Rect({ shape: a.extend({}, t) });
            if (i) {
              var l = n ? 'height' : 'width',
                u = {};
              (s.shape[l] = 0),
                (u[l] = t[l]),
                o[r ? 'updateProps' : 'initProps'](s, { shape: u }, i, e);
            }
            return s;
          },
          polar: function(e, t, n, i, r, s) {
            var l = t.startAngle < t.endAngle,
              u = new (!n && s ? d : o.Sector)({ shape: a.defaults({ clockwise: l }, t) });
            if (i) {
              var c = n ? 'r' : 'endAngle',
                h = {};
              (u.shape[c] = n ? 0 : t.startAngle),
                (h[c] = t[c]),
                o[r ? 'updateProps' : 'initProps'](u, { shape: h }, i, e);
            }
            return u;
          }
        };
      function _(e, t, n) {
        (n.style.text = null),
          o.updateProps(n, { shape: { width: 0 } }, t, e, function() {
            n.parent && n.parent.remove(n);
          });
      }
      function b(e, t, n) {
        (n.style.text = null),
          o.updateProps(n, { shape: { r: n.shape.r0 } }, t, e, function() {
            n.parent && n.parent.remove(n);
          });
      }
      var S = {
        cartesian2d: function(e, t, n) {
          var i = e.getItemLayout(t),
            a = (function(e, t) {
              var n = e.get(p) || 0;
              return Math.min(n, Math.abs(t.width), Math.abs(t.height));
            })(n, i),
            o = i.width > 0 ? 1 : -1,
            r = i.height > 0 ? 1 : -1;
          return {
            x: i.x + (o * a) / 2,
            y: i.y + (r * a) / 2,
            width: i.width - o * a,
            height: i.height - r * a
          };
        },
        polar: function(e, t, n) {
          var i = e.getItemLayout(t);
          return {
            cx: i.cx,
            cy: i.cy,
            r0: i.r0,
            r: i.r,
            startAngle: i.startAngle,
            endAngle: i.endAngle
          };
        }
      };
      function w(e, t, n, i, s, l, u, c) {
        var h = t.getItemVisual(n, 'color'),
          d = t.getItemVisual(n, 'opacity'),
          p = i.getModel('itemStyle'),
          g = i.getModel('emphasis.itemStyle').getBarItemStyle();
        c || e.setShape('r', p.get('barBorderRadius') || 0),
          e.useStyle(a.defaults({ fill: h, opacity: d }, p.getBarItemStyle()));
        var f = i.getShallow('cursor');
        f && e.attr('cursor', f);
        var m = u ? (s.height > 0 ? 'bottom' : 'top') : s.width > 0 ? 'left' : 'right';
        c || r(e.style, g, i, h, l, n, m), o.setHoverStyle(e, g);
      }
      var M = u.extend({
        type: 'largeBar',
        shape: { points: [] },
        buildPath: function(e, t) {
          for (
            var n = t.points, i = this.__startPoint, a = this.__baseDimIdx, o = 0;
            o < n.length;
            o += 2
          )
            (i[a] = n[o + a]), e.moveTo(i[0], i[1]), e.lineTo(n[o], n[o + 1]);
        }
      });
      function I(e, t, n) {
        var i = e.getData(),
          a = [],
          o = i.getLayout('valueAxisHorizontal') ? 1 : 0;
        a[1 - o] = i.getLayout('valueAxisStart');
        var r = new M({
          shape: { points: i.getLayout('largePoints') },
          incremental: !!n,
          __startPoint: a,
          __baseDimIdx: o,
          __largeDataIndices: i.getLayout('largeDataIndices'),
          __barWidth: i.getLayout('barWidth')
        });
        t.add(r),
          (function(e, t, n) {
            var i = n.getVisual('borderColor') || n.getVisual('color'),
              a = t.getModel('itemStyle').getItemStyle(['color', 'borderColor']);
            e.useStyle(a),
              (e.style.fill = null),
              (e.style.stroke = i),
              (e.style.lineWidth = n.getLayout('barWidth'));
          })(r, e, i),
          (r.seriesIndex = e.seriesIndex),
          e.get('silent') || (r.on('mousedown', A), r.on('mousemove', A));
      }
      var A = c(
        function(e) {
          var t = (function(e, t, n) {
            var i = e.__baseDimIdx,
              a = 1 - i,
              o = e.shape.points,
              r = e.__largeDataIndices,
              s = Math.abs(e.__barWidth / 2),
              l = e.__startPoint[a];
            (g[0] = t), (g[1] = n);
            for (
              var u = g[i], c = g[1 - i], h = u - s, d = u + s, p = 0, f = o.length / 2;
              p < f;
              p++
            ) {
              var m = 2 * p,
                v = o[m + i],
                y = o[m + a];
              if (v >= h && v <= d && (l <= y ? c >= l && c <= y : c >= y && c <= l)) return r[p];
            }
            return -1;
          })(this, e.offsetX, e.offsetY);
          this.dataIndex = t >= 0 ? t : null;
        },
        30,
        !1
      );
      e.exports = f;
    },
    function(e, t, n) {
      var i = n(120)([
          ['fill', 'color'],
          ['stroke', 'borderColor'],
          ['lineWidth', 'borderWidth'],
          ['stroke', 'barBorderColor'],
          ['lineWidth', 'barBorderWidth'],
          ['opacity'],
          ['shadowBlur'],
          ['shadowOffsetX'],
          ['shadowOffsetY'],
          ['shadowColor']
        ]),
        a = {
          getBarItemStyle: function(e) {
            var t = i(this, e);
            if (this.getBorderLineDash) {
              var n = this.getBorderLineDash();
              n && (t.lineDash = n);
            }
            return t;
          }
        };
      e.exports = a;
    },
    function(e, t, n) {
      var i = (0, n(6).extendShape)({
        type: 'sausage',
        shape: { cx: 0, cy: 0, r0: 0, r: 0, startAngle: 0, endAngle: 2 * Math.PI, clockwise: !0 },
        buildPath: function(e, t) {
          var n = t.cx,
            i = t.cy,
            a = Math.max(t.r0 || 0, 0),
            o = Math.max(t.r, 0),
            r = 0.5 * (o - a),
            s = a + r,
            l = t.startAngle,
            u = t.endAngle,
            c = t.clockwise,
            h = Math.cos(l),
            d = Math.sin(l),
            p = Math.cos(u),
            g = Math.sin(u);
          (c ? u - l < 2 * Math.PI : l - u < 2 * Math.PI) &&
            (e.moveTo(h * a + n, d * a + i), e.arc(h * s + n, d * s + i, r, -Math.PI + l, l, !c)),
            e.arc(n, i, o, l, u, !c),
            e.moveTo(p * o + n, g * o + i),
            e.arc(p * s + n, g * s + i, r, u - 2 * Math.PI, u - Math.PI, !c),
            0 !== a && (e.arc(n, i, a, u, l, c), e.moveTo(h * a + n, g * a + i)),
            e.closePath();
        }
      });
      e.exports = i;
    },
    function(e, t, n) {
      var i = n(4),
        a = n(125),
        o = n(2),
        r = n(18),
        s = n(16).getPercentWithPrecision,
        l = n(297),
        u = n(101).retrieveRawAttr,
        c = i.extendSeriesModel({
          type: 'series.pie',
          init: function(e) {
            c.superApply(this, 'init', arguments),
              (this.legendDataProvider = function() {
                return this.getRawData();
              }),
              this.updateSelectedMap(this._createSelectableList()),
              this._defaultLabelLine(e);
          },
          mergeOption: function(e) {
            c.superCall(this, 'mergeOption', e),
              this.updateSelectedMap(this._createSelectableList());
          },
          getInitialData: function(e, t) {
            return a(this, ['value']);
          },
          _createSelectableList: function() {
            for (
              var e = this.getRawData(), t = e.mapDimension('value'), n = [], i = 0, a = e.count();
              i < a;
              i++
            )
              n.push({ name: e.getName(i), value: e.get(t, i), selected: u(e, i, 'selected') });
            return n;
          },
          getDataParams: function(e) {
            var t = this.getData(),
              n = c.superCall(this, 'getDataParams', e),
              i = [];
            return (
              t.each(t.mapDimension('value'), function(e) {
                i.push(e);
              }),
              (n.percent = s(i, e, t.hostModel.get('percentPrecision'))),
              n.$vars.push('percent'),
              n
            );
          },
          _defaultLabelLine: function(e) {
            r.defaultEmphasis(e, 'labelLine', ['show']);
            var t = e.labelLine,
              n = e.emphasis.labelLine;
            (t.show = t.show && e.label.show), (n.show = n.show && e.emphasis.label.show);
          },
          defaultOption: {
            zlevel: 0,
            z: 2,
            legendHoverLink: !0,
            hoverAnimation: !0,
            center: ['50%', '50%'],
            radius: [0, '75%'],
            clockwise: !0,
            startAngle: 90,
            minAngle: 0,
            minShowLabelAngle: 0,
            selectedOffset: 10,
            hoverOffset: 10,
            avoidLabelOverlap: !0,
            percentPrecision: 2,
            stillShowZeroSum: !0,
            label: { rotate: !1, show: !0, position: 'outer' },
            labelLine: {
              show: !0,
              length: 15,
              length2: 15,
              smooth: !1,
              lineStyle: { width: 1, type: 'solid' }
            },
            itemStyle: { borderWidth: 1 },
            animationType: 'expansion',
            animationTypeUpdate: 'transition',
            animationEasing: 'cubicOut'
          }
        });
      o.mixin(c, l);
      var h = c;
      e.exports = h;
    },
    function(e, t, n) {
      var i = n(2),
        a = n(6),
        o = n(71);
      function r(e, t, n, i) {
        var a = t.getData(),
          o = this.dataIndex,
          r = a.getName(o),
          l = t.get('selectedOffset');
        i.dispatchAction({ type: 'pieToggleSelect', from: e, name: r, seriesId: t.id }),
          a.each(function(e) {
            s(a.getItemGraphicEl(e), a.getItemLayout(e), t.isSelected(a.getName(e)), l, n);
          });
      }
      function s(e, t, n, i, a) {
        var o = (t.startAngle + t.endAngle) / 2,
          r = n ? i : 0,
          s = [Math.cos(o) * r, Math.sin(o) * r];
        a
          ? e
              .animate()
              .when(200, { position: s })
              .start('bounceOut')
          : e.attr('position', s);
      }
      function l(e, t) {
        a.Group.call(this);
        var n = new a.Sector({ z2: 2 }),
          i = new a.Polyline(),
          o = new a.Text();
        this.add(n), this.add(i), this.add(o), this.updateData(e, t, !0);
      }
      var u = l.prototype;
      (u.updateData = function(e, t, n) {
        var o = this.childAt(0),
          r = this.childAt(1),
          l = this.childAt(2),
          u = e.hostModel,
          c = e.getItemModel(t),
          h = e.getItemLayout(t),
          d = i.extend({}, h);
        d.label = null;
        var p = u.getShallow('animationTypeUpdate');
        n
          ? (o.setShape(d),
            'scale' === u.getShallow('animationType')
              ? ((o.shape.r = h.r0), a.initProps(o, { shape: { r: h.r } }, u, t))
              : ((o.shape.endAngle = h.startAngle),
                a.updateProps(o, { shape: { endAngle: h.endAngle } }, u, t)))
          : 'expansion' === p
          ? o.setShape(d)
          : a.updateProps(o, { shape: d }, u, t);
        var g = e.getItemVisual(t, 'color');
        o.useStyle(
          i.defaults({ lineJoin: 'bevel', fill: g }, c.getModel('itemStyle').getItemStyle())
        ),
          (o.hoverStyle = c.getModel('emphasis.itemStyle').getItemStyle());
        var f = c.getShallow('cursor');
        f && o.attr('cursor', f),
          s(
            this,
            e.getItemLayout(t),
            u.isSelected(null, t),
            u.get('selectedOffset'),
            u.get('animation')
          );
        var m = !n && 'transition' === p;
        this._updateLabel(e, t, m),
          (this.highDownOnUpdate =
            c.get('hoverAnimation') && u.isAnimationEnabled()
              ? function(e, t) {
                  'emphasis' === t
                    ? ((r.ignore = r.hoverIgnore),
                      (l.ignore = l.hoverIgnore),
                      o.stopAnimation(!0),
                      o.animateTo({ shape: { r: h.r + u.get('hoverOffset') } }, 300, 'elasticOut'))
                    : ((r.ignore = r.normalIgnore),
                      (l.ignore = l.normalIgnore),
                      o.stopAnimation(!0),
                      o.animateTo({ shape: { r: h.r } }, 300, 'elasticOut'));
                }
              : null),
          a.setHoverStyle(this);
      }),
        (u._updateLabel = function(e, t, n) {
          var i = this.childAt(1),
            o = this.childAt(2),
            r = e.hostModel,
            s = e.getItemModel(t),
            l = e.getItemLayout(t).label,
            u = e.getItemVisual(t, 'color');
          if (!l || isNaN(l.x) || isNaN(l.y))
            o.ignore = o.normalIgnore = o.hoverIgnore = i.ignore = i.normalIgnore = i.hoverIgnore = !0;
          else {
            var c = {
                points: l.linePoints || [
                  [l.x, l.y],
                  [l.x, l.y],
                  [l.x, l.y]
                ]
              },
              h = { x: l.x, y: l.y };
            n
              ? (a.updateProps(i, { shape: c }, r, t), a.updateProps(o, { style: h }, r, t))
              : (i.attr({ shape: c }), o.attr({ style: h })),
              o.attr({ rotation: l.rotation, origin: [l.x, l.y], z2: 10 });
            var d = s.getModel('label'),
              p = s.getModel('emphasis.label'),
              g = s.getModel('labelLine'),
              f = s.getModel('emphasis.labelLine');
            u = e.getItemVisual(t, 'color');
            a.setLabelStyle(
              o.style,
              (o.hoverStyle = {}),
              d,
              p,
              {
                labelFetcher: e.hostModel,
                labelDataIndex: t,
                defaultText: e.getName(t),
                autoColor: u,
                useInsideStyle: !!l.inside
              },
              {
                textAlign: l.textAlign,
                textVerticalAlign: l.verticalAlign,
                opacity: e.getItemVisual(t, 'opacity')
              }
            ),
              (o.ignore = o.normalIgnore = !d.get('show')),
              (o.hoverIgnore = !p.get('show')),
              (i.ignore = i.normalIgnore = !g.get('show')),
              (i.hoverIgnore = !f.get('show')),
              i.setStyle({ stroke: u, opacity: e.getItemVisual(t, 'opacity') }),
              i.setStyle(g.getModel('lineStyle').getLineStyle()),
              (i.hoverStyle = f.getModel('lineStyle').getLineStyle());
            var m = g.get('smooth');
            m && !0 === m && (m = 0.4), i.setShape({ smooth: m });
          }
        }),
        i.inherits(l, a.Group);
      var c = o.extend({
        type: 'pie',
        init: function() {
          var e = new a.Group();
          this._sectorGroup = e;
        },
        render: function(e, t, n, a) {
          if (!a || a.from !== this.uid) {
            var o = e.getData(),
              s = this._data,
              u = this.group,
              c = t.get('animation'),
              h = !s,
              d = e.get('animationType'),
              p = e.get('animationTypeUpdate'),
              g = i.curry(r, this.uid, e, c, n),
              f = e.get('selectedMode');
            if (
              (o
                .diff(s)
                .add(function(e) {
                  var t = new l(o, e);
                  h &&
                    'scale' !== d &&
                    t.eachChild(function(e) {
                      e.stopAnimation(!0);
                    }),
                    f && t.on('click', g),
                    o.setItemGraphicEl(e, t),
                    u.add(t);
                })
                .update(function(e, t) {
                  var n = s.getItemGraphicEl(t);
                  h ||
                    'transition' === p ||
                    n.eachChild(function(e) {
                      e.stopAnimation(!0);
                    }),
                    n.updateData(o, e),
                    n.off('click'),
                    f && n.on('click', g),
                    u.add(n),
                    o.setItemGraphicEl(e, n);
                })
                .remove(function(e) {
                  var t = s.getItemGraphicEl(e);
                  u.remove(t);
                })
                .execute(),
              c && o.count() > 0 && (h ? 'scale' !== d : 'transition' !== p))
            ) {
              for (var m = o.getItemLayout(0), v = 1; isNaN(m.startAngle) && v < o.count(); ++v)
                m = o.getItemLayout(v);
              var y = Math.max(n.getWidth(), n.getHeight()) / 2,
                x = i.bind(u.removeClipPath, u);
              u.setClipPath(
                this._createClipPath(m.cx, m.cy, y, m.startAngle, m.clockwise, x, e, h)
              );
            } else u.removeClipPath();
            this._data = o;
          }
        },
        dispose: function() {},
        _createClipPath: function(e, t, n, i, o, r, s, l) {
          var u = new a.Sector({
            shape: { cx: e, cy: t, r0: 0, r: n, startAngle: i, endAngle: i, clockwise: o }
          });
          return (
            (l ? a.initProps : a.updateProps)(
              u,
              { shape: { endAngle: i + (o ? 1 : -1) * Math.PI * 2 } },
              s,
              r
            ),
            u
          );
        },
        containPoint: function(e, t) {
          var n = t.getData().getItemLayout(0);
          if (n) {
            var i = e[0] - n.cx,
              a = e[1] - n.cy,
              o = Math.sqrt(i * i + a * a);
            return o <= n.r && o >= n.r0;
          }
        }
      });
      e.exports = c;
    },
    function(e, t, n) {
      var i = n(16),
        a = i.parsePercent,
        o = i.linearMap,
        r = n(806),
        s = n(2),
        l = 2 * Math.PI,
        u = Math.PI / 180;
      e.exports = function(e, t, n, i) {
        t.eachSeriesByType(e, function(e) {
          var t = e.getData(),
            i = t.mapDimension('value'),
            c = e.get('center'),
            h = e.get('radius');
          s.isArray(h) || (h = [0, h]), s.isArray(c) || (c = [c, c]);
          var d = n.getWidth(),
            p = n.getHeight(),
            g = Math.min(d, p),
            f = a(c[0], d),
            m = a(c[1], p),
            v = a(h[0], g / 2),
            y = a(h[1], g / 2),
            x = -e.get('startAngle') * u,
            _ = e.get('minAngle') * u,
            b = 0;
          t.each(i, function(e) {
            !isNaN(e) && b++;
          });
          var S = t.getSum(i),
            w = (Math.PI / (S || b)) * 2,
            M = e.get('clockwise'),
            I = e.get('roseType'),
            A = e.get('stillShowZeroSum'),
            T = t.getDataExtent(i);
          T[0] = 0;
          var D = l,
            C = 0,
            L = x,
            P = M ? 1 : -1;
          if (
            (t.each(i, function(e, n) {
              var i;
              if (isNaN(e))
                t.setItemLayout(n, {
                  angle: NaN,
                  startAngle: NaN,
                  endAngle: NaN,
                  clockwise: M,
                  cx: f,
                  cy: m,
                  r0: v,
                  r: I ? NaN : y
                });
              else {
                (i = 'area' !== I ? (0 === S && A ? w : e * w) : l / b) < _
                  ? ((i = _), (D -= _))
                  : (C += e);
                var a = L + P * i;
                t.setItemLayout(n, {
                  angle: i,
                  startAngle: L,
                  endAngle: a,
                  clockwise: M,
                  cx: f,
                  cy: m,
                  r0: v,
                  r: I ? o(e, T, [v, y]) : y
                }),
                  (L = a);
              }
            }),
            D < l && b)
          )
            if (D <= 0.001) {
              var O = l / b;
              t.each(i, function(e, n) {
                if (!isNaN(e)) {
                  var i = t.getItemLayout(n);
                  (i.angle = O), (i.startAngle = x + P * n * O), (i.endAngle = x + P * (n + 1) * O);
                }
              });
            } else
              (w = D / C),
                (L = x),
                t.each(i, function(e, n) {
                  if (!isNaN(e)) {
                    var i = t.getItemLayout(n),
                      a = i.angle === _ ? _ : e * w;
                    (i.startAngle = L), (i.endAngle = L + P * a), (L += P * a);
                  }
                });
          r(e, y, d, p);
        });
      };
    },
    function(e, t, n) {
      var i = n(52),
        a = Math.PI / 180;
      function o(e, t, n, i, a, o, r) {
        function s(t, n, i, a) {
          for (var o = t; o < n; o++)
            if (((e[o].y += i), o > t && o + 1 < n && e[o + 1].y > e[o].y + e[o].height))
              return void l(o, i / 2);
          l(n - 1, i / 2);
        }
        function l(t, n) {
          for (
            var i = t;
            i >= 0 && ((e[i].y -= n), !(i > 0 && e[i].y > e[i - 1].y + e[i - 1].height));
            i--
          );
        }
        function u(e, t, n, i, a, o) {
          for (var r = t ? Number.MAX_VALUE : 0, s = 0, l = e.length; s < l; s++) {
            var u = Math.abs(e[s].y - i),
              c = e[s].len,
              h = e[s].len2,
              d = u < a + c ? Math.sqrt((a + c + h) * (a + c + h) - u * u) : Math.abs(e[s].x - n);
            t && d >= r && (d = r - 10),
              !t && d <= r && (d = r + 10),
              (e[s].x = n + d * o),
              (r = d);
          }
        }
        e.sort(function(e, t) {
          return e.y - t.y;
        });
        for (var c, h = 0, d = e.length, p = [], g = [], f = 0; f < d; f++)
          (c = e[f].y - h) < 0 && s(f, d, -c), (h = e[f].y + e[f].height);
        r - h < 0 && l(d - 1, h - r);
        for (f = 0; f < d; f++) e[f].y >= n ? g.push(e[f]) : p.push(e[f]);
        u(p, !1, t, n, i, a), u(g, !0, t, n, i, a);
      }
      function r(e) {
        return 'center' === e.position;
      }
      e.exports = function(e, t, n, s, l) {
        var u,
          c,
          h = e.getData(),
          d = [],
          p = !1,
          g = (e.get('minShowLabelAngle') || 0) * a;
        h.each(function(n) {
          var a = h.getItemLayout(n),
            o = h.getItemModel(n),
            r = o.getModel('label'),
            s = r.get('position') || o.get('emphasis.label.position'),
            l = o.getModel('labelLine'),
            f = l.get('length'),
            m = l.get('length2');
          if (!(a.angle < g)) {
            var v,
              y,
              x,
              _,
              b = (a.startAngle + a.endAngle) / 2,
              S = Math.cos(b),
              w = Math.sin(b);
            (u = a.cx), (c = a.cy);
            var M = 'inside' === s || 'inner' === s;
            if ('center' === s) (v = a.cx), (y = a.cy), (_ = 'center');
            else {
              var I = (M ? ((a.r + a.r0) / 2) * S : a.r * S) + u,
                A = (M ? ((a.r + a.r0) / 2) * w : a.r * w) + c;
              if (((v = I + 3 * S), (y = A + 3 * w), !M)) {
                var T = I + S * (f + t - a.r),
                  D = A + w * (f + t - a.r),
                  C = T + (S < 0 ? -1 : 1) * m;
                (v = C + (S < 0 ? -5 : 5)),
                  (y = D),
                  (x = [
                    [I, A],
                    [T, D],
                    [C, D]
                  ]);
              }
              _ = M ? 'center' : S > 0 ? 'left' : 'right';
            }
            var L,
              P = r.getFont(),
              O = r.get('rotate');
            L = 'number' === typeof O ? O * (Math.PI / 180) : O ? (S < 0 ? -b + Math.PI : -b) : 0;
            var k = e.getFormattedLabel(n, 'normal') || h.getName(n),
              N = i.getBoundingRect(k, P, _, 'top');
            (p = !!L),
              (a.label = {
                x: v,
                y: y,
                position: s,
                height: N.height,
                len: f,
                len2: m,
                linePoints: x,
                textAlign: _,
                verticalAlign: 'middle',
                rotation: L,
                inside: M
              }),
              M || d.push(a.label);
          }
        }),
          !p &&
            e.get('avoidLabelOverlap') &&
            (function(e, t, n, i, a, s) {
              for (var l = [], u = [], c = 0; c < e.length; c++)
                r(e[c]) || (e[c].x < t ? l.push(e[c]) : u.push(e[c]));
              for (o(u, t, n, i, 1, 0, s), o(l, t, n, i, -1, 0, s), c = 0; c < e.length; c++)
                if (!r(e[c])) {
                  var h = e[c].linePoints;
                  if (h) {
                    var d = h[1][0] - h[2][0];
                    e[c].x < t ? (h[2][0] = e[c].x + 3) : (h[2][0] = e[c].x - 3),
                      (h[1][1] = h[2][1] = e[c].y),
                      (h[1][0] = h[2][0] + d);
                  }
                }
            })(d, u, c, t, 0, s);
      };
    },
    function(e, t, n) {
      var i = n(4);
      n(808), n(809);
      var a = n(103),
        o = n(155);
      n(156), i.registerVisual(a('scatter', 'circle')), i.registerLayout(o('scatter'));
    },
    function(e, t, n) {
      var i = n(79),
        a = n(38).extend({
          type: 'series.scatter',
          dependencies: ['grid', 'polar', 'geo', 'singleAxis', 'calendar'],
          getInitialData: function(e, t) {
            return i(this.getSource(), this);
          },
          brushSelector: 'point',
          getProgressive: function() {
            var e = this.option.progressive;
            return null == e ? (this.option.large ? 5e3 : this.get('progressive')) : e;
          },
          getProgressiveThreshold: function() {
            var e = this.option.progressiveThreshold;
            return null == e ? (this.option.large ? 1e4 : this.get('progressiveThreshold')) : e;
          },
          defaultOption: {
            coordinateSystem: 'cartesian2d',
            zlevel: 0,
            z: 2,
            legendHoverLink: !0,
            hoverAnimation: !0,
            symbolSize: 10,
            large: !1,
            largeThreshold: 2e3,
            itemStyle: { opacity: 0.8 },
            clip: !0
          }
        });
      e.exports = a;
    },
    function(e, t, n) {
      var i = n(4),
        a = n(153),
        o = n(810),
        r = n(155);
      i.extendChartView({
        type: 'scatter',
        render: function(e, t, n) {
          var i = e.getData();
          this._updateSymbolDraw(i, e).updateData(i, { clipShape: this._getClipShape(e) }),
            (this._finished = !0);
        },
        incrementalPrepareRender: function(e, t, n) {
          var i = e.getData();
          this._updateSymbolDraw(i, e).incrementalPrepareUpdate(i), (this._finished = !1);
        },
        incrementalRender: function(e, t, n) {
          this._symbolDraw.incrementalUpdate(e, t.getData(), { clipShape: this._getClipShape(t) }),
            (this._finished = e.end === t.getData().count());
        },
        updateTransform: function(e, t, n) {
          var i = e.getData();
          if (
            (this.group.dirty(),
            !this._finished || i.count() > 1e4 || !this._symbolDraw.isPersistent())
          )
            return { update: !0 };
          var a = r().reset(e);
          a.progress && a.progress({ start: 0, end: i.count() }, i),
            this._symbolDraw.updateLayout(i);
        },
        _getClipShape: function(e) {
          var t = e.coordinateSystem,
            n = t && t.getArea && t.getArea();
          return e.get('clip', !0) ? n : null;
        },
        _updateSymbolDraw: function(e, t) {
          var n = this._symbolDraw,
            i = t.pipelineContext.large;
          return (
            (n && i === this._isLargeDraw) ||
              (n && n.remove(),
              (n = this._symbolDraw = i ? new o() : new a()),
              (this._isLargeDraw = i),
              this.group.removeAll()),
            this.group.add(n.group),
            n
          );
        },
        remove: function(e, t) {
          this._symbolDraw && this._symbolDraw.remove(!0), (this._symbolDraw = null);
        },
        dispose: function() {}
      });
    },
    function(e, t, n) {
      var i = n(6),
        a = n(54).createSymbol,
        o = n(290),
        r = i.extendShape({
          shape: { points: null },
          symbolProxy: null,
          softClipShape: null,
          buildPath: function(e, t) {
            var n = t.points,
              i = t.size,
              a = this.symbolProxy,
              o = a.shape;
            if (!((e.getContext ? e.getContext() : e) && i[0] < 4))
              for (var r = 0; r < n.length; ) {
                var s = n[r++],
                  l = n[r++];
                isNaN(s) ||
                  isNaN(l) ||
                  (this.softClipShape && !this.softClipShape.contain(s, l)) ||
                    ((o.x = s - i[0] / 2),
                    (o.y = l - i[1] / 2),
                    (o.width = i[0]),
                    (o.height = i[1]),
                    a.buildPath(e, o, !0));
              }
          },
          afterBrush: function(e) {
            var t = this.shape,
              n = t.points,
              i = t.size;
            if (i[0] < 4) {
              this.setTransform(e);
              for (var a = 0; a < n.length; ) {
                var o = n[a++],
                  r = n[a++];
                isNaN(o) ||
                  isNaN(r) ||
                  (this.softClipShape && !this.softClipShape.contain(o, r)) ||
                    e.fillRect(o - i[0] / 2, r - i[1] / 2, i[0], i[1]);
              }
              this.restoreTransform(e);
            }
          },
          findDataIndex: function(e, t) {
            for (
              var n = this.shape,
                i = n.points,
                a = n.size,
                o = Math.max(a[0], 4),
                r = Math.max(a[1], 4),
                s = i.length / 2 - 1;
              s >= 0;
              s--
            ) {
              var l = 2 * s,
                u = i[l] - o / 2,
                c = i[l + 1] - r / 2;
              if (e >= u && t >= c && e <= u + o && t <= c + r) return s;
            }
            return -1;
          }
        });
      function s() {
        this.group = new i.Group();
      }
      var l = s.prototype;
      (l.isPersistent = function() {
        return !this._incremental;
      }),
        (l.updateData = function(e, t) {
          this.group.removeAll();
          var n = new r({ rectHover: !0, cursor: 'default' });
          n.setShape({ points: e.getLayout('symbolPoints') }),
            this._setCommon(n, e, !1, t),
            this.group.add(n),
            (this._incremental = null);
        }),
        (l.updateLayout = function(e) {
          if (!this._incremental) {
            var t = e.getLayout('symbolPoints');
            this.group.eachChild(function(e) {
              if (null != e.startIndex) {
                var n = 2 * (e.endIndex - e.startIndex),
                  i = 4 * e.startIndex * 2;
                t = new Float32Array(t.buffer, i, n);
              }
              e.setShape('points', t);
            });
          }
        }),
        (l.incrementalPrepareUpdate = function(e) {
          this.group.removeAll(),
            this._clearIncremental(),
            e.count() > 2e6
              ? (this._incremental || (this._incremental = new o({ silent: !0 })),
                this.group.add(this._incremental))
              : (this._incremental = null);
        }),
        (l.incrementalUpdate = function(e, t, n) {
          var i;
          this._incremental
            ? ((i = new r()), this._incremental.addDisplayable(i, !0))
            : (((i = new r({
                rectHover: !0,
                cursor: 'default',
                startIndex: e.start,
                endIndex: e.end
              })).incremental = !0),
              this.group.add(i)),
            i.setShape({ points: t.getLayout('symbolPoints') }),
            this._setCommon(i, t, !!this._incremental, n);
        }),
        (l._setCommon = function(e, t, n, i) {
          var o = t.hostModel;
          i = i || {};
          var r = t.getVisual('symbolSize');
          e.setShape('size', r instanceof Array ? r : [r, r]),
            (e.softClipShape = i.clipShape || null),
            (e.symbolProxy = a(t.getVisual('symbol'), 0, 0, 0, 0)),
            (e.setColor = e.symbolProxy.setColor);
          var s = e.shape.size[0] < 4;
          e.useStyle(
            o
              .getModel('itemStyle')
              .getItemStyle(s ? ['color', 'shadowBlur', 'shadowColor'] : ['color'])
          );
          var l = t.getVisual('color');
          l && e.setColor(l),
            n ||
              ((e.seriesIndex = o.seriesIndex),
              e.on('mousemove', function(t) {
                e.dataIndex = null;
                var n = e.findDataIndex(t.offsetX, t.offsetY);
                n >= 0 && (e.dataIndex = n + (e.startIndex || 0));
              }));
        }),
        (l.remove = function() {
          this._clearIncremental(), (this._incremental = null), this.group.removeAll();
        }),
        (l._clearIncremental = function() {
          var e = this._incremental;
          e && e.clearDisplaybles();
        });
      var u = s;
      e.exports = u;
    },
    function(e, t, n) {
      n(812), n(814), n(815);
    },
    function(e, t, n) {
      var i = n(2),
        a = n(813),
        o = n(199),
        r = n(16),
        s = n(64),
        l = s.getScaleExtent,
        u = s.niceScaleExtent,
        c = n(63),
        h = n(422);
      function d(e, t, n) {
        (this._model = e),
          (this.dimensions = []),
          (this._indicatorAxes = i.map(
            e.getIndicatorModels(),
            function(e, t) {
              var n = 'indicator_' + t,
                i = new a(n, 'log' === e.get('axisType') ? new h() : new o());
              return (
                (i.name = e.get('name')), (i.model = e), (e.axis = i), this.dimensions.push(n), i
              );
            },
            this
          )),
          this.resize(e, n),
          this.cx,
          this.cy,
          this.r,
          this.r0,
          this.startAngle;
      }
      (d.prototype.getIndicatorAxes = function() {
        return this._indicatorAxes;
      }),
        (d.prototype.dataToPoint = function(e, t) {
          var n = this._indicatorAxes[t];
          return this.coordToPoint(n.dataToCoord(e), t);
        }),
        (d.prototype.coordToPoint = function(e, t) {
          var n = this._indicatorAxes[t].angle;
          return [this.cx + e * Math.cos(n), this.cy - e * Math.sin(n)];
        }),
        (d.prototype.pointToData = function(e) {
          var t = e[0] - this.cx,
            n = e[1] - this.cy,
            i = Math.sqrt(t * t + n * n);
          (t /= i), (n /= i);
          for (
            var a, o = Math.atan2(-n, t), r = 1 / 0, s = -1, l = 0;
            l < this._indicatorAxes.length;
            l++
          ) {
            var u = this._indicatorAxes[l],
              c = Math.abs(o - u.angle);
            c < r && ((a = u), (s = l), (r = c));
          }
          return [s, +(a && a.coordToData(i))];
        }),
        (d.prototype.resize = function(e, t) {
          var n = e.get('center'),
            a = t.getWidth(),
            o = t.getHeight(),
            s = Math.min(a, o) / 2;
          (this.cx = r.parsePercent(n[0], a)),
            (this.cy = r.parsePercent(n[1], o)),
            (this.startAngle = (e.get('startAngle') * Math.PI) / 180);
          var l = e.get('radius');
          ('string' !== typeof l && 'number' !== typeof l) || (l = [0, l]),
            (this.r0 = r.parsePercent(l[0], s)),
            (this.r = r.parsePercent(l[1], s)),
            i.each(
              this._indicatorAxes,
              function(e, t) {
                e.setExtent(this.r0, this.r);
                var n = this.startAngle + (t * Math.PI * 2) / this._indicatorAxes.length;
                (n = Math.atan2(Math.sin(n), Math.cos(n))), (e.angle = n);
              },
              this
            );
        }),
        (d.prototype.update = function(e, t) {
          var n = this._indicatorAxes,
            a = this._model;
          i.each(n, function(e) {
            e.scale.setExtent(1 / 0, -1 / 0);
          }),
            e.eachSeriesByType(
              'radar',
              function(t, o) {
                if (
                  'radar' === t.get('coordinateSystem') &&
                  e.getComponent('radar', t.get('radarIndex')) === a
                ) {
                  var r = t.getData();
                  i.each(n, function(e) {
                    e.scale.unionExtentFromData(r, r.mapDimension(e.dim));
                  });
                }
              },
              this
            );
          var o = a.get('splitNumber');
          function s(e) {
            var t = Math.pow(10, Math.floor(Math.log(e) / Math.LN10)),
              n = e / t;
            return 2 === n ? (n = 5) : (n *= 2), n * t;
          }
          i.each(n, function(e, t) {
            var n = l(e.scale, e.model);
            u(e.scale, e.model);
            var i = e.model,
              a = e.scale,
              c = i.getMin(),
              h = i.getMax(),
              d = a.getInterval();
            if (null != c && null != h) a.setExtent(+c, +h), a.setInterval((h - c) / o);
            else if (null != c) {
              var p;
              do {
                (p = c + d * o), a.setExtent(+c, p), a.setInterval(d), (d = s(d));
              } while (p < n[1] && isFinite(p) && isFinite(n[1]));
            } else if (null != h) {
              var g;
              do {
                (g = h - d * o), a.setExtent(g, +h), a.setInterval(d), (d = s(d));
              } while (g > n[0] && isFinite(g) && isFinite(n[0]));
            } else {
              a.getTicks().length - 1 > o && (d = s(d));
              var f = Math.round((n[0] + n[1]) / 2 / d) * d,
                m = Math.round(o / 2);
              a.setExtent(r.round(f - m * d), r.round(f + (o - m) * d)), a.setInterval(d);
            }
          });
        }),
        (d.dimensions = []),
        (d.create = function(e, t) {
          var n = [];
          return (
            e.eachComponent('radar', function(i) {
              var a = new d(i, e, t);
              n.push(a), (i.coordinateSystem = a);
            }),
            e.eachSeriesByType('radar', function(e) {
              'radar' === e.get('coordinateSystem') &&
                (e.coordinateSystem = n[e.get('radarIndex') || 0]);
            }),
            n
          );
        }),
        c.register('radar', d);
      var p = d;
      e.exports = p;
    },
    function(e, t, n) {
      var i = n(2),
        a = n(87);
      function o(e, t, n) {
        a.call(this, e, t, n),
          (this.type = 'value'),
          (this.angle = 0),
          (this.name = ''),
          this.model;
      }
      i.inherits(o, a);
      var r = o;
      e.exports = r;
    },
    function(e, t, n) {
      var i = n(4),
        a = n(2),
        o = n(429),
        r = n(36),
        s = n(124),
        l = o.valueAxis;
      function u(e, t) {
        return a.defaults({ show: t }, e);
      }
      var c = i.extendComponentModel({
        type: 'radar',
        optionUpdated: function() {
          var e = this.get('boundaryGap'),
            t = this.get('splitNumber'),
            n = this.get('scale'),
            i = this.get('axisLine'),
            o = this.get('axisTick'),
            l = this.get('axisType'),
            u = this.get('axisLabel'),
            c = this.get('name'),
            h = this.get('name.show'),
            d = this.get('name.formatter'),
            p = this.get('nameGap'),
            g = this.get('triggerEvent'),
            f = a.map(
              this.get('indicator') || [],
              function(f) {
                null != f.max && f.max > 0 && !f.min
                  ? (f.min = 0)
                  : null != f.min && f.min < 0 && !f.max && (f.max = 0);
                var m = c;
                if (
                  (null != f.color && (m = a.defaults({ color: f.color }, c)),
                  (f = a.merge(
                    a.clone(f),
                    {
                      boundaryGap: e,
                      splitNumber: t,
                      scale: n,
                      axisLine: i,
                      axisTick: o,
                      axisType: l,
                      axisLabel: u,
                      name: f.text,
                      nameLocation: 'end',
                      nameGap: p,
                      nameTextStyle: m,
                      triggerEvent: g
                    },
                    !1
                  )),
                  h || (f.name = ''),
                  'string' === typeof d)
                ) {
                  var v = f.name;
                  f.name = d.replace('{value}', null != v ? v : '');
                } else 'function' === typeof d && (f.name = d(f.name, f));
                var y = a.extend(new r(f, null, this.ecModel), s);
                return (y.mainType = 'radar'), (y.componentIndex = this.componentIndex), y;
              },
              this
            );
          this.getIndicatorModels = function() {
            return f;
          };
        },
        defaultOption: {
          zlevel: 0,
          z: 0,
          center: ['50%', '50%'],
          radius: '75%',
          startAngle: 90,
          name: { show: !0 },
          boundaryGap: [0, 0],
          splitNumber: 5,
          nameGap: 15,
          scale: !1,
          shape: 'polygon',
          axisLine: a.merge({ lineStyle: { color: '#bbb' } }, l.axisLine),
          axisLabel: u(l.axisLabel, !1),
          axisTick: u(l.axisTick, !1),
          axisType: 'interval',
          splitLine: u(l.splitLine, !0),
          splitArea: u(l.splitArea, !0),
          indicator: []
        }
      });
      e.exports = c;
    },
    function(e, t, n) {
      n(23).__DEV__;
      var i = n(4),
        a = n(2),
        o = n(88),
        r = n(6),
        s = ['axisLine', 'axisTickLabel', 'axisName'],
        l = i.extendComponentView({
          type: 'radar',
          render: function(e, t, n) {
            this.group.removeAll(), this._buildAxes(e), this._buildSplitLineAndArea(e);
          },
          _buildAxes: function(e) {
            var t = e.coordinateSystem,
              n = t.getIndicatorAxes(),
              i = a.map(n, function(e) {
                return new o(e.model, {
                  position: [t.cx, t.cy],
                  rotation: e.angle,
                  labelDirection: -1,
                  tickDirection: -1,
                  nameDirection: 1
                });
              });
            a.each(
              i,
              function(e) {
                a.each(s, e.add, e), this.group.add(e.getGroup());
              },
              this
            );
          },
          _buildSplitLineAndArea: function(e) {
            var t = e.coordinateSystem,
              n = t.getIndicatorAxes();
            if (n.length) {
              var i = e.get('shape'),
                o = e.getModel('splitLine'),
                s = e.getModel('splitArea'),
                l = o.getModel('lineStyle'),
                u = s.getModel('areaStyle'),
                c = o.get('show'),
                h = s.get('show'),
                d = l.get('color'),
                p = u.get('color');
              (d = a.isArray(d) ? d : [d]), (p = a.isArray(p) ? p : [p]);
              var g = [],
                f = [];
              if ('circle' === i)
                for (var m = n[0].getTicksCoords(), v = t.cx, y = t.cy, x = 0; x < m.length; x++) {
                  if (c)
                    g[T(g, d, x)].push(new r.Circle({ shape: { cx: v, cy: y, r: m[x].coord } }));
                  if (h && x < m.length - 1)
                    f[T(f, p, x)].push(
                      new r.Ring({ shape: { cx: v, cy: y, r0: m[x].coord, r: m[x + 1].coord } })
                    );
                }
              else {
                var _,
                  b = a.map(n, function(e, n) {
                    var i = e.getTicksCoords();
                    return (
                      (_ = null == _ ? i.length - 1 : Math.min(i.length - 1, _)),
                      a.map(i, function(e) {
                        return t.coordToPoint(e.coord, n);
                      })
                    );
                  }),
                  S = [];
                for (x = 0; x <= _; x++) {
                  for (var w = [], M = 0; M < n.length; M++) w.push(b[M][x]);
                  if ((w[0] && w.push(w[0].slice()), c))
                    g[T(g, d, x)].push(new r.Polyline({ shape: { points: w } }));
                  if (h && S)
                    f[T(f, p, x - 1)].push(new r.Polygon({ shape: { points: w.concat(S) } }));
                  S = w.slice().reverse();
                }
              }
              var I = l.getLineStyle(),
                A = u.getAreaStyle();
              a.each(
                f,
                function(e, t) {
                  this.group.add(
                    r.mergePath(e, {
                      style: a.defaults({ stroke: 'none', fill: p[t % p.length] }, A),
                      silent: !0
                    })
                  );
                },
                this
              ),
                a.each(
                  g,
                  function(e, t) {
                    this.group.add(
                      r.mergePath(e, {
                        style: a.defaults({ fill: 'none', stroke: d[t % d.length] }, I),
                        silent: !0
                      })
                    );
                  },
                  this
                );
            }
            function T(e, t, n) {
              var i = n % t.length;
              return (e[i] = e[i] || []), i;
            }
          }
        });
      e.exports = l;
    },
    function(e, t, n) {
      var i = n(38),
        a = n(125),
        o = n(2),
        r = n(30).encodeHTML,
        s = i.extend({
          type: 'series.radar',
          dependencies: ['radar'],
          init: function(e) {
            s.superApply(this, 'init', arguments),
              (this.legendDataProvider = function() {
                return this.getRawData();
              });
          },
          getInitialData: function(e, t) {
            return a(this, { generateCoord: 'indicator_', generateCoordCount: 1 / 0 });
          },
          formatTooltip: function(e) {
            var t = this.getData(),
              n = this.coordinateSystem.getIndicatorAxes(),
              i = this.getData().getName(e);
            return (
              r('' === i ? this.name : i) +
              '<br/>' +
              o
                .map(n, function(n, i) {
                  var a = t.get(t.mapDimension(n.dim), e);
                  return r(n.name + ' : ' + a);
                })
                .join('<br />')
            );
          },
          defaultOption: {
            zlevel: 0,
            z: 2,
            coordinateSystem: 'radar',
            legendHoverLink: !0,
            radarIndex: 0,
            lineStyle: { width: 2, type: 'solid' },
            label: { position: 'top' },
            symbol: 'emptyCircle',
            symbolSize: 4
          }
        }),
        l = s;
      e.exports = l;
    },
    function(e, t, n) {
      var i = n(4),
        a = n(6),
        o = n(2),
        r = n(54);
      var s = i.extendChartView({
        type: 'radar',
        render: function(e, t, n) {
          var i = e.coordinateSystem,
            s = this.group,
            l = e.getData(),
            u = this._data;
          function c(e, t) {
            var n = e.getItemVisual(t, 'symbol') || 'circle',
              i = e.getItemVisual(t, 'color');
            if ('none' !== n) {
              var a = (function(e) {
                  return o.isArray(e) || (e = [+e, +e]), e;
                })(e.getItemVisual(t, 'symbolSize')),
                s = r.createSymbol(n, -1, -1, 2, 2, i);
              return (
                s.attr({ style: { strokeNoScale: !0 }, z2: 100, scale: [a[0] / 2, a[1] / 2] }), s
              );
            }
          }
          function h(t, n, i, o, r, s) {
            i.removeAll();
            for (var l = 0; l < n.length - 1; l++) {
              var u = c(o, r);
              u &&
                ((u.__dimIdx = l),
                t[l]
                  ? (u.attr('position', t[l]),
                    a[s ? 'initProps' : 'updateProps'](u, { position: n[l] }, e, r))
                  : u.attr('position', n[l]),
                i.add(u));
            }
          }
          function d(e) {
            return o.map(e, function(e) {
              return [i.cx, i.cy];
            });
          }
          l
            .diff(u)
            .add(function(t) {
              var n = l.getItemLayout(t);
              if (n) {
                var i = new a.Polygon(),
                  o = new a.Polyline(),
                  r = { shape: { points: n } };
                (i.shape.points = d(n)),
                  (o.shape.points = d(n)),
                  a.initProps(i, r, e, t),
                  a.initProps(o, r, e, t);
                var s = new a.Group(),
                  u = new a.Group();
                s.add(o),
                  s.add(i),
                  s.add(u),
                  h(o.shape.points, n, u, l, t, !0),
                  l.setItemGraphicEl(t, s);
              }
            })
            .update(function(t, n) {
              var i = u.getItemGraphicEl(n),
                o = i.childAt(0),
                r = i.childAt(1),
                s = i.childAt(2),
                c = { shape: { points: l.getItemLayout(t) } };
              c.shape.points &&
                (h(o.shape.points, c.shape.points, s, l, t, !1),
                a.updateProps(o, c, e),
                a.updateProps(r, c, e),
                l.setItemGraphicEl(t, i));
            })
            .remove(function(e) {
              s.remove(u.getItemGraphicEl(e));
            })
            .execute(),
            l.eachItemGraphicEl(function(e, t) {
              var n = l.getItemModel(t),
                i = e.childAt(0),
                r = e.childAt(1),
                u = e.childAt(2),
                c = l.getItemVisual(t, 'color');
              s.add(e),
                i.useStyle(
                  o.defaults(n.getModel('lineStyle').getLineStyle(), { fill: 'none', stroke: c })
                ),
                (i.hoverStyle = n.getModel('emphasis.lineStyle').getLineStyle());
              var h = n.getModel('areaStyle'),
                d = n.getModel('emphasis.areaStyle'),
                p = h.isEmpty() && h.parentModel.isEmpty(),
                g = d.isEmpty() && d.parentModel.isEmpty();
              (g = g && p),
                (r.ignore = p),
                r.useStyle(o.defaults(h.getAreaStyle(), { fill: c, opacity: 0.7 })),
                (r.hoverStyle = d.getAreaStyle());
              var f = n.getModel('itemStyle').getItemStyle(['color']),
                m = n.getModel('emphasis.itemStyle').getItemStyle(),
                v = n.getModel('label'),
                y = n.getModel('emphasis.label');
              u.eachChild(function(e) {
                e.setStyle(f), (e.hoverStyle = o.clone(m));
                var n = l.get(l.dimensions[e.__dimIdx], t);
                (null == n || isNaN(n)) && (n = ''),
                  a.setLabelStyle(e.style, e.hoverStyle, v, y, {
                    labelFetcher: l.hostModel,
                    labelDataIndex: t,
                    labelDimIndex: e.__dimIdx,
                    defaultText: n,
                    autoColor: c,
                    isRectText: !0
                  });
              }),
                (e.highDownOnUpdate = function(e, t) {
                  r.attr('ignore', 'emphasis' === t ? g : p);
                }),
                a.setHoverStyle(e);
            }),
            (this._data = l);
        },
        remove: function() {
          this.group.removeAll(), (this._data = null);
        },
        dispose: function() {}
      });
      e.exports = s;
    },
    function(e, t, n) {
      var i = n(2);
      function a(e) {
        return !isNaN(e[0]) && !isNaN(e[1]);
      }
      function o(e) {
        return [e.cx, e.cy];
      }
      e.exports = function(e) {
        e.eachSeriesByType('radar', function(e) {
          var t = e.getData(),
            n = [],
            r = e.coordinateSystem;
          if (r) {
            var s = r.getIndicatorAxes();
            i.each(s, function(e, i) {
              t.each(t.mapDimension(s[i].dim), function(e, t) {
                n[t] = n[t] || [];
                var s = r.dataToPoint(e, i);
                n[t][i] = a(s) ? s : o(r);
              });
            }),
              t.each(function(e) {
                var s =
                  i.find(n[e], function(e) {
                    return a(e);
                  }) || o(r);
                n[e].push(s.slice()), t.setItemLayout(e, n[e]);
              });
          }
        });
      };
    },
    function(e, t, n) {
      var i = n(2);
      e.exports = function(e) {
        var t = e.polar;
        if (t) {
          i.isArray(t) || (t = [t]);
          var n = [];
          i.each(t, function(t, a) {
            t.indicator
              ? (t.type && !t.shape && (t.shape = t.type),
                (e.radar = e.radar || []),
                i.isArray(e.radar) || (e.radar = [e.radar]),
                e.radar.push(t))
              : n.push(t);
          }),
            (e.polar = n);
        }
        i.each(e.series, function(e) {
          e && 'radar' === e.type && e.polarIndex && (e.radarIndex = e.polarIndex);
        });
      };
    },
    function(e, t, n) {
      var i = n(4);
      n(821), n(828), n(436), n(300);
      var a = n(830),
        o = n(831),
        r = n(832),
        s = n(833),
        l = n(433);
      i.registerLayout(a),
        i.registerVisual(o),
        i.registerProcessor(i.PRIORITY.PROCESSOR.STATISTIC, r),
        i.registerPreprocessor(s),
        l('map', [
          { type: 'mapToggleSelect', event: 'mapselectchanged', method: 'toggleSelected' },
          { type: 'mapSelect', event: 'mapselected', method: 'select' },
          { type: 'mapUnSelect', event: 'mapunselected', method: 'unSelect' }
        ]);
    },
    function(e, t, n) {
      var i = n(2),
        a = n(125),
        o = n(38),
        r = n(30),
        s = r.encodeHTML,
        l = r.addCommas,
        u = n(297),
        c = n(101).retrieveRawAttr,
        h = n(205),
        d = o.extend({
          type: 'series.map',
          dependencies: ['geo'],
          layoutMode: 'box',
          needsDrawMap: !1,
          seriesGroup: [],
          getInitialData: function(e) {
            for (
              var t = a(this, ['value']),
                n = t.mapDimension('value'),
                o = i.createHashMap(),
                r = [],
                s = [],
                l = 0,
                u = t.count();
              l < u;
              l++
            ) {
              var d = t.getName(l);
              o.set(d, !0), r.push({ name: d, value: t.get(n, l), selected: c(t, l, 'selected') });
            }
            var p = h.load(this.getMapType(), this.option.nameMap);
            return (
              i.each(p.regions, function(e) {
                var t = e.name;
                o.get(t) || (r.push({ name: t }), s.push(t));
              }),
              this.updateSelectedMap(r),
              t.appendValues([], s),
              t
            );
          },
          getHostGeoModel: function() {
            var e = this.option.geoIndex;
            return null != e ? this.dependentModels.geo[e] : null;
          },
          getMapType: function() {
            return (this.getHostGeoModel() || this).option.map;
          },
          getRawValue: function(e) {
            var t = this.getData();
            return t.get(t.mapDimension('value'), e);
          },
          getRegionModel: function(e) {
            var t = this.getData();
            return t.getItemModel(t.indexOfName(e));
          },
          formatTooltip: function(e) {
            for (
              var t = this.getData(),
                n = l(this.getRawValue(e)),
                i = t.getName(e),
                a = this.seriesGroup,
                o = [],
                r = 0;
              r < a.length;
              r++
            ) {
              var u = a[r].originalData.indexOfName(i),
                c = t.mapDimension('value');
              isNaN(a[r].originalData.get(c, u)) || o.push(s(a[r].name));
            }
            return o.join(', ') + '<br />' + s(i + ' : ' + n);
          },
          getTooltipPosition: function(e) {
            if (null != e) {
              var t = this.getData().getName(e),
                n = this.coordinateSystem,
                i = n.getRegion(t);
              return i && n.dataToPoint(i.center);
            }
          },
          setZoom: function(e) {
            this.option.zoom = e;
          },
          setCenter: function(e) {
            this.option.center = e;
          },
          defaultOption: {
            zlevel: 0,
            z: 2,
            coordinateSystem: 'geo',
            map: '',
            left: 'center',
            top: 'center',
            aspectScale: 0.75,
            showLegendSymbol: !0,
            dataRangeHoverLink: !0,
            boundingCoords: null,
            center: null,
            zoom: 1,
            scaleLimit: null,
            label: { show: !1, color: '#000' },
            itemStyle: { borderWidth: 0.5, borderColor: '#444', areaColor: '#eee' },
            emphasis: {
              label: { show: !0, color: 'rgb(100,0,0)' },
              itemStyle: { areaColor: 'rgba(255,215,0,0.8)' }
            }
          }
        });
      i.mixin(d, u);
      var p = d;
      e.exports = p;
    },
    function(e, t, n) {
      var i = n(2).each,
        a = n(423),
        o = n(18).makeInner,
        r = n(823),
        s = n(824),
        l = n(825),
        u = n(826),
        c = o(),
        h = {
          load: function(e, t) {
            var n = c(t).parsed;
            if (n) return n;
            var o,
              h = t.specialAreas || {},
              p = t.geoJSON;
            try {
              o = p ? a(p) : [];
            } catch (g) {
              throw new Error('Invalid geoJson format\n' + g.message);
            }
            return (
              r(e, o),
              i(o, function(t) {
                var n = t.name;
                s(e, t), l(e, t), u(e, t);
                var i = h[n];
                i && t.transformTo(i.left, i.top, i.width, i.height);
              }),
              (c(t).parsed = { regions: o, boundingRect: d(o) })
            );
          }
        };
      function d(e) {
        for (var t, n = 0; n < e.length; n++) {
          var i = e[n].getBoundingRect();
          (t = t || i.clone()).union(i);
        }
        return t;
      }
      e.exports = h;
    },
    function(e, t, n) {
      for (
        var i = n(2),
          a = n(424),
          o = [126, 25],
          r = [
            [
              [0, 3.5],
              [7, 11.2],
              [15, 11.9],
              [30, 7],
              [42, 0.7],
              [52, 0.7],
              [56, 7.7],
              [59, 0.7],
              [64, 0.7],
              [64, 0],
              [5, 0],
              [0, 3.5]
            ],
            [
              [13, 16.1],
              [19, 14.7],
              [16, 21.7],
              [11, 23.1],
              [13, 16.1]
            ],
            [
              [12, 32.2],
              [14, 38.5],
              [15, 38.5],
              [13, 32.2],
              [12, 32.2]
            ],
            [
              [16, 47.6],
              [12, 53.2],
              [13, 53.2],
              [18, 47.6],
              [16, 47.6]
            ],
            [
              [6, 64.4],
              [8, 70],
              [9, 70],
              [8, 64.4],
              [6, 64.4]
            ],
            [
              [23, 82.6],
              [29, 79.8],
              [30, 79.8],
              [25, 82.6],
              [23, 82.6]
            ],
            [
              [37, 70.7],
              [43, 62.3],
              [44, 62.3],
              [39, 70.7],
              [37, 70.7]
            ],
            [
              [48, 51.1],
              [51, 45.5],
              [53, 45.5],
              [50, 51.1],
              [48, 51.1]
            ],
            [
              [51, 35],
              [51, 28.7],
              [53, 28.7],
              [53, 35],
              [51, 35]
            ],
            [
              [52, 22.4],
              [55, 17.5],
              [56, 17.5],
              [53, 22.4],
              [52, 22.4]
            ],
            [
              [58, 12.6],
              [62, 7],
              [63, 7],
              [60, 12.6],
              [58, 12.6]
            ],
            [
              [0, 3.5],
              [0, 93.1],
              [64, 93.1],
              [64, 0],
              [63, 0],
              [63, 92.4],
              [1, 92.4],
              [1, 3.5],
              [0, 3.5]
            ]
          ],
          s = 0;
        s < r.length;
        s++
      )
        for (var l = 0; l < r[s].length; l++)
          (r[s][l][0] /= 10.5), (r[s][l][1] /= -14), (r[s][l][0] += o[0]), (r[s][l][1] += o[1]);
      e.exports = function(e, t) {
        'china' === e &&
          t.push(
            new a(
              '\u5357\u6d77\u8bf8\u5c9b',
              i.map(r, function(e) {
                return { type: 'polygon', exterior: e };
              }),
              o
            )
          );
      };
    },
    function(e, t) {
      var n = { 南海诸岛: [32, 80], 广东: [0, -10], 香港: [10, 5], 澳门: [-10, 10], 天津: [5, 5] };
      e.exports = function(e, t) {
        if ('china' === e) {
          var i = n[t.name];
          if (i) {
            var a = t.center;
            (a[0] += i[0] / 10.5), (a[1] += -i[1] / 14);
          }
        }
      };
    },
    function(e, t) {
      var n = {
        Russia: [100, 60],
        'United States': [-99, 38],
        'United States of America': [-99, 38]
      };
      e.exports = function(e, t) {
        if ('world' === e) {
          var i = n[t.name];
          if (i) {
            var a = t.center;
            (a[0] = i[0]), (a[1] = i[1]);
          }
        }
      };
    },
    function(e, t) {
      var n = [
        [
          [123.45165252685547, 25.73527164402261],
          [123.49731445312499, 25.73527164402261],
          [123.49731445312499, 25.750734064600884],
          [123.45165252685547, 25.750734064600884],
          [123.45165252685547, 25.73527164402261]
        ]
      ];
      e.exports = function(e, t) {
        'china' === e &&
          '\u53f0\u6e7e' === t.name &&
          t.geometries.push({ type: 'polygon', exterior: n[0] });
      };
    },
    function(e, t, n) {
      var i = n(418),
        a = i.parseSVG,
        o = i.makeViewBoxTransform,
        r = n(118),
        s = n(287),
        l = n(2),
        u = l.assert,
        c = l.createHashMap,
        h = n(29),
        d = (0, n(18).makeInner)(),
        p = {
          load: function(e, t) {
            var n = d(t).originRoot;
            if (n) return { root: n, boundingRect: d(t).boundingRect };
            var i = g(t);
            return (d(t).originRoot = i.root), (d(t).boundingRect = i.boundingRect), i;
          },
          makeGraphic: function(e, t, n) {
            var i = d(t),
              a = i.rootMap || (i.rootMap = c()),
              o = a.get(n);
            if (o) return o;
            var r = i.originRoot,
              s = i.boundingRect;
            return (
              i.originRootHostKey ? (o = g(t, s).root) : ((i.originRootHostKey = n), (o = r)),
              a.set(n, o)
            );
          },
          removeGraphic: function(e, t, n) {
            var i = d(t),
              a = i.rootMap;
            a && a.removeKey(n), n === i.originRootHostKey && (i.originRootHostKey = null);
          }
        };
      function g(e, t) {
        var n,
          i,
          l = e.svgXML;
        try {
          (i = (n = (l && a(l, { ignoreViewBox: !0, ignoreRootClip: !0 })) || {}).root),
            u(null != i);
        } catch (m) {
          throw new Error('Invalid svg format\n' + m.message);
        }
        var c = n.width,
          d = n.height,
          p = n.viewBoxRect;
        if (
          (t ||
            ((t = null == c || null == d ? i.getBoundingRect() : new h(0, 0, 0, 0)),
            null != c && (t.width = c),
            null != d && (t.height = d)),
          p)
        ) {
          var g = o(p, t.width, t.height),
            f = i;
          (i = new r()).add(f), (f.scale = g.scale), (f.position = g.position);
        }
        return i.setClipPath(new s({ shape: t.plain() })), { root: i, boundingRect: t };
      }
      e.exports = p;
    },
    function(e, t, n) {
      var i = n(4),
        a = n(2),
        o = n(6),
        r = n(434),
        s = '__seriesMapHighDown',
        l = '__seriesMapCallKey',
        u = i.extendChartView({
          type: 'map',
          render: function(e, t, n, i) {
            if (!i || 'mapToggleSelect' !== i.type || i.from !== this.uid) {
              var a = this.group;
              if ((a.removeAll(), !e.getHostGeoModel())) {
                if (
                  i &&
                  'geoRoam' === i.type &&
                  'series' === i.componentType &&
                  i.seriesId === e.id
                )
                  (o = this._mapDraw) && a.add(o.group);
                else if (e.needsDrawMap) {
                  var o = this._mapDraw || new r(n, !0);
                  a.add(o.group), o.draw(e, t, n, this, i), (this._mapDraw = o);
                } else this._mapDraw && this._mapDraw.remove(), (this._mapDraw = null);
                e.get('showLegendSymbol') &&
                  t.getComponent('legend') &&
                  this._renderSymbols(e, t, n);
              }
            }
          },
          remove: function() {
            this._mapDraw && this._mapDraw.remove(), (this._mapDraw = null), this.group.removeAll();
          },
          dispose: function() {
            this._mapDraw && this._mapDraw.remove(), (this._mapDraw = null);
          },
          _renderSymbols: function(e, t, n) {
            var i = e.originalData,
              r = this.group;
            i.each(i.mapDimension('value'), function(t, n) {
              if (!isNaN(t)) {
                var u = i.getItemLayout(n);
                if (u && u.point) {
                  var d = u.point,
                    p = u.offset,
                    g = new o.Circle({
                      style: { fill: e.getData().getVisual('color') },
                      shape: { cx: d[0] + 9 * p, cy: d[1], r: 3 },
                      silent: !0,
                      z2: 8 + (p ? 0 : o.Z2_EMPHASIS_LIFT + 1)
                    });
                  if (!p) {
                    var f = e.mainSeries.getData(),
                      m = i.getName(n),
                      v = f.indexOfName(m),
                      y = i.getItemModel(n),
                      x = y.getModel('label'),
                      _ = y.getModel('emphasis.label'),
                      b = f.getItemGraphicEl(v),
                      S = a.retrieve2(e.getFormattedLabel(v, 'normal'), m),
                      w = a.retrieve2(e.getFormattedLabel(v, 'emphasis'), S),
                      M = b[s],
                      I = Math.random();
                    if (!M) {
                      M = b[s] = {};
                      var A = a.curry(c, !0),
                        T = a.curry(c, !1);
                      b.on('mouseover', A)
                        .on('mouseout', T)
                        .on('emphasis', A)
                        .on('normal', T);
                    }
                    (b[l] = I),
                      a.extend(M, {
                        recordVersion: I,
                        circle: g,
                        labelModel: x,
                        hoverLabelModel: _,
                        emphasisText: w,
                        normalText: S
                      }),
                      h(M, !1);
                  }
                  r.add(g);
                }
              }
            });
          }
        });
      function c(e) {
        var t = this[s];
        t && t.recordVersion === this[l] && h(t, e);
      }
      function h(e, t) {
        var n = e.circle,
          i = e.labelModel,
          a = e.hoverLabelModel,
          r = e.emphasisText,
          s = e.normalText;
        t
          ? (n.style.extendFrom(
              o.setTextStyle(
                {},
                a,
                { text: a.get('show') ? r : null },
                { isRectText: !0, useInsideStyle: !1 },
                !0
              )
            ),
            (n.__mapOriginalZ2 = n.z2),
            (n.z2 += o.Z2_EMPHASIS_LIFT))
          : (o.setTextStyle(
              n.style,
              i,
              {
                text: i.get('show') ? s : null,
                textPosition: i.getShallow('position') || 'bottom'
              },
              { isRectText: !0, useInsideStyle: !1 }
            ),
            n.dirty(!1),
            null != n.__mapOriginalZ2 && ((n.z2 = n.__mapOriginalZ2), (n.__mapOriginalZ2 = null)));
      }
      e.exports = u;
    },
    function(e, t, n) {
      var i = n(2),
        a = n(29),
        o = n(301),
        r = n(205);
      function s(e, t, n, i) {
        o.call(this, e), (this.map = t);
        var a = r.load(t, n);
        (this._nameCoordMap = a.nameCoordMap),
          (this._regionsMap = a.regionsMap),
          (this._invertLongitute = null == i || i),
          (this.regions = a.regions),
          (this._rect = a.boundingRect);
      }
      function l(e, t, n, i) {
        var a = n.geoModel,
          o = n.seriesModel,
          r = a
            ? a.coordinateSystem
            : o
            ? o.coordinateSystem || (o.getReferringComponents('geo')[0] || {}).coordinateSystem
            : null;
        return r === this ? r[e](i) : null;
      }
      (s.prototype = {
        constructor: s,
        type: 'geo',
        dimensions: ['lng', 'lat'],
        containCoord: function(e) {
          for (var t = this.regions, n = 0; n < t.length; n++) if (t[n].contain(e)) return !0;
          return !1;
        },
        transformTo: function(e, t, n, i) {
          var o = this.getBoundingRect(),
            r = this._invertLongitute;
          (o = o.clone()), r && (o.y = -o.y - o.height);
          var s = this._rawTransformable;
          if (
            ((s.transform = o.calculateTransform(new a(e, t, n, i))), s.decomposeTransform(), r)
          ) {
            var l = s.scale;
            l[1] = -l[1];
          }
          s.updateTransform(), this._updateTransform();
        },
        getRegion: function(e) {
          return this._regionsMap.get(e);
        },
        getRegionByCoord: function(e) {
          for (var t = this.regions, n = 0; n < t.length; n++) if (t[n].contain(e)) return t[n];
        },
        addGeoCoord: function(e, t) {
          this._nameCoordMap.set(e, t);
        },
        getGeoCoord: function(e) {
          return this._nameCoordMap.get(e);
        },
        getBoundingRect: function() {
          return this._rect;
        },
        dataToPoint: function(e, t, n) {
          if (('string' === typeof e && (e = this.getGeoCoord(e)), e))
            return o.prototype.dataToPoint.call(this, e, t, n);
        },
        convertToPixel: i.curry(l, 'dataToPoint'),
        convertFromPixel: i.curry(l, 'pointToData')
      }),
        i.mixin(s, o);
      var u = s;
      e.exports = u;
    },
    function(e, t, n) {
      var i = n(2);
      e.exports = function(e) {
        var t = {};
        e.eachSeriesByType('map', function(n) {
          var a = n.getMapType();
          if (!n.getHostGeoModel() && !t[a]) {
            var o = {};
            i.each(n.seriesGroup, function(t) {
              var n = t.coordinateSystem,
                i = t.originalData;
              t.get('showLegendSymbol') &&
                e.getComponent('legend') &&
                i.each(i.mapDimension('value'), function(e, t) {
                  var a = i.getName(t),
                    r = n.getRegion(a);
                  if (r && !isNaN(e)) {
                    var s = o[a] || 0,
                      l = n.dataToPoint(r.center);
                    (o[a] = s + 1), i.setItemLayout(t, { point: l, offset: s });
                  }
                });
            });
            var r = n.getData();
            r.each(function(e) {
              var t = r.getName(e),
                n = r.getItemLayout(e) || {};
              (n.showLabel = !o[t]), r.setItemLayout(e, n);
            }),
              (t[a] = !0);
          }
        });
      };
    },
    function(e, t) {
      e.exports = function(e) {
        e.eachSeriesByType('map', function(e) {
          var t = e.get('color'),
            n = e.getModel('itemStyle'),
            i = n.get('areaColor'),
            a = n.get('color') || t[e.seriesIndex % t.length];
          e.getData().setVisual({ areaColor: i, color: a });
        });
      };
    },
    function(e, t, n) {
      var i = n(2);
      e.exports = function(e) {
        var t = {};
        e.eachSeriesByType('map', function(e) {
          var n = e.getHostGeoModel(),
            i = n ? 'o' + n.id : 'i' + e.getMapType();
          (t[i] = t[i] || []).push(e);
        }),
          i.each(t, function(e, t) {
            for (
              var n = (function(e, t) {
                  var n = {};
                  return (
                    i.each(e, function(e) {
                      e.each(e.mapDimension('value'), function(t, i) {
                        var a = 'ec-' + e.getName(i);
                        (n[a] = n[a] || []), isNaN(t) || n[a].push(t);
                      });
                    }),
                    e[0].map(e[0].mapDimension('value'), function(i, a) {
                      for (
                        var o,
                          r = 'ec-' + e[0].getName(a),
                          s = 0,
                          l = 1 / 0,
                          u = -1 / 0,
                          c = n[r].length,
                          h = 0;
                        h < c;
                        h++
                      )
                        (l = Math.min(l, n[r][h])), (u = Math.max(u, n[r][h])), (s += n[r][h]);
                      return (
                        (o = 'min' === t ? l : 'max' === t ? u : 'average' === t ? s / c : s),
                        0 === c ? NaN : o
                      );
                    })
                  );
                })(
                  i.map(e, function(e) {
                    return e.getData();
                  }),
                  e[0].get('mapValueCalculation')
                ),
                a = 0;
              a < e.length;
              a++
            )
              e[a].originalData = e[a].getData();
            for (a = 0; a < e.length; a++)
              (e[a].seriesGroup = e),
                (e[a].needsDrawMap = 0 === a && !e[a].getHostGeoModel()),
                e[a].setData(n.cloneShallow()),
                (e[a].mainSeries = e[0]);
          });
      };
    },
    function(e, t, n) {
      var i = n(2);
      e.exports = function(e) {
        var t = [];
        i.each(e.series, function(e) {
          e &&
            'map' === e.type &&
            (t.push(e), (e.map = e.map || e.mapType), i.defaults(e, e.mapLocation));
        });
      };
    },
    function(e, t, n) {
      var i = n(4);
      n(835), n(836), n(837);
      var a = n(103),
        o = n(838);
      i.registerVisual(a('tree', 'circle')), i.registerLayout(o);
    },
    function(e, t, n) {
      var i = n(38),
        a = n(302),
        o = n(30).encodeHTML,
        r = i.extend({
          type: 'series.tree',
          layoutInfo: null,
          layoutMode: 'box',
          getInitialData: function(e) {
            var t = { name: e.name, children: e.data },
              n = e.leaves || {},
              i = {};
            i.leaves = n;
            var o = a.createTree(t, this, i),
              r = 0;
            o.eachNode('preorder', function(e) {
              e.depth > r && (r = e.depth);
            });
            var s = e.expandAndCollapse && e.initialTreeDepth >= 0 ? e.initialTreeDepth : r;
            return (
              o.root.eachNode('preorder', function(e) {
                var t = e.hostTree.data.getRawDataItem(e.dataIndex);
                e.isExpand = t && null != t.collapsed ? !t.collapsed : e.depth <= s;
              }),
              o.data
            );
          },
          getOrient: function() {
            var e = this.get('orient');
            return 'horizontal' === e ? (e = 'LR') : 'vertical' === e && (e = 'TB'), e;
          },
          setZoom: function(e) {
            this.option.zoom = e;
          },
          setCenter: function(e) {
            this.option.center = e;
          },
          formatTooltip: function(e) {
            for (
              var t = this.getData().tree,
                n = t.root.children[0],
                i = t.getNodeByDataIndex(e),
                a = i.getValue(),
                r = i.name;
              i && i !== n;

            )
              (r = i.parentNode.name + '.' + r), (i = i.parentNode);
            return o(r + (isNaN(a) || null == a ? '' : ' : ' + a));
          },
          defaultOption: {
            zlevel: 0,
            z: 2,
            coordinateSystem: 'view',
            left: '12%',
            top: '12%',
            right: '12%',
            bottom: '12%',
            layout: 'orthogonal',
            roam: !1,
            nodeScaleRatio: 0.4,
            center: null,
            zoom: 1,
            orient: 'LR',
            symbol: 'emptyCircle',
            symbolSize: 7,
            expandAndCollapse: !0,
            initialTreeDepth: 2,
            lineStyle: { color: '#ccc', width: 1.5, curveness: 0.5 },
            itemStyle: { color: 'lightsteelblue', borderColor: '#c23531', borderWidth: 1.5 },
            label: { show: !0, color: '#555' },
            leaves: { label: { show: !0 } },
            animationEasing: 'linear',
            animationDuration: 700,
            animationDurationUpdate: 1e3
          }
        });
      e.exports = r;
    },
    function(e, t, n) {
      var i = n(2),
        a = n(6),
        o = n(201),
        r = n(438).radialCoordinate,
        s = n(4),
        l = n(194),
        u = n(301),
        c = n(298),
        h = n(158),
        d = n(206).onIrrelevantElement,
        p = s.extendChartView({
          type: 'tree',
          init: function(e, t) {
            this._oldTree,
              (this._mainGroup = new a.Group()),
              (this._controller = new h(t.getZr())),
              (this._controllerHost = { target: this.group }),
              this.group.add(this._mainGroup);
          },
          render: function(e, t, n, i) {
            var a = e.getData(),
              o = e.layoutInfo,
              r = this._mainGroup,
              s = e.get('layout');
            'radial' === s
              ? r.attr('position', [o.x + o.width / 2, o.y + o.height / 2])
              : r.attr('position', [o.x, o.y]),
              this._updateViewCoordSys(e, o, s),
              this._updateController(e, t, n);
            var l = this._data,
              u = {
                expandAndCollapse: e.get('expandAndCollapse'),
                layout: s,
                orient: e.getOrient(),
                curvature: e.get('lineStyle.curveness'),
                symbolRotate: e.get('symbolRotate'),
                symbolOffset: e.get('symbolOffset'),
                hoverAnimation: e.get('hoverAnimation'),
                useNameLabel: !0,
                fadeIn: !0
              };
            a
              .diff(l)
              .add(function(t) {
                g(a, t) && m(a, t, null, r, e, u);
              })
              .update(function(t, n) {
                var i = l.getItemGraphicEl(n);
                g(a, t) ? m(a, t, i, r, e, u) : i && v(l, n, i, r, e, u);
              })
              .remove(function(t) {
                var n = l.getItemGraphicEl(t);
                n && v(l, t, n, r, e, u);
              })
              .execute(),
              (this._nodeScaleRatio = e.get('nodeScaleRatio')),
              this._updateNodeAndLinkScale(e),
              !0 === u.expandAndCollapse &&
                a.eachItemGraphicEl(function(t, i) {
                  t.off('click').on('click', function() {
                    n.dispatchAction({
                      type: 'treeExpandAndCollapse',
                      seriesId: e.id,
                      dataIndex: i
                    });
                  });
                }),
              (this._data = a);
          },
          _updateViewCoordSys: function(e) {
            var t = e.getData(),
              n = [];
            t.each(function(e) {
              var i = t.getItemLayout(e);
              !i || isNaN(i.x) || isNaN(i.y) || n.push([+i.x, +i.y]);
            });
            var i = [],
              a = [];
            l.fromPoints(n, i, a);
            var o = this._min,
              r = this._max;
            a[0] - i[0] === 0 && ((i[0] = o ? o[0] : i[0] - 1), (a[0] = r ? r[0] : a[0] + 1)),
              a[1] - i[1] === 0 && ((i[1] = o ? o[1] : i[1] - 1), (a[1] = r ? r[1] : a[1] + 1));
            var s = (e.coordinateSystem = new u());
            (s.zoomLimit = e.get('scaleLimit')),
              s.setBoundingRect(i[0], i[1], a[0] - i[0], a[1] - i[1]),
              s.setCenter(e.get('center')),
              s.setZoom(e.get('zoom')),
              this.group.attr({ position: s.position, scale: s.scale }),
              (this._viewCoordSys = s),
              (this._min = i),
              (this._max = a);
          },
          _updateController: function(e, t, n) {
            var i = this._controller,
              a = this._controllerHost,
              o = this.group;
            i.setPointerChecker(function(t, i, a) {
              var r = o.getBoundingRect();
              return r.applyTransform(o.transform), r.contain(i, a) && !d(t, n, e);
            }),
              i.enable(e.get('roam')),
              (a.zoomLimit = e.get('scaleLimit')),
              (a.zoom = e.coordinateSystem.getZoom()),
              i
                .off('pan')
                .off('zoom')
                .on(
                  'pan',
                  function(t) {
                    c.updateViewOnPan(a, t.dx, t.dy),
                      n.dispatchAction({ seriesId: e.id, type: 'treeRoam', dx: t.dx, dy: t.dy });
                  },
                  this
                )
                .on(
                  'zoom',
                  function(t) {
                    c.updateViewOnZoom(a, t.scale, t.originX, t.originY),
                      n.dispatchAction({
                        seriesId: e.id,
                        type: 'treeRoam',
                        zoom: t.scale,
                        originX: t.originX,
                        originY: t.originY
                      }),
                      this._updateNodeAndLinkScale(e);
                  },
                  this
                );
          },
          _updateNodeAndLinkScale: function(e) {
            var t = e.getData(),
              n = this._getNodeGlobalScale(e),
              i = [n, n];
            t.eachItemGraphicEl(function(e, t) {
              e.attr('scale', i);
            });
          },
          _getNodeGlobalScale: function(e) {
            var t = e.coordinateSystem;
            if ('view' !== t.type) return 1;
            var n = this._nodeScaleRatio,
              i = t.scale,
              a = (i && i[0]) || 1;
            return ((t.getZoom() - 1) * n + 1) / a;
          },
          dispose: function() {
            this._controller && this._controller.dispose(), (this._controllerHost = {});
          },
          remove: function() {
            this._mainGroup.removeAll(), (this._data = null);
          }
        });
      function g(e, t) {
        var n = e.getItemLayout(t);
        return n && !isNaN(n.x) && !isNaN(n.y) && 'none' !== e.getItemVisual(t, 'symbol');
      }
      function f(e, t, n) {
        return (
          (n.itemModel = t),
          (n.itemStyle = t.getModel('itemStyle').getItemStyle()),
          (n.hoverItemStyle = t.getModel('emphasis.itemStyle').getItemStyle()),
          (n.lineStyle = t.getModel('lineStyle').getLineStyle()),
          (n.labelModel = t.getModel('label')),
          (n.hoverLabelModel = t.getModel('emphasis.label')),
          !1 === e.isExpand && 0 !== e.children.length
            ? (n.symbolInnerColor = n.itemStyle.fill)
            : (n.symbolInnerColor = '#fff'),
          n
        );
      }
      function m(e, t, n, r, s, l) {
        var u = !n,
          c = e.tree.getNodeByDataIndex(t),
          h = c.getModel(),
          d = ((l = f(c, h, l)), e.tree.root),
          p = c.parentNode === d ? c : c.parentNode || c,
          g = e.getItemGraphicEl(p.dataIndex),
          m = p.getLayout(),
          v = g
            ? {
                x: g.position[0],
                y: g.position[1],
                rawX: g.__radialOldRawX,
                rawY: g.__radialOldRawY
              }
            : m,
          x = c.getLayout();
        u ? (n = new o(e, t, l)).attr('position', [v.x, v.y]) : n.updateData(e, t, l),
          (n.__radialOldRawX = n.__radialRawX),
          (n.__radialOldRawY = n.__radialRawY),
          (n.__radialRawX = x.rawX),
          (n.__radialRawY = x.rawY),
          r.add(n),
          e.setItemGraphicEl(t, n),
          a.updateProps(n, { position: [x.x, x.y] }, s);
        var _ = n.getSymbolPath();
        if ('radial' === l.layout) {
          var b,
            S,
            w = d.children[0],
            M = w.getLayout(),
            I = w.children.length;
          if (x.x === M.x && !0 === c.isExpand) {
            var A = {};
            (A.x = (w.children[0].getLayout().x + w.children[I - 1].getLayout().x) / 2),
              (A.y = (w.children[0].getLayout().y + w.children[I - 1].getLayout().y) / 2),
              (b = Math.atan2(A.y - M.y, A.x - M.x)) < 0 && (b = 2 * Math.PI + b),
              (S = A.x < M.x) && (b -= Math.PI);
          } else
            (b = Math.atan2(x.y - M.y, x.x - M.x)) < 0 && (b = 2 * Math.PI + b),
              0 === c.children.length || (0 !== c.children.length && !1 === c.isExpand)
                ? (S = x.x < M.x) && (b -= Math.PI)
                : (S = x.x > M.x) || (b -= Math.PI);
          var T = S ? 'left' : 'right',
            D = l.labelModel.get('rotate'),
            C = D * (Math.PI / 180);
          _.setStyle({
            textPosition: l.labelModel.get('position') || T,
            textRotation: null == D ? -b : C,
            textOrigin: 'center',
            verticalAlign: 'middle'
          });
        }
        if (c.parentNode && c.parentNode !== d) {
          var L = n.__edge;
          L ||
            (L = n.__edge = new a.BezierCurve({
              shape: y(l, v, v),
              style: i.defaults({ opacity: 0, strokeNoScale: !0 }, l.lineStyle)
            })),
            a.updateProps(L, { shape: y(l, m, x), style: { opacity: 1 } }, s),
            r.add(L);
        }
      }
      function v(e, t, n, i, o, r) {
        for (
          var s,
            l = e.tree.getNodeByDataIndex(t),
            u = e.tree.root,
            c = l.getModel(),
            h = ((r = f(l, c, r)), l.parentNode === u ? l : l.parentNode || l);
          null == (s = h.getLayout());

        )
          h = h.parentNode === u ? h : h.parentNode || h;
        a.updateProps(n, { position: [s.x + 1, s.y + 1] }, o, function() {
          i.remove(n), e.setItemGraphicEl(t, null);
        }),
          n.fadeOut(null, { keepLabel: !0 });
        var d = n.__edge;
        d &&
          a.updateProps(d, { shape: y(r, s, s), style: { opacity: 0 } }, o, function() {
            i.remove(d);
          });
      }
      function y(e, t, n) {
        var i,
          a,
          o,
          s,
          l,
          u,
          c,
          h,
          d = e.orient;
        if ('radial' === e.layout) {
          (l = t.rawX), (c = t.rawY), (u = n.rawX), (h = n.rawY);
          var p = r(l, c),
            g = r(l, c + (h - c) * e.curvature),
            f = r(u, h + (c - h) * e.curvature),
            m = r(u, h);
          return { x1: p.x, y1: p.y, x2: m.x, y2: m.y, cpx1: g.x, cpy1: g.y, cpx2: f.x, cpy2: f.y };
        }
        return (
          (l = t.x),
          (c = t.y),
          (u = n.x),
          (h = n.y),
          ('LR' !== d && 'RL' !== d) ||
            ((i = l + (u - l) * e.curvature), (a = c), (o = u + (l - u) * e.curvature), (s = h)),
          ('TB' !== d && 'BT' !== d) ||
            ((i = l), (a = c + (h - c) * e.curvature), (o = u), (s = h + (c - h) * e.curvature)),
          { x1: l, y1: c, x2: u, y2: h, cpx1: i, cpy1: a, cpx2: o, cpy2: s }
        );
      }
      e.exports = p;
    },
    function(e, t, n) {
      var i = n(4),
        a = n(299).updateCenterAndZoom;
      i.registerAction(
        { type: 'treeExpandAndCollapse', event: 'treeExpandAndCollapse', update: 'update' },
        function(e, t) {
          t.eachComponent({ mainType: 'series', subType: 'tree', query: e }, function(t) {
            var n = e.dataIndex,
              i = t.getData().tree.getNodeByDataIndex(n);
            i.isExpand = !i.isExpand;
          });
        }
      ),
        i.registerAction({ type: 'treeRoam', event: 'treeRoam', update: 'none' }, function(e, t) {
          t.eachComponent({ mainType: 'series', subType: 'tree', query: e }, function(t) {
            var n = t.coordinateSystem,
              i = a(n, e);
            t.setCenter && t.setCenter(i.center), t.setZoom && t.setZoom(i.zoom);
          });
        });
    },
    function(e, t, n) {
      var i = n(839),
        a = i.eachAfter,
        o = i.eachBefore,
        r = n(438),
        s = r.init,
        l = r.firstWalk,
        u = r.secondWalk,
        c = r.separation,
        h = r.radialCoordinate,
        d = r.getViewRect;
      e.exports = function(e, t) {
        e.eachSeriesByType('tree', function(e) {
          !(function(e, t) {
            var n = d(e, t);
            e.layoutInfo = n;
            var i = e.get('layout'),
              r = 0,
              p = 0,
              g = null;
            'radial' === i
              ? ((r = 2 * Math.PI),
                (p = Math.min(n.height, n.width) / 2),
                (g = c(function(e, t) {
                  return (e.parentNode === t.parentNode ? 1 : 2) / e.depth;
                })))
              : ((r = n.width), (p = n.height), (g = c()));
            var f = e.getData().tree.root,
              m = f.children[0];
            if (m) {
              s(f), a(m, l, g), (f.hierNode.modifier = -m.hierNode.prelim), o(m, u);
              var v = m,
                y = m,
                x = m;
              o(m, function(e) {
                var t = e.getLayout().x;
                t < v.getLayout().x && (v = e),
                  t > y.getLayout().x && (y = e),
                  e.depth > x.depth && (x = e);
              });
              var _ = v === y ? 1 : g(v, y) / 2,
                b = _ - v.getLayout().x,
                S = 0,
                w = 0,
                M = 0,
                I = 0;
              if ('radial' === i)
                (S = r / (y.getLayout().x + _ + b)),
                  (w = p / (x.depth - 1 || 1)),
                  o(m, function(e) {
                    (M = (e.getLayout().x + b) * S), (I = (e.depth - 1) * w);
                    var t = h(M, I);
                    e.setLayout({ x: t.x, y: t.y, rawX: M, rawY: I }, !0);
                  });
              else {
                var A = e.getOrient();
                'RL' === A || 'LR' === A
                  ? ((w = p / (y.getLayout().x + _ + b)),
                    (S = r / (x.depth - 1 || 1)),
                    o(m, function(e) {
                      (I = (e.getLayout().x + b) * w),
                        (M = 'LR' === A ? (e.depth - 1) * S : r - (e.depth - 1) * S),
                        e.setLayout({ x: M, y: I }, !0);
                    }))
                  : ('TB' !== A && 'BT' !== A) ||
                    ((S = r / (y.getLayout().x + _ + b)),
                    (w = p / (x.depth - 1 || 1)),
                    o(m, function(e) {
                      (M = (e.getLayout().x + b) * S),
                        (I = 'TB' === A ? (e.depth - 1) * w : p - (e.depth - 1) * w),
                        e.setLayout({ x: M, y: I }, !0);
                    }));
              }
            }
          })(e, t);
        });
      };
    },
    function(e, t) {
      (t.eachAfter = function(e, t, n) {
        for (var i, a = [e], o = []; (i = a.pop()); )
          if ((o.push(i), i.isExpand)) {
            var r = i.children;
            if (r.length) for (var s = 0; s < r.length; s++) a.push(r[s]);
          }
        for (; (i = o.pop()); ) t(i, n);
      }),
        (t.eachBefore = function(e, t) {
          for (var n, i = [e]; (n = i.pop()); )
            if ((t(n), n.isExpand)) {
              var a = n.children;
              if (a.length) for (var o = a.length - 1; o >= 0; o--) i.push(a[o]);
            }
        });
    },
    function(e, t, n) {
      var i = n(4);
      n(841), n(842), n(845);
      var a = n(846),
        o = n(847);
      i.registerVisual(a), i.registerLayout(o);
    },
    function(e, t, n) {
      var i = n(2),
        a = n(38),
        o = n(302),
        r = n(36),
        s = n(30),
        l = s.encodeHTML,
        u = s.addCommas,
        c = n(105).wrapTreePathInfo,
        h = a.extend({
          type: 'series.treemap',
          layoutMode: 'box',
          dependencies: ['grid', 'polar'],
          preventUsingHoverLayer: !0,
          _viewRoot: null,
          defaultOption: {
            progressive: 0,
            left: 'center',
            top: 'middle',
            right: null,
            bottom: null,
            width: '80%',
            height: '80%',
            sort: !0,
            clipWindow: 'origin',
            squareRatio: 0.5 * (1 + Math.sqrt(5)),
            leafDepth: null,
            drillDownIcon: '\u25b6',
            zoomToNodeRatio: 0.1024,
            roam: !0,
            nodeClick: 'zoomToNode',
            animation: !0,
            animationDurationUpdate: 900,
            animationEasing: 'quinticInOut',
            breadcrumb: {
              show: !0,
              height: 22,
              left: 'center',
              top: 'bottom',
              emptyItemWidth: 25,
              itemStyle: {
                color: 'rgba(0,0,0,0.7)',
                borderColor: 'rgba(255,255,255,0.7)',
                borderWidth: 1,
                shadowColor: 'rgba(150,150,150,1)',
                shadowBlur: 3,
                shadowOffsetX: 0,
                shadowOffsetY: 0,
                textStyle: { color: '#fff' }
              },
              emphasis: { textStyle: {} }
            },
            label: {
              show: !0,
              distance: 0,
              padding: 5,
              position: 'inside',
              color: '#fff',
              ellipsis: !0
            },
            upperLabel: {
              show: !1,
              position: [0, '50%'],
              height: 20,
              color: '#fff',
              ellipsis: !0,
              verticalAlign: 'middle'
            },
            itemStyle: {
              color: null,
              colorAlpha: null,
              colorSaturation: null,
              borderWidth: 0,
              gapWidth: 0,
              borderColor: '#fff',
              borderColorSaturation: null
            },
            emphasis: {
              upperLabel: {
                show: !0,
                position: [0, '50%'],
                color: '#fff',
                ellipsis: !0,
                verticalAlign: 'middle'
              }
            },
            visualDimension: 0,
            visualMin: null,
            visualMax: null,
            color: [],
            colorAlpha: null,
            colorSaturation: null,
            colorMappingBy: 'index',
            visibleMin: 10,
            childrenVisibleMin: null,
            levels: []
          },
          getInitialData: function(e, t) {
            var n = { name: e.name, children: e.data };
            !(function e(t) {
              var n = 0;
              i.each(t.children, function(t) {
                e(t);
                var a = t.value;
                i.isArray(a) && (a = a[0]), (n += a);
              });
              var a = t.value;
              i.isArray(a) && (a = a[0]);
              (null == a || isNaN(a)) && (a = n);
              a < 0 && (a = 0);
              i.isArray(t.value) ? (t.value[0] = a) : (t.value = a);
            })(n);
            var a = e.levels || [];
            a = e.levels = (function(e, t) {
              var n,
                a = t.get('color');
              if (!a) return;
              if (
                ((e = e || []),
                i.each(e, function(e) {
                  var t = new r(e),
                    i = t.get('color');
                  (t.get('itemStyle.color') || (i && 'none' !== i)) && (n = !0);
                }),
                !n)
              ) {
                (e[0] || (e[0] = {})).color = a.slice();
              }
              return e;
            })(a, t);
            var s = {};
            return (s.levels = a), o.createTree(n, this, s).data;
          },
          optionUpdated: function() {
            this.resetViewRoot();
          },
          formatTooltip: function(e) {
            var t = this.getData(),
              n = this.getRawValue(e),
              a = i.isArray(n) ? u(n[0]) : u(n),
              o = t.getName(e);
            return l(o + ': ' + a);
          },
          getDataParams: function(e) {
            var t = a.prototype.getDataParams.apply(this, arguments),
              n = this.getData().tree.getNodeByDataIndex(e);
            return (t.treePathInfo = c(n, this)), t;
          },
          setLayoutInfo: function(e) {
            (this.layoutInfo = this.layoutInfo || {}), i.extend(this.layoutInfo, e);
          },
          mapIdToIndex: function(e) {
            var t = this._idIndexMap;
            t || ((t = this._idIndexMap = i.createHashMap()), (this._idIndexMapCount = 0));
            var n = t.get(e);
            return null == n && t.set(e, (n = this._idIndexMapCount++)), n;
          },
          getViewRoot: function() {
            return this._viewRoot;
          },
          resetViewRoot: function(e) {
            e ? (this._viewRoot = e) : (e = this._viewRoot);
            var t = this.getRawData().tree.root;
            (e && (e === t || t.contains(e))) || (this._viewRoot = t);
          }
        });
      e.exports = h;
    },
    function(e, t, n) {
      var i = n(4),
        a = n(2),
        o = n(6),
        r = n(102),
        s = n(105),
        l = n(843),
        u = n(158),
        c = n(29),
        h = n(42),
        d = n(844),
        p = n(120),
        g = a.bind,
        f = o.Group,
        m = o.Rect,
        v = a.each,
        y = ['label'],
        x = ['emphasis', 'label'],
        _ = ['upperLabel'],
        b = ['emphasis', 'upperLabel'],
        S = 10,
        w = 1,
        M = 2,
        I = p([
          ['fill', 'color'],
          ['stroke', 'strokeColor'],
          ['lineWidth', 'strokeWidth'],
          ['shadowBlur'],
          ['shadowOffsetX'],
          ['shadowOffsetY'],
          ['shadowColor']
        ]),
        A = function(e) {
          var t = I(e);
          return (t.stroke = t.fill = t.lineWidth = null), t;
        },
        T = i.extendChartView({
          type: 'treemap',
          init: function(e, t) {
            this._containerGroup,
              (this._storage = { nodeGroup: [], background: [], content: [] }),
              this._oldTree,
              this._breadcrumb,
              this._controller,
              (this._state = 'ready');
          },
          render: function(e, t, n, i) {
            var o = t.findComponents({ mainType: 'series', subType: 'treemap', query: i });
            if (!(a.indexOf(o, e) < 0)) {
              (this.seriesModel = e), (this.api = n), (this.ecModel = t);
              var r = s.retrieveTargetInfo(i, ['treemapZoomToNode', 'treemapRootToNode'], e),
                l = i && i.type,
                u = e.layoutInfo,
                c = !this._oldTree,
                h = this._storage,
                d =
                  'treemapRootToNode' === l && r && h
                    ? { rootNodeGroup: h.nodeGroup[r.node.getRawIndex()], direction: i.direction }
                    : null,
                p = this._giveContainerGroup(u),
                g = this._doRender(p, e, d);
              c || (l && 'treemapZoomToNode' !== l && 'treemapRootToNode' !== l)
                ? g.renderFinally()
                : this._doAnimation(p, g, e, d),
                this._resetController(n),
                this._renderBreadcrumb(e, n, r);
            }
          },
          _giveContainerGroup: function(e) {
            var t = this._containerGroup;
            return (
              t || ((t = this._containerGroup = new f()), this._initEvents(t), this.group.add(t)),
              t.attr('position', [e.x, e.y]),
              t
            );
          },
          _doRender: function(e, t, n) {
            var i = t.getData().tree,
              o = this._oldTree,
              s = { nodeGroup: [], background: [], content: [] },
              l = { nodeGroup: [], background: [], content: [] },
              u = this._storage,
              c = [],
              h = a.curry(D, t, l, u, n, s, c);
            !(function e(t, n, i, o, s) {
              o
                ? ((n = t),
                  v(t, function(e, t) {
                    !e.isRemoved() && u(t, t);
                  }))
                : new r(n, t, l, l)
                    .add(u)
                    .update(u)
                    .remove(a.curry(u, null))
                    .execute();
              function l(e) {
                return e.getId();
              }
              function u(a, r) {
                var l = null != a ? t[a] : null,
                  u = null != r ? n[r] : null,
                  c = h(l, u, i, s);
                c && e((l && l.viewChildren) || [], (u && u.viewChildren) || [], c, o, s + 1);
              }
            })(i.root ? [i.root] : [], o && o.root ? [o.root] : [], e, i === o || !o, 0);
            var d = (function(e) {
              var t = { nodeGroup: [], background: [], content: [] };
              return (
                e &&
                  v(e, function(e, n) {
                    var i = t[n];
                    v(e, function(e) {
                      e && (i.push(e), (e.__tmWillDelete = 1));
                    });
                  }),
                t
              );
            })(u);
            return (
              (this._oldTree = i),
              (this._storage = l),
              {
                lastsForAnimation: s,
                willDeleteEls: d,
                renderFinally: function() {
                  v(d, function(e) {
                    v(e, function(e) {
                      e.parent && e.parent.remove(e);
                    });
                  }),
                    v(c, function(e) {
                      (e.invisible = !0), e.dirty();
                    });
                }
              }
            );
          },
          _doAnimation: function(e, t, n, i) {
            if (n.get('animation')) {
              var o = n.get('animationDurationUpdate'),
                r = n.get('animationEasing'),
                s = d.createWrap();
              v(t.willDeleteEls, function(e, t) {
                v(e, function(e, n) {
                  if (!e.invisible) {
                    var a,
                      l = e.parent;
                    if (i && 'drillDown' === i.direction)
                      a =
                        l === i.rootNodeGroup
                          ? {
                              shape: {
                                x: 0,
                                y: 0,
                                width: l.__tmNodeWidth,
                                height: l.__tmNodeHeight
                              },
                              style: { opacity: 0 }
                            }
                          : { style: { opacity: 0 } };
                    else {
                      var u = 0,
                        c = 0;
                      l.__tmWillDelete || ((u = l.__tmNodeWidth / 2), (c = l.__tmNodeHeight / 2)),
                        (a =
                          'nodeGroup' === t
                            ? { position: [u, c], style: { opacity: 0 } }
                            : {
                                shape: { x: u, y: c, width: 0, height: 0 },
                                style: { opacity: 0 }
                              });
                    }
                    a && s.add(e, a, o, r);
                  }
                });
              }),
                v(
                  this._storage,
                  function(e, n) {
                    v(e, function(e, i) {
                      var l = t.lastsForAnimation[n][i],
                        u = {};
                      l &&
                        ('nodeGroup' === n
                          ? l.old && ((u.position = e.position.slice()), e.attr('position', l.old))
                          : (l.old && ((u.shape = a.extend({}, e.shape)), e.setShape(l.old)),
                            l.fadein
                              ? (e.setStyle('opacity', 0), (u.style = { opacity: 1 }))
                              : 1 !== e.style.opacity && (u.style = { opacity: 1 })),
                        s.add(e, u, o, r));
                    });
                  },
                  this
                ),
                (this._state = 'animating'),
                s
                  .done(
                    g(function() {
                      (this._state = 'ready'), t.renderFinally();
                    }, this)
                  )
                  .start();
            }
          },
          _resetController: function(e) {
            var t = this._controller;
            t ||
              ((t = this._controller = new u(e.getZr())).enable(this.seriesModel.get('roam')),
              t.on('pan', g(this._onPan, this)),
              t.on('zoom', g(this._onZoom, this)));
            var n = new c(0, 0, e.getWidth(), e.getHeight());
            t.setPointerChecker(function(e, t, i) {
              return n.contain(t, i);
            });
          },
          _clearController: function() {
            var e = this._controller;
            e && (e.dispose(), (e = null));
          },
          _onPan: function(e) {
            if ('animating' !== this._state && (Math.abs(e.dx) > 3 || Math.abs(e.dy) > 3)) {
              var t = this.seriesModel.getData().tree.root;
              if (!t) return;
              var n = t.getLayout();
              if (!n) return;
              this.api.dispatchAction({
                type: 'treemapMove',
                from: this.uid,
                seriesId: this.seriesModel.id,
                rootRect: { x: n.x + e.dx, y: n.y + e.dy, width: n.width, height: n.height }
              });
            }
          },
          _onZoom: function(e) {
            var t = e.originX,
              n = e.originY;
            if ('animating' !== this._state) {
              var i = this.seriesModel.getData().tree.root;
              if (!i) return;
              var a = i.getLayout();
              if (!a) return;
              var o = new c(a.x, a.y, a.width, a.height),
                r = this.seriesModel.layoutInfo;
              (t -= r.x), (n -= r.y);
              var s = h.create();
              h.translate(s, s, [-t, -n]),
                h.scale(s, s, [e.scale, e.scale]),
                h.translate(s, s, [t, n]),
                o.applyTransform(s),
                this.api.dispatchAction({
                  type: 'treemapRender',
                  from: this.uid,
                  seriesId: this.seriesModel.id,
                  rootRect: { x: o.x, y: o.y, width: o.width, height: o.height }
                });
            }
          },
          _initEvents: function(e) {
            e.on(
              'click',
              function(e) {
                if ('ready' === this._state) {
                  var t = this.seriesModel.get('nodeClick', !0);
                  if (t) {
                    var n = this.findTarget(e.offsetX, e.offsetY);
                    if (n) {
                      var i = n.node;
                      if (i.getLayout().isLeafRoot) this._rootToNode(n);
                      else if ('zoomToNode' === t) this._zoomToNode(n);
                      else if ('link' === t) {
                        var a = i.hostTree.data.getItemModel(i.dataIndex),
                          o = a.get('link', !0),
                          r = a.get('target', !0) || 'blank';
                        o && window.open(o, r);
                      }
                    }
                  }
                }
              },
              this
            );
          },
          _renderBreadcrumb: function(e, t, n) {
            n ||
              (n =
                null != e.get('leafDepth', !0)
                  ? { node: e.getViewRoot() }
                  : this.findTarget(t.getWidth() / 2, t.getHeight() / 2)) ||
              (n = { node: e.getData().tree.root }),
              (this._breadcrumb || (this._breadcrumb = new l(this.group))).render(
                e,
                t,
                n.node,
                g(function(t) {
                  'animating' !== this._state &&
                    (s.aboveViewRoot(e.getViewRoot(), t)
                      ? this._rootToNode({ node: t })
                      : this._zoomToNode({ node: t }));
                }, this)
              );
          },
          remove: function() {
            this._clearController(),
              this._containerGroup && this._containerGroup.removeAll(),
              (this._storage = { nodeGroup: [], background: [], content: [] }),
              (this._state = 'ready'),
              this._breadcrumb && this._breadcrumb.remove();
          },
          dispose: function() {
            this._clearController();
          },
          _zoomToNode: function(e) {
            this.api.dispatchAction({
              type: 'treemapZoomToNode',
              from: this.uid,
              seriesId: this.seriesModel.id,
              targetNode: e.node
            });
          },
          _rootToNode: function(e) {
            this.api.dispatchAction({
              type: 'treemapRootToNode',
              from: this.uid,
              seriesId: this.seriesModel.id,
              targetNode: e.node
            });
          },
          findTarget: function(e, t) {
            var n;
            return (
              this.seriesModel.getViewRoot().eachNode(
                { attr: 'viewChildren', order: 'preorder' },
                function(i) {
                  var a = this._storage.background[i.getRawIndex()];
                  if (a) {
                    var o = a.transformCoordToLocal(e, t),
                      r = a.shape;
                    if (
                      !(
                        r.x <= o[0] &&
                        o[0] <= r.x + r.width &&
                        r.y <= o[1] &&
                        o[1] <= r.y + r.height
                      )
                    )
                      return !1;
                    n = { node: i, offsetX: o[0], offsetY: o[1] };
                  }
                },
                this
              ),
              n
            );
          }
        });
      function D(e, t, n, i, r, s, l, u, c, h) {
        if (l) {
          var d = l.getLayout();
          if (d && d.isInView) {
            var p = d.width,
              g = d.height,
              v = d.borderWidth,
              S = d.invisible,
              T = l.getRawIndex(),
              D = u && u.getRawIndex(),
              L = l.viewChildren,
              P = d.upperHeight,
              O = L && L.length,
              k = l.getModel('itemStyle'),
              N = l.getModel('emphasis.itemStyle'),
              R = G('nodeGroup', f);
            if (R) {
              if (
                (c.add(R),
                R.attr('position', [d.x || 0, d.y || 0]),
                (R.__tmNodeWidth = p),
                (R.__tmNodeHeight = g),
                d.isAboveViewRoot)
              )
                return R;
              var E = G('background', m, h, w);
              if (
                (E &&
                  (function(t, n, i) {
                    (n.dataIndex = l.dataIndex),
                      (n.seriesIndex = e.seriesIndex),
                      n.setShape({ x: 0, y: 0, width: p, height: g });
                    var a = l.getVisual('borderColor', !0),
                      r = N.get('borderColor');
                    z(n, function() {
                      var e = A(k);
                      e.fill = a;
                      var t = I(N);
                      if (((t.fill = r), i)) {
                        var s = p - 2 * v;
                        B(e, t, a, s, P, { x: v, y: 0, width: s, height: P });
                      } else e.text = t.text = null;
                      n.setStyle(e), o.setHoverStyle(n, t);
                    }),
                      t.add(n);
                  })(R, E, O && d.upperHeight),
                !O)
              ) {
                var V = G('content', m, h, M);
                V &&
                  (function(t, n) {
                    (n.dataIndex = l.dataIndex), (n.seriesIndex = e.seriesIndex);
                    var i = Math.max(p - 2 * v, 0),
                      a = Math.max(g - 2 * v, 0);
                    (n.culling = !0), n.setShape({ x: v, y: v, width: i, height: a });
                    var r = l.getVisual('color', !0);
                    z(n, function() {
                      var e = A(k);
                      e.fill = r;
                      var t = I(N);
                      B(e, t, r, i, a), n.setStyle(e), o.setHoverStyle(n, t);
                    }),
                      t.add(n);
                  })(R, V);
              }
              return R;
            }
          }
        }
        function z(e, t) {
          S ? !e.invisible && s.push(e) : (t(), e.__tmWillVisible || (e.invisible = !1));
        }
        function B(t, n, i, r, s, u) {
          var c = l.getModel(),
            h = a.retrieve(
              e.getFormattedLabel(l.dataIndex, 'normal', null, null, u ? 'upperLabel' : 'label'),
              c.get('name')
            );
          if (!u && d.isLeafRoot) {
            var p = e.get('drillDownIcon', !0);
            h = p ? p + ' ' + h : h;
          }
          var g = c.getModel(u ? _ : y),
            f = c.getModel(u ? b : x),
            m = g.getShallow('show');
          o.setLabelStyle(t, n, g, f, { defaultText: m ? h : null, autoColor: i, isRectText: !0 }),
            u && (t.textRect = a.clone(u)),
            (t.truncate =
              m && g.get('ellipsis') ? { outerWidth: r, outerHeight: s, minChar: 2 } : null);
        }
        function G(e, o, s, u) {
          var c = null != D && n[e][D],
            h = r[e];
          return (
            c
              ? ((n[e][D] = null),
                (function(e, t, n) {
                  (e[T] = {}).old = 'nodeGroup' === n ? t.position.slice() : a.extend({}, t.shape);
                })(h, c, e))
              : S ||
                (((c = new o({ z: C(s, u) })).__tmDepth = s),
                (c.__tmStorageName = e),
                (function(e, t, n) {
                  var a = (e[T] = {}),
                    o = l.parentNode;
                  if (o && (!i || 'drillDown' === i.direction)) {
                    var s = 0,
                      u = 0,
                      c = r.background[o.getRawIndex()];
                    !i && c && c.old && ((s = c.old.width), (u = c.old.height)),
                      (a.old = 'nodeGroup' === n ? [0, u] : { x: s, y: u, width: 0, height: 0 });
                  }
                  a.fadein = 'nodeGroup' !== n;
                })(h, 0, e)),
            (t[e][T] = c)
          );
        }
      }
      function C(e, t) {
        var n = e * S + t;
        return (n - 1) / n;
      }
      e.exports = T;
    },
    function(e, t, n) {
      var i = n(6),
        a = n(25),
        o = n(2),
        r = n(105).wrapTreePathInfo,
        s = 5;
      function l(e) {
        (this.group = new i.Group()), e.add(this.group);
      }
      function u(e, t, n, i, a, o) {
        var r = [
          [a ? e : e - s, t],
          [e + n, t],
          [e + n, t + i],
          [a ? e : e - s, t + i]
        ];
        return !o && r.splice(2, 0, [e + n + s, t + i / 2]), !a && r.push([e, t + i / 2]), r;
      }
      function c(e, t, n) {
        e.eventData = {
          componentType: 'series',
          componentSubType: 'treemap',
          componentIndex: t.componentIndex,
          seriesIndex: t.componentIndex,
          seriesName: t.name,
          seriesType: 'treemap',
          selfType: 'breadcrumb',
          nodeData: { dataIndex: n && n.dataIndex, name: n && n.name },
          treePathInfo: n && r(n, t)
        };
      }
      l.prototype = {
        constructor: l,
        render: function(e, t, n, i) {
          var o = e.getModel('breadcrumb'),
            r = this.group;
          if ((r.removeAll(), o.get('show') && n)) {
            var s = o.getModel('itemStyle'),
              l = s.getModel('textStyle'),
              u = {
                pos: {
                  left: o.get('left'),
                  right: o.get('right'),
                  top: o.get('top'),
                  bottom: o.get('bottom')
                },
                box: { width: t.getWidth(), height: t.getHeight() },
                emptyItemWidth: o.get('emptyItemWidth'),
                totalWidth: 0,
                renderList: []
              };
            this._prepare(n, u, l),
              this._renderContent(e, u, s, l, i),
              a.positionElement(r, u.pos, u.box);
          }
        },
        _prepare: function(e, t, n) {
          for (var i = e; i; i = i.parentNode) {
            var a = i.getModel().get('name'),
              o = n.getTextRect(a),
              r = Math.max(o.width + 16, t.emptyItemWidth);
            (t.totalWidth += r + 8), t.renderList.push({ node: i, text: a, width: r });
          }
        },
        _renderContent: function(e, t, n, r, s) {
          for (
            var l = 0,
              h = t.emptyItemWidth,
              d = e.get('breadcrumb.height'),
              p = a.getAvailableSize(t.pos, t.box),
              g = t.totalWidth,
              f = t.renderList,
              m = f.length - 1;
            m >= 0;
            m--
          ) {
            var v = f[m],
              y = v.node,
              x = v.width,
              _ = v.text;
            g > p.width && ((g -= x - h), (x = h), (_ = null));
            var b = new i.Polygon({
              shape: { points: u(l, 0, x, d, m === f.length - 1, 0 === m) },
              style: o.defaults(n.getItemStyle(), {
                lineJoin: 'bevel',
                text: _,
                textFill: r.getTextColor(),
                textFont: r.getFont()
              }),
              z: 10,
              onclick: o.curry(s, y)
            });
            this.group.add(b), c(b, e, y), (l += x + 8);
          }
        },
        remove: function() {
          this.group.removeAll();
        }
      };
      var h = l;
      e.exports = h;
    },
    function(e, t, n) {
      var i = n(2);
      t.createWrap = function() {
        var e,
          t = [],
          n = {};
        return {
          add: function(e, a, o, r, s) {
            return (
              i.isString(r) && ((s = r), (r = 0)),
              !n[e.id] &&
                ((n[e.id] = 1), t.push({ el: e, target: a, time: o, delay: r, easing: s }), !0)
            );
          },
          done: function(t) {
            return (e = t), this;
          },
          start: function() {
            for (var i = t.length, a = 0, o = t.length; a < o; a++) {
              var r = t[a];
              r.el.animateTo(r.target, r.time, r.delay, r.easing, s);
            }
            return this;
            function s() {
              --i || ((t.length = 0), (n = {}), e && e());
            }
          }
        };
      };
    },
    function(e, t, n) {
      for (
        var i = n(4),
          a = n(105),
          o = function() {},
          r = ['treemapZoomToNode', 'treemapRender', 'treemapMove'],
          s = 0;
        s < r.length;
        s++
      )
        i.registerAction({ type: r[s], update: 'updateView' }, o);
      i.registerAction({ type: 'treemapRootToNode', update: 'updateView' }, function(e, t) {
        t.eachComponent({ mainType: 'series', subType: 'treemap', query: e }, function(t, n) {
          var i = a.retrieveTargetInfo(e, ['treemapZoomToNode', 'treemapRootToNode'], t);
          if (i) {
            var o = t.getViewRoot();
            o && (e.direction = a.aboveViewRoot(o, i.node) ? 'rollUp' : 'drillDown'),
              t.resetViewRoot(i.node);
          }
        });
      });
    },
    function(e, t, n) {
      var i = n(106),
        a = n(70),
        o = n(2),
        r = o.isArray,
        s = 'itemStyle',
        l = {
          seriesType: 'treemap',
          reset: function(e, t, n, r) {
            var l = e.getData().tree,
              c = l.root,
              d = e.getModel(s);
            c.isRemoved() ||
              (function e(t, n, r, l, c, d) {
                var p = t.getModel(),
                  g = t.getLayout();
                if (!g || g.invisible || !g.isInView) return;
                var f,
                  m = t.getModel(s),
                  v = r[t.depth],
                  y = (function(e, t, n, i) {
                    var a = o.extend({}, t);
                    return (
                      o.each(['color', 'colorAlpha', 'colorSaturation'], function(o) {
                        var r = e.get(o, !0);
                        null == r && n && (r = n[o]),
                          null == r && (r = t[o]),
                          null == r && (r = i.get(o)),
                          null != r && (a[o] = r);
                      }),
                      a
                    );
                  })(m, n, v, l),
                  x = m.get('borderColor'),
                  _ = m.get('borderColorSaturation');
                null != _ &&
                  ((f = u(y)),
                  (x = (function(e, t) {
                    return null != t ? a.modifyHSL(t, null, null, e) : null;
                  })(_, f)));
                t.setVisual('borderColor', x);
                var b = t.viewChildren;
                if (b && b.length) {
                  var S = (function(e, t, n, a, o, r) {
                    if (!r || !r.length) return;
                    var s =
                      h(t, 'color') ||
                      (null != o.color &&
                        'none' !== o.color &&
                        (h(t, 'colorAlpha') || h(t, 'colorSaturation')));
                    if (!s) return;
                    var l = t.get('visualMin'),
                      u = t.get('visualMax'),
                      c = n.dataExtent.slice();
                    null != l && l < c[0] && (c[0] = l), null != u && u > c[1] && (c[1] = u);
                    var d = t.get('colorMappingBy'),
                      p = { type: s.name, dataExtent: c, visual: s.range };
                    'color' !== p.type || ('index' !== d && 'id' !== d)
                      ? (p.mappingMethod = 'linear')
                      : ((p.mappingMethod = 'category'), (p.loop = !0));
                    var g = new i(p);
                    return (g.__drColorMappingBy = d), g;
                  })(0, p, g, 0, y, b);
                  o.each(b, function(t, n) {
                    if (t.depth >= c.length || t === c[t.depth]) {
                      var i = (function(e, t, n, i, a, r) {
                        var s = o.extend({}, t);
                        if (a) {
                          var l = a.type,
                            u = 'color' === l && a.__drColorMappingBy,
                            c =
                              'index' === u
                                ? i
                                : 'id' === u
                                ? r.mapIdToIndex(n.getId())
                                : n.getValue(e.get('visualDimension'));
                          s[l] = a.mapValueToVisual(c);
                        }
                        return s;
                      })(p, y, t, n, S, d);
                      e(t, i, r, l, c, d);
                    }
                  });
                } else (f = u(y)), t.setVisual('color', f);
              })(
                c,
                {},
                o.map(l.levelModels, function(e) {
                  return e ? e.get(s) : null;
                }),
                d,
                e.getViewRoot().getAncestors(),
                e
              );
          }
        };
      function u(e) {
        var t = c(e, 'color');
        if (t) {
          var n = c(e, 'colorAlpha'),
            i = c(e, 'colorSaturation');
          return i && (t = a.modifyHSL(t, null, null, i)), n && (t = a.modifyAlpha(t, n)), t;
        }
      }
      function c(e, t) {
        var n = e[t];
        if (null != n && 'none' !== n) return n;
      }
      function h(e, t) {
        var n = e.get(t);
        return r(n) && n.length ? { name: t, range: n } : null;
      }
      e.exports = l;
    },
    function(e, t, n) {
      var i = n(2),
        a = n(29),
        o = n(16),
        r = o.parsePercent,
        s = o.MAX_SAFE_INTEGER,
        l = n(25),
        u = n(105),
        c = Math.max,
        h = Math.min,
        d = i.retrieve,
        p = i.each,
        g = ['itemStyle', 'borderWidth'],
        f = ['itemStyle', 'gapWidth'],
        m = ['upperLabel', 'show'],
        v = ['upperLabel', 'height'],
        y = {
          seriesType: 'treemap',
          reset: function(e, t, n, o) {
            var m = n.getWidth(),
              v = n.getHeight(),
              y = e.option,
              S = l.getLayoutRect(e.getBoxLayoutParams(), {
                width: n.getWidth(),
                height: n.getHeight()
              }),
              w = y.size || [],
              M = r(d(S.width, w[0]), m),
              I = r(d(S.height, w[1]), v),
              A = o && o.type,
              T = u.retrieveTargetInfo(o, ['treemapZoomToNode', 'treemapRootToNode'], e),
              D = 'treemapRender' === A || 'treemapMove' === A ? o.rootRect : null,
              C = e.getViewRoot(),
              L = u.getPathToRoot(C);
            if ('treemapMove' !== A) {
              var P =
                  'treemapZoomToNode' === A
                    ? (function(e, t, n, i, a) {
                        var o,
                          r = (t || {}).node,
                          l = [i, a];
                        if (!r || r === n) return l;
                        var u = i * a,
                          c = u * e.option.zoomToNodeRatio;
                        for (; (o = r.parentNode); ) {
                          for (var h = 0, d = o.children, p = 0, f = d.length; p < f; p++)
                            h += d[p].getValue();
                          var m = r.getValue();
                          if (0 === m) return l;
                          c *= h / m;
                          var v = o.getModel(),
                            y = v.get(g),
                            x = Math.max(y, b(v));
                          (c += 4 * y * y + (3 * y + x) * Math.pow(c, 0.5)) > s && (c = s), (r = o);
                        }
                        c < u && (c = u);
                        var _ = Math.pow(c / u, 0.5);
                        return [i * _, a * _];
                      })(e, T, C, M, I)
                    : D
                    ? [D.width, D.height]
                    : [M, I],
                O = y.sort;
              O && 'asc' !== O && 'desc' !== O && (O = 'desc');
              var k = { squareRatio: y.squareRatio, sort: O, leafDepth: y.leafDepth };
              C.hostTree.clearLayouts();
              var N = { x: 0, y: 0, width: P[0], height: P[1], area: P[0] * P[1] };
              C.setLayout(N),
                (function e(t, n, a, o) {
                  var r, s;
                  if (t.isRemoved()) return;
                  var l = t.getLayout();
                  (r = l.width), (s = l.height);
                  var u = (w = t.getModel()).get(g),
                    d = w.get(f) / 2,
                    m = b(w),
                    v = Math.max(u, m),
                    y = u - d,
                    S = v - d,
                    w = t.getModel();
                  t.setLayout({ borderWidth: u, upperHeight: v, upperLabelHeight: m }, !0),
                    (r = c(r - 2 * y, 0)),
                    (s = c(s - y - S, 0));
                  var M = r * s,
                    I = (function(e, t, n, a, o, r) {
                      var s = e.children || [],
                        l = a.sort;
                      'asc' !== l && 'desc' !== l && (l = null);
                      var u = null != a.leafDepth && a.leafDepth <= r;
                      if (o && !u) return (e.viewChildren = []);
                      !(function(e, t) {
                        t &&
                          e.sort(function(e, n) {
                            var i =
                              'asc' === t
                                ? e.getValue() - n.getValue()
                                : n.getValue() - e.getValue();
                            return 0 === i
                              ? 'asc' === t
                                ? e.dataIndex - n.dataIndex
                                : n.dataIndex - e.dataIndex
                              : i;
                          });
                      })(
                        (s = i.filter(s, function(e) {
                          return !e.isRemoved();
                        })),
                        l
                      );
                      var c = (function(e, t, n) {
                        for (var i = 0, a = 0, o = t.length; a < o; a++) i += t[a].getValue();
                        var r = e.get('visualDimension');
                        if (t && t.length)
                          if ('value' === r && n)
                            (s = [t[t.length - 1].getValue(), t[0].getValue()]),
                              'asc' === n && s.reverse();
                          else {
                            var s = [1 / 0, -1 / 0];
                            p(t, function(e) {
                              var t = e.getValue(r);
                              t < s[0] && (s[0] = t), t > s[1] && (s[1] = t);
                            });
                          }
                        else s = [NaN, NaN];
                        return { sum: i, dataExtent: s };
                      })(t, s, l);
                      if (0 === c.sum) return (e.viewChildren = []);
                      if (
                        ((c.sum = (function(e, t, n, i, a) {
                          if (!i) return n;
                          for (
                            var o = e.get('visibleMin'), r = a.length, s = r, l = r - 1;
                            l >= 0;
                            l--
                          ) {
                            var u = a['asc' === i ? r - l - 1 : l].getValue();
                            (u / n) * t < o && ((s = l), (n -= u));
                          }
                          return 'asc' === i ? a.splice(0, r - s) : a.splice(s, r - s), n;
                        })(t, n, c.sum, l, s)),
                        0 === c.sum)
                      )
                        return (e.viewChildren = []);
                      for (var h = 0, d = s.length; h < d; h++) {
                        var g = (s[h].getValue() / c.sum) * n;
                        s[h].setLayout({ area: g });
                      }
                      u && (s.length && e.setLayout({ isLeafRoot: !0 }, !0), (s.length = 0));
                      return (e.viewChildren = s), e.setLayout({ dataExtent: c.dataExtent }, !0), s;
                    })(t, w, M, n, a, o);
                  if (!I.length) return;
                  var A = { x: y, y: S, width: r, height: s },
                    T = h(r, s),
                    D = 1 / 0,
                    C = [];
                  C.area = 0;
                  for (var L = 0, P = I.length; L < P; ) {
                    var O = I[L];
                    C.push(O), (C.area += O.getLayout().area);
                    var k = x(C, T, n.squareRatio);
                    k <= D
                      ? (L++, (D = k))
                      : ((C.area -= C.pop().getLayout().area),
                        _(C, T, A, d, !1),
                        (T = h(A.width, A.height)),
                        (C.length = C.area = 0),
                        (D = 1 / 0));
                  }
                  C.length && _(C, T, A, d, !0);
                  if (!a) {
                    var N = w.get('childrenVisibleMin');
                    null != N && M < N && (a = !0);
                  }
                  for (L = 0, P = I.length; L < P; L++) e(I[L], n, a, o + 1);
                })(C, k, !1, 0);
              N = C.getLayout();
              p(L, function(e, t) {
                var n = (L[t + 1] || C).getValue();
                e.setLayout(i.extend({ dataExtent: [n, n], borderWidth: 0, upperHeight: 0 }, N));
              });
            }
            var R = e.getData().tree.root;
            R.setLayout(
              (function(e, t, n) {
                if (t) return { x: t.x, y: t.y };
                var i = { x: 0, y: 0 };
                if (!n) return i;
                var a = n.node,
                  o = a.getLayout();
                if (!o) return i;
                var r = [o.width / 2, o.height / 2],
                  s = a;
                for (; s; ) {
                  var l = s.getLayout();
                  (r[0] += l.x), (r[1] += l.y), (s = s.parentNode);
                }
                return { x: e.width / 2 - r[0], y: e.height / 2 - r[1] };
              })(S, D, T),
              !0
            ),
              e.setLayoutInfo(S),
              (function e(t, n, i, o, r) {
                var s = t.getLayout(),
                  l = i[r],
                  u = l && l === t;
                if ((l && !u) || (r === i.length && t !== o)) return;
                t.setLayout(
                  { isInView: !0, invisible: !u && !n.intersect(s), isAboveViewRoot: u },
                  !0
                );
                var c = new a(n.x - s.x, n.y - s.y, n.width, n.height);
                p(t.viewChildren || [], function(t) {
                  e(t, c, i, o, r + 1);
                });
              })(R, new a(-S.x, -S.y, m, v), L, C, 0);
          }
        };
      function x(e, t, n) {
        for (var i, a = 0, o = 1 / 0, r = 0, s = e.length; r < s; r++)
          (i = e[r].getLayout().area) && (i < o && (o = i), i > a && (a = i));
        var l = e.area * e.area,
          u = t * t * n;
        return l ? c((u * a) / l, l / (u * o)) : 1 / 0;
      }
      function _(e, t, n, i, a) {
        var o = t === n.width ? 0 : 1,
          r = 1 - o,
          s = ['x', 'y'],
          l = ['width', 'height'],
          u = n[s[o]],
          d = t ? e.area / t : 0;
        (a || d > n[l[r]]) && (d = n[l[r]]);
        for (var p = 0, g = e.length; p < g; p++) {
          var f = e[p],
            m = {},
            v = d ? f.getLayout().area / d : 0,
            y = (m[l[r]] = c(d - 2 * i, 0)),
            x = n[s[o]] + n[l[o]] - u,
            _ = p === g - 1 || x < v ? x : v,
            b = (m[l[o]] = c(_ - 2 * i, 0));
          (m[s[r]] = n[s[r]] + h(i, y / 2)),
            (m[s[o]] = u + h(i, b / 2)),
            (u += _),
            f.setLayout(m, !0);
        }
        (n[s[r]] += d), (n[l[r]] -= d);
      }
      function b(e) {
        return e.get(m) ? e.get(v) : 0;
      }
      e.exports = y;
    },
    function(e, t, n) {
      var i = n(4);
      n(849), n(851), n(854);
      var a = n(855),
        o = n(103),
        r = n(856),
        s = n(857),
        l = n(858),
        u = n(859),
        c = n(860),
        h = n(862);
      i.registerProcessor(a),
        i.registerVisual(o('graph', 'circle', null)),
        i.registerVisual(r),
        i.registerVisual(s),
        i.registerLayout(l),
        i.registerLayout(i.PRIORITY.VISUAL.POST_CHART_LAYOUT, u),
        i.registerLayout(c),
        i.registerCoordinateSystem('graphView', { create: h });
    },
    function(e, t, n) {
      var i = n(4),
        a = n(53),
        o = n(2),
        r = n(18).defaultEmphasis,
        s = n(36),
        l = n(30).encodeHTML,
        u = n(439),
        c = i.extendSeriesModel({
          type: 'series.graph',
          init: function(e) {
            c.superApply(this, 'init', arguments),
              (this.legendDataProvider = function() {
                return this._categoriesData;
              }),
              this.fillDataTextStyle(e.edges || e.links),
              this._updateCategoriesData();
          },
          mergeOption: function(e) {
            c.superApply(this, 'mergeOption', arguments),
              this.fillDataTextStyle(e.edges || e.links),
              this._updateCategoriesData();
          },
          mergeDefaultAndTheme: function(e) {
            c.superApply(this, 'mergeDefaultAndTheme', arguments), r(e, ['edgeLabel'], ['show']);
          },
          getInitialData: function(e, t) {
            var n = e.edges || e.links || [],
              i = e.data || e.nodes || [],
              a = this;
            if (i && n)
              return u(i, n, this, !0, function(e, n) {
                e.wrapMethod('getItemModel', function(e) {
                  var t = a._categoriesModels[e.getShallow('category')];
                  return t && ((t.parentModel = e.parentModel), (e.parentModel = t)), e;
                });
                var i = a.getModel('edgeLabel'),
                  o = new s({ label: i.option }, i.parentModel, t),
                  r = a.getModel('emphasis.edgeLabel'),
                  l = new s({ emphasis: { label: r.option } }, r.parentModel, t);
                function u(e) {
                  return (e = this.parsePath(e)) && 'label' === e[0]
                    ? o
                    : e && 'emphasis' === e[0] && 'label' === e[1]
                    ? l
                    : this.parentModel;
                }
                n.wrapMethod('getItemModel', function(e) {
                  return e.customizeGetParent(u), e;
                });
              }).data;
          },
          getGraph: function() {
            return this.getData().graph;
          },
          getEdgeData: function() {
            return this.getGraph().edgeData;
          },
          getCategoriesData: function() {
            return this._categoriesData;
          },
          formatTooltip: function(e, t, n) {
            if ('edge' === n) {
              var i = this.getData(),
                a = this.getDataParams(e, n),
                o = i.graph.getEdgeByIndex(e),
                r = i.getName(o.node1.dataIndex),
                s = i.getName(o.node2.dataIndex),
                u = [];
              return (
                null != r && u.push(r),
                null != s && u.push(s),
                (u = l(u.join(' > '))),
                a.value && (u += ' : ' + l(a.value)),
                u
              );
            }
            return c.superApply(this, 'formatTooltip', arguments);
          },
          _updateCategoriesData: function() {
            var e = o.map(this.option.categories || [], function(e) {
                return null != e.value ? e : o.extend({ value: 0 }, e);
              }),
              t = new a(['value'], this);
            t.initData(e),
              (this._categoriesData = t),
              (this._categoriesModels = t.mapArray(function(e) {
                return t.getItemModel(e, !0);
              }));
          },
          setZoom: function(e) {
            this.option.zoom = e;
          },
          setCenter: function(e) {
            this.option.center = e;
          },
          isAnimationEnabled: function() {
            return (
              c.superCall(this, 'isAnimationEnabled') &&
              !('force' === this.get('layout') && this.get('force.layoutAnimation'))
            );
          },
          defaultOption: {
            zlevel: 0,
            z: 2,
            coordinateSystem: 'view',
            legendHoverLink: !0,
            hoverAnimation: !0,
            layout: null,
            focusNodeAdjacency: !1,
            circular: { rotateLabel: !1 },
            force: {
              initLayout: null,
              repulsion: [0, 50],
              gravity: 0.1,
              friction: 0.6,
              edgeLength: 30,
              layoutAnimation: !0
            },
            left: 'center',
            top: 'center',
            symbol: 'circle',
            symbolSize: 10,
            edgeSymbol: ['none', 'none'],
            edgeSymbolSize: 10,
            edgeLabel: { position: 'middle' },
            draggable: !1,
            roam: !1,
            center: null,
            zoom: 1,
            nodeScaleRatio: 0.6,
            label: { show: !1, formatter: '{b}' },
            itemStyle: {},
            lineStyle: { color: '#aaa', width: 1, curveness: 0, opacity: 0.5 },
            emphasis: { label: { show: !0 } }
          }
        }),
        h = c;
      e.exports = h;
    },
    function(e, t, n) {
      n(23).__DEV__;
      var i = n(2),
        a = n(78).enableClassCheck;
      function o(e) {
        return '_EC_' + e;
      }
      var r = function(e) {
          (this._directed = e || !1),
            (this.nodes = []),
            (this.edges = []),
            (this._nodesMap = {}),
            (this._edgesMap = {}),
            this.data,
            this.edgeData;
        },
        s = r.prototype;
      function l(e, t) {
        (this.id = null == e ? '' : e),
          (this.inEdges = []),
          (this.outEdges = []),
          (this.edges = []),
          this.hostGraph,
          (this.dataIndex = null == t ? -1 : t);
      }
      function u(e, t, n) {
        (this.node1 = e), (this.node2 = t), (this.dataIndex = null == n ? -1 : n);
      }
      (s.type = 'graph'),
        (s.isDirected = function() {
          return this._directed;
        }),
        (s.addNode = function(e, t) {
          e = null == e ? '' + t : '' + e;
          var n = this._nodesMap;
          if (!n[o(e)]) {
            var i = new l(e, t);
            return (i.hostGraph = this), this.nodes.push(i), (n[o(e)] = i), i;
          }
        }),
        (s.getNodeByIndex = function(e) {
          var t = this.data.getRawIndex(e);
          return this.nodes[t];
        }),
        (s.getNodeById = function(e) {
          return this._nodesMap[o(e)];
        }),
        (s.addEdge = function(e, t, n) {
          var i = this._nodesMap,
            a = this._edgesMap;
          if (
            ('number' === typeof e && (e = this.nodes[e]),
            'number' === typeof t && (t = this.nodes[t]),
            l.isInstance(e) || (e = i[o(e)]),
            l.isInstance(t) || (t = i[o(t)]),
            e && t)
          ) {
            var r = e.id + '-' + t.id;
            if (!a[r]) {
              var s = new u(e, t, n);
              return (
                (s.hostGraph = this),
                this._directed && (e.outEdges.push(s), t.inEdges.push(s)),
                e.edges.push(s),
                e !== t && t.edges.push(s),
                this.edges.push(s),
                (a[r] = s),
                s
              );
            }
          }
        }),
        (s.getEdgeByIndex = function(e) {
          var t = this.edgeData.getRawIndex(e);
          return this.edges[t];
        }),
        (s.getEdge = function(e, t) {
          l.isInstance(e) && (e = e.id), l.isInstance(t) && (t = t.id);
          var n = this._edgesMap;
          return this._directed ? n[e + '-' + t] : n[e + '-' + t] || n[t + '-' + e];
        }),
        (s.eachNode = function(e, t) {
          for (var n = this.nodes, i = n.length, a = 0; a < i; a++)
            n[a].dataIndex >= 0 && e.call(t, n[a], a);
        }),
        (s.eachEdge = function(e, t) {
          for (var n = this.edges, i = n.length, a = 0; a < i; a++)
            n[a].dataIndex >= 0 &&
              n[a].node1.dataIndex >= 0 &&
              n[a].node2.dataIndex >= 0 &&
              e.call(t, n[a], a);
        }),
        (s.breadthFirstTraverse = function(e, t, n, i) {
          if ((l.isInstance(t) || (t = this._nodesMap[o(t)]), t)) {
            for (
              var a = 'out' === n ? 'outEdges' : 'in' === n ? 'inEdges' : 'edges', r = 0;
              r < this.nodes.length;
              r++
            )
              this.nodes[r].__visited = !1;
            if (!e.call(i, t, null))
              for (var s = [t]; s.length; ) {
                var u = s.shift(),
                  c = u[a];
                for (r = 0; r < c.length; r++) {
                  var h = c[r],
                    d = h.node1 === u ? h.node2 : h.node1;
                  if (!d.__visited) {
                    if (e.call(i, d, u)) return;
                    s.push(d), (d.__visited = !0);
                  }
                }
              }
          }
        }),
        (s.update = function() {
          for (
            var e = this.data,
              t = this.edgeData,
              n = this.nodes,
              i = this.edges,
              a = 0,
              o = n.length;
            a < o;
            a++
          )
            n[a].dataIndex = -1;
          for (a = 0, o = e.count(); a < o; a++) n[e.getRawIndex(a)].dataIndex = a;
          t.filterSelf(function(e) {
            var n = i[t.getRawIndex(e)];
            return n.node1.dataIndex >= 0 && n.node2.dataIndex >= 0;
          });
          for (a = 0, o = i.length; a < o; a++) i[a].dataIndex = -1;
          for (a = 0, o = t.count(); a < o; a++) i[t.getRawIndex(a)].dataIndex = a;
        }),
        (s.clone = function() {
          for (
            var e = new r(this._directed), t = this.nodes, n = this.edges, i = 0;
            i < t.length;
            i++
          )
            e.addNode(t[i].id, t[i].dataIndex);
          for (i = 0; i < n.length; i++) {
            var a = n[i];
            e.addEdge(a.node1.id, a.node2.id, a.dataIndex);
          }
          return e;
        }),
        (l.prototype = {
          constructor: l,
          degree: function() {
            return this.edges.length;
          },
          inDegree: function() {
            return this.inEdges.length;
          },
          outDegree: function() {
            return this.outEdges.length;
          },
          getModel: function(e) {
            if (!(this.dataIndex < 0))
              return this.hostGraph.data.getItemModel(this.dataIndex).getModel(e);
          }
        }),
        (u.prototype.getModel = function(e) {
          if (!(this.dataIndex < 0))
            return this.hostGraph.edgeData.getItemModel(this.dataIndex).getModel(e);
        });
      var c = function(e, t) {
        return {
          getValue: function(n) {
            var i = this[e][t];
            return i.get(i.getDimension(n || 'value'), this.dataIndex);
          },
          setVisual: function(n, i) {
            this.dataIndex >= 0 && this[e][t].setItemVisual(this.dataIndex, n, i);
          },
          getVisual: function(n, i) {
            return this[e][t].getItemVisual(this.dataIndex, n, i);
          },
          setLayout: function(n, i) {
            this.dataIndex >= 0 && this[e][t].setItemLayout(this.dataIndex, n, i);
          },
          getLayout: function() {
            return this[e][t].getItemLayout(this.dataIndex);
          },
          getGraphicEl: function() {
            return this[e][t].getItemGraphicEl(this.dataIndex);
          },
          getRawIndex: function() {
            return this[e][t].getRawIndex(this.dataIndex);
          }
        };
      };
      i.mixin(l, c('hostGraph', 'data')),
        i.mixin(u, c('hostGraph', 'edgeData')),
        (r.Node = l),
        (r.Edge = u),
        a(l),
        a(u);
      var h = r;
      e.exports = h;
    },
    function(e, t, n) {
      var i = n(4),
        a = n(2),
        o = n(153),
        r = n(303),
        s = n(158),
        l = n(298),
        u = n(206).onIrrelevantElement,
        c = n(6),
        h = n(853),
        d = n(305).getNodeGlobalScale,
        p = '__focusNodeAdjacency',
        g = ['itemStyle', 'opacity'],
        f = ['lineStyle', 'opacity'];
      function m(e, t) {
        var n = e.getVisual('opacity');
        return null != n ? n : e.getModel().get(t);
      }
      function v(e, t, n) {
        var i = e.getGraphicEl(),
          a = m(e, t);
        null != n && (null == a && (a = 1), (a *= n)),
          i.downplay && i.downplay(),
          i.traverse(function(e) {
            if (!e.isGroup) {
              var t = e.lineLabelOriginalOpacity;
              (null != t && null == n) || (t = a), e.setStyle('opacity', t);
            }
          });
      }
      function y(e, t) {
        var n = m(e, t),
          i = e.getGraphicEl();
        i.traverse(function(e) {
          !e.isGroup && e.setStyle('opacity', n);
        }),
          i.highlight && i.highlight();
      }
      var x = i.extendChartView({
        type: 'graph',
        init: function(e, t) {
          var n = new o(),
            i = new r(),
            a = this.group;
          (this._controller = new s(t.getZr())),
            (this._controllerHost = { target: a }),
            a.add(n.group),
            a.add(i.group),
            (this._symbolDraw = n),
            (this._lineDraw = i),
            (this._firstRender = !0);
        },
        render: function(e, t, n) {
          var i = e.coordinateSystem;
          this._model = e;
          var a = this._symbolDraw,
            o = this._lineDraw,
            r = this.group;
          if ('view' === i.type) {
            var s = { position: i.position, scale: i.scale };
            this._firstRender ? r.attr(s) : c.updateProps(r, s, e);
          }
          h(e.getGraph(), d(e));
          var l = e.getData();
          a.updateData(l);
          var u = e.getEdgeData();
          o.updateData(u),
            this._updateNodeAndLinkScale(),
            this._updateController(e, t, n),
            clearTimeout(this._layoutTimeout);
          var g = e.forceLayout,
            f = e.get('force.layoutAnimation');
          g && this._startForceLayoutIteration(g, f),
            l.eachItemGraphicEl(function(t, i) {
              var a = l.getItemModel(i);
              t.off('drag').off('dragend');
              var o = a.get('draggable');
              o &&
                t
                  .on(
                    'drag',
                    function() {
                      g &&
                        (g.warmUp(),
                        !this._layouting && this._startForceLayoutIteration(g, f),
                        g.setFixed(i),
                        l.setItemLayout(i, t.position));
                    },
                    this
                  )
                  .on(
                    'dragend',
                    function() {
                      g && g.setUnfixed(i);
                    },
                    this
                  ),
                t.setDraggable(o && g),
                t[p] && t.off('mouseover', t[p]),
                t.__unfocusNodeAdjacency && t.off('mouseout', t.__unfocusNodeAdjacency),
                a.get('focusNodeAdjacency') &&
                  (t.on(
                    'mouseover',
                    (t[p] = function() {
                      n.dispatchAction({
                        type: 'focusNodeAdjacency',
                        seriesId: e.id,
                        dataIndex: t.dataIndex
                      });
                    })
                  ),
                  t.on(
                    'mouseout',
                    (t.__unfocusNodeAdjacency = function() {
                      n.dispatchAction({ type: 'unfocusNodeAdjacency', seriesId: e.id });
                    })
                  ));
            }, this),
            l.graph.eachEdge(function(t) {
              var i = t.getGraphicEl();
              i[p] && i.off('mouseover', i[p]),
                i.__unfocusNodeAdjacency && i.off('mouseout', i.__unfocusNodeAdjacency),
                t.getModel().get('focusNodeAdjacency') &&
                  (i.on(
                    'mouseover',
                    (i[p] = function() {
                      n.dispatchAction({
                        type: 'focusNodeAdjacency',
                        seriesId: e.id,
                        edgeDataIndex: t.dataIndex
                      });
                    })
                  ),
                  i.on(
                    'mouseout',
                    (i.__unfocusNodeAdjacency = function() {
                      n.dispatchAction({ type: 'unfocusNodeAdjacency', seriesId: e.id });
                    })
                  ));
            });
          var m = 'circular' === e.get('layout') && e.get('circular.rotateLabel'),
            v = l.getLayout('cx'),
            y = l.getLayout('cy');
          l.eachItemGraphicEl(function(e, t) {
            var n = l.getItemModel(t).get('label.rotate') || 0,
              i = e.getSymbolPath();
            if (m) {
              var a = l.getItemLayout(t),
                o = Math.atan2(a[1] - y, a[0] - v);
              o < 0 && (o = 2 * Math.PI + o);
              var r = a[0] < v;
              r && (o -= Math.PI);
              var s = r ? 'left' : 'right';
              c.modifyLabelStyle(
                i,
                { textRotation: -o, textPosition: s, textOrigin: 'center' },
                { textPosition: s }
              );
            } else c.modifyLabelStyle(i, { textRotation: (n *= Math.PI / 180) });
          }),
            (this._firstRender = !1);
        },
        dispose: function() {
          this._controller && this._controller.dispose(), (this._controllerHost = {});
        },
        focusNodeAdjacency: function(e, t, n, i) {
          var o = this._model.getData().graph,
            r = i.dataIndex,
            s = i.edgeDataIndex,
            l = o.getNodeByIndex(r),
            u = o.getEdgeByIndex(s);
          (l || u) &&
            (o.eachNode(function(e) {
              v(e, g, 0.1);
            }),
            o.eachEdge(function(e) {
              v(e, f, 0.1);
            }),
            l &&
              (y(l, g),
              a.each(l.edges, function(e) {
                e.dataIndex < 0 || (y(e, f), y(e.node1, g), y(e.node2, g));
              })),
            u && (y(u, f), y(u.node1, g), y(u.node2, g)));
        },
        unfocusNodeAdjacency: function(e, t, n, i) {
          var a = this._model.getData().graph;
          a.eachNode(function(e) {
            v(e, g);
          }),
            a.eachEdge(function(e) {
              v(e, f);
            });
        },
        _startForceLayoutIteration: function(e, t) {
          var n = this;
          !(function i() {
            e.step(function(e) {
              n.updateLayout(n._model),
                (n._layouting = !e) && (t ? (n._layoutTimeout = setTimeout(i, 16)) : i());
            });
          })();
        },
        _updateController: function(e, t, n) {
          var i = this._controller,
            a = this._controllerHost,
            o = this.group;
          i.setPointerChecker(function(t, i, a) {
            var r = o.getBoundingRect();
            return r.applyTransform(o.transform), r.contain(i, a) && !u(t, n, e);
          }),
            'view' === e.coordinateSystem.type
              ? (i.enable(e.get('roam')),
                (a.zoomLimit = e.get('scaleLimit')),
                (a.zoom = e.coordinateSystem.getZoom()),
                i
                  .off('pan')
                  .off('zoom')
                  .on('pan', function(t) {
                    l.updateViewOnPan(a, t.dx, t.dy),
                      n.dispatchAction({ seriesId: e.id, type: 'graphRoam', dx: t.dx, dy: t.dy });
                  })
                  .on(
                    'zoom',
                    function(t) {
                      l.updateViewOnZoom(a, t.scale, t.originX, t.originY),
                        n.dispatchAction({
                          seriesId: e.id,
                          type: 'graphRoam',
                          zoom: t.scale,
                          originX: t.originX,
                          originY: t.originY
                        }),
                        this._updateNodeAndLinkScale(),
                        h(e.getGraph(), d(e)),
                        this._lineDraw.updateLayout();
                    },
                    this
                  ))
              : i.disable();
        },
        _updateNodeAndLinkScale: function() {
          var e = this._model,
            t = e.getData(),
            n = d(e),
            i = [n, n];
          t.eachItemGraphicEl(function(e, t) {
            e.attr('scale', i);
          });
        },
        updateLayout: function(e) {
          h(e.getGraph(), d(e)), this._symbolDraw.updateLayout(), this._lineDraw.updateLayout();
        },
        remove: function(e, t) {
          this._symbolDraw && this._symbolDraw.remove(), this._lineDraw && this._lineDraw.remove();
        }
      });
      e.exports = x;
    },
    function(e, t, n) {
      var i = n(6),
        a = n(28),
        o = i.Line.prototype,
        r = i.BezierCurve.prototype;
      function s(e) {
        return isNaN(+e.cpx1) || isNaN(+e.cpy1);
      }
      var l = i.extendShape({
        type: 'ec-line',
        style: { stroke: '#000', fill: null },
        shape: { x1: 0, y1: 0, x2: 0, y2: 0, percent: 1, cpx1: null, cpy1: null },
        buildPath: function(e, t) {
          this[s(t) ? '_buildPathLine' : '_buildPathCurve'](e, t);
        },
        _buildPathLine: o.buildPath,
        _buildPathCurve: r.buildPath,
        pointAt: function(e) {
          return this[s(this.shape) ? '_pointAtLine' : '_pointAtCurve'](e);
        },
        _pointAtLine: o.pointAt,
        _pointAtCurve: r.pointAt,
        tangentAt: function(e) {
          var t = this.shape,
            n = s(t) ? [t.x2 - t.x1, t.y2 - t.y1] : this._tangentAtCurve(e);
          return a.normalize(n, n);
        },
        _tangentAtCurve: r.tangentAt
      });
      e.exports = l;
    },
    function(e, t, n) {
      var i = n(84),
        a = n(28),
        o = n(305).getSymbolSize,
        r = [],
        s = [],
        l = [],
        u = i.quadraticAt,
        c = a.distSquare,
        h = Math.abs;
      function d(e, t, n) {
        for (
          var i, a = e[0], o = e[1], d = e[2], p = 1 / 0, g = n * n, f = 0.1, m = 0.1;
          m <= 0.9;
          m += 0.1
        ) {
          (r[0] = u(a[0], o[0], d[0], m)),
            (r[1] = u(a[1], o[1], d[1], m)),
            (x = h(c(r, t) - g)) < p && ((p = x), (i = m));
        }
        for (var v = 0; v < 32; v++) {
          var y = i + f;
          (s[0] = u(a[0], o[0], d[0], i)),
            (s[1] = u(a[1], o[1], d[1], i)),
            (l[0] = u(a[0], o[0], d[0], y)),
            (l[1] = u(a[1], o[1], d[1], y));
          var x = c(s, t) - g;
          if (h(x) < 0.01) break;
          var _ = c(l, t) - g;
          (f /= 2), x < 0 ? (_ >= 0 ? (i += f) : (i -= f)) : _ >= 0 ? (i -= f) : (i += f);
        }
        return i;
      }
      e.exports = function(e, t) {
        var n = [],
          r = i.quadraticSubdivide,
          s = [[], [], []],
          l = [[], []],
          u = [];
        (t /= 2),
          e.eachEdge(function(e, i) {
            var c = e.getLayout(),
              h = e.getVisual('fromSymbol'),
              p = e.getVisual('toSymbol');
            c.__original ||
              ((c.__original = [a.clone(c[0]), a.clone(c[1])]),
              c[2] && c.__original.push(a.clone(c[2])));
            var g = c.__original;
            if (null != c[2]) {
              if ((a.copy(s[0], g[0]), a.copy(s[1], g[2]), a.copy(s[2], g[1]), h && 'none' !== h)) {
                var f = o(e.node1),
                  m = d(s, g[0], f * t);
                r(s[0][0], s[1][0], s[2][0], m, n),
                  (s[0][0] = n[3]),
                  (s[1][0] = n[4]),
                  r(s[0][1], s[1][1], s[2][1], m, n),
                  (s[0][1] = n[3]),
                  (s[1][1] = n[4]);
              }
              if (p && 'none' !== p) {
                (f = o(e.node2)), (m = d(s, g[1], f * t));
                r(s[0][0], s[1][0], s[2][0], m, n),
                  (s[1][0] = n[1]),
                  (s[2][0] = n[2]),
                  r(s[0][1], s[1][1], s[2][1], m, n),
                  (s[1][1] = n[1]),
                  (s[2][1] = n[2]);
              }
              a.copy(c[0], s[0]), a.copy(c[1], s[2]), a.copy(c[2], s[1]);
            } else {
              if (
                (a.copy(l[0], g[0]),
                a.copy(l[1], g[1]),
                a.sub(u, l[1], l[0]),
                a.normalize(u, u),
                h && 'none' !== h)
              ) {
                f = o(e.node1);
                a.scaleAndAdd(l[0], l[0], u, f * t);
              }
              if (p && 'none' !== p) {
                f = o(e.node2);
                a.scaleAndAdd(l[1], l[1], u, -f * t);
              }
              a.copy(c[0], l[0]), a.copy(c[1], l[1]);
            }
          });
      };
    },
    function(e, t, n) {
      var i = n(4),
        a = n(299).updateCenterAndZoom;
      n(440);
      i.registerAction({ type: 'graphRoam', event: 'graphRoam', update: 'none' }, function(e, t) {
        t.eachComponent({ mainType: 'series', query: e }, function(t) {
          var n = t.coordinateSystem,
            i = a(n, e);
          t.setCenter && t.setCenter(i.center), t.setZoom && t.setZoom(i.zoom);
        });
      });
    },
    function(e, t) {
      e.exports = function(e) {
        var t = e.findComponents({ mainType: 'legend' });
        t &&
          t.length &&
          e.eachSeriesByType(
            'graph',
            function(e) {
              var n = e.getCategoriesData(),
                i = e.getGraph().data,
                a = n.mapArray(n.getName);
              i.filterSelf(function(e) {
                var n = i.getItemModel(e).getShallow('category');
                if (null != n) {
                  'number' === typeof n && (n = a[n]);
                  for (var o = 0; o < t.length; o++) if (!t[o].isSelected(n)) return !1;
                }
                return !0;
              });
            },
            this
          );
      };
    },
    function(e, t) {
      e.exports = function(e) {
        var t = {};
        e.eachSeriesByType('graph', function(e) {
          var n = e.getCategoriesData(),
            i = e.getData(),
            a = {};
          n.each(function(i) {
            var o = n.getName(i);
            a['ec-' + o] = i;
            var r = n.getItemModel(i),
              s = r.get('itemStyle.color') || e.getColorFromPalette(o, t);
            n.setItemVisual(i, 'color', s);
            for (
              var l = ['opacity', 'symbol', 'symbolSize', 'symbolKeepAspect'], u = 0;
              u < l.length;
              u++
            ) {
              var c = r.getShallow(l[u], !0);
              null != c && n.setItemVisual(i, l[u], c);
            }
          }),
            n.count() &&
              i.each(function(e) {
                var t = i.getItemModel(e).getShallow('category');
                if (null != t) {
                  'string' === typeof t && (t = a['ec-' + t]);
                  for (
                    var o = ['color', 'opacity', 'symbol', 'symbolSize', 'symbolKeepAspect'], r = 0;
                    r < o.length;
                    r++
                  )
                    null == i.getItemVisual(e, o[r], !0) &&
                      i.setItemVisual(e, o[r], n.getItemVisual(t, o[r]));
                }
              });
        });
      };
    },
    function(e, t) {
      function n(e) {
        return e instanceof Array || (e = [e, e]), e;
      }
      e.exports = function(e) {
        e.eachSeriesByType('graph', function(e) {
          var t = e.getGraph(),
            i = e.getEdgeData(),
            a = n(e.get('edgeSymbol')),
            o = n(e.get('edgeSymbolSize')),
            r = 'lineStyle.color'.split('.'),
            s = 'lineStyle.opacity'.split('.');
          i.setVisual('fromSymbol', a && a[0]),
            i.setVisual('toSymbol', a && a[1]),
            i.setVisual('fromSymbolSize', o && o[0]),
            i.setVisual('toSymbolSize', o && o[1]),
            i.setVisual('color', e.get(r)),
            i.setVisual('opacity', e.get(s)),
            i.each(function(e) {
              var a = i.getItemModel(e),
                o = t.getEdgeByIndex(e),
                l = n(a.getShallow('symbol', !0)),
                u = n(a.getShallow('symbolSize', !0)),
                c = a.get(r),
                h = a.get(s);
              switch (c) {
                case 'source':
                  c = o.node1.getVisual('color');
                  break;
                case 'target':
                  c = o.node2.getVisual('color');
              }
              l[0] && o.setVisual('fromSymbol', l[0]),
                l[1] && o.setVisual('toSymbol', l[1]),
                u[0] && o.setVisual('fromSymbolSize', u[0]),
                u[1] && o.setVisual('toSymbolSize', u[1]),
                o.setVisual('color', c),
                o.setVisual('opacity', h);
            });
        });
      };
    },
    function(e, t, n) {
      var i = n(2).each,
        a = n(441),
        o = a.simpleLayout,
        r = a.simpleLayoutEdge;
      e.exports = function(e, t) {
        e.eachSeriesByType('graph', function(e) {
          var t = e.get('layout'),
            n = e.coordinateSystem;
          if (n && 'view' !== n.type) {
            var a = e.getData(),
              s = [];
            i(n.dimensions, function(e) {
              s = s.concat(a.mapDimension(e, !0));
            });
            for (var l = 0; l < a.count(); l++) {
              for (var u = [], c = !1, h = 0; h < s.length; h++) {
                var d = a.get(s[h], l);
                isNaN(d) || (c = !0), u.push(d);
              }
              c ? a.setItemLayout(l, n.dataToPoint(u)) : a.setItemLayout(l, [NaN, NaN]);
            }
            r(a.graph);
          } else (t && 'none' !== t) || o(e);
        });
      };
    },
    function(e, t, n) {
      var i = n(442).circularLayout;
      e.exports = function(e) {
        e.eachSeriesByType('graph', function(e) {
          'circular' === e.get('layout') && i(e, 'symbolSize');
        });
      };
    },
    function(e, t, n) {
      var i = n(861).forceLayout,
        a = n(441).simpleLayout,
        o = n(442).circularLayout,
        r = n(16).linearMap,
        s = n(28),
        l = n(2);
      e.exports = function(e) {
        e.eachSeriesByType('graph', function(e) {
          if (!(v = e.coordinateSystem) || 'view' === v.type)
            if ('force' === e.get('layout')) {
              var t = e.preservedPoints || {},
                n = e.getGraph(),
                u = n.data,
                c = n.edgeData,
                h = e.getModel('force'),
                d = h.get('initLayout');
              e.preservedPoints
                ? u.each(function(e) {
                    var n = u.getId(e);
                    u.setItemLayout(e, t[n] || [NaN, NaN]);
                  })
                : d && 'none' !== d
                ? 'circular' === d && o(e, 'value')
                : a(e);
              var p = u.getDataExtent('value'),
                g = c.getDataExtent('value'),
                f = h.get('repulsion'),
                m = h.get('edgeLength');
              l.isArray(f) || (f = [f, f]), l.isArray(m) || (m = [m, m]), (m = [m[1], m[0]]);
              var v,
                y = u.mapArray('value', function(e, t) {
                  var n = u.getItemLayout(t),
                    i = r(e, p, f);
                  return (
                    isNaN(i) && (i = (f[0] + f[1]) / 2),
                    {
                      w: i,
                      rep: i,
                      fixed: u.getItemModel(t).get('fixed'),
                      p: !n || isNaN(n[0]) || isNaN(n[1]) ? null : n
                    }
                  );
                }),
                x = c.mapArray('value', function(e, t) {
                  var i = n.getEdgeByIndex(t),
                    a = r(e, g, m);
                  isNaN(a) && (a = (m[0] + m[1]) / 2);
                  var o = i.getModel();
                  return {
                    n1: y[i.node1.dataIndex],
                    n2: y[i.node2.dataIndex],
                    d: a,
                    curveness: o.get('lineStyle.curveness') || 0,
                    ignoreForceLayout: o.get('ignoreForceLayout')
                  };
                }),
                _ = (v = e.coordinateSystem).getBoundingRect(),
                b = i(y, x, { rect: _, gravity: h.get('gravity'), friction: h.get('friction') }),
                S = b.step;
              (b.step = function(e) {
                for (var i = 0, a = y.length; i < a; i++)
                  y[i].fixed && s.copy(y[i].p, n.getNodeByIndex(i).getLayout());
                S(function(i, a, o) {
                  for (var r = 0, l = i.length; r < l; r++)
                    i[r].fixed || n.getNodeByIndex(r).setLayout(i[r].p), (t[u.getId(r)] = i[r].p);
                  for (r = 0, l = a.length; r < l; r++) {
                    var c = a[r],
                      h = n.getEdgeByIndex(r),
                      d = c.n1.p,
                      p = c.n2.p,
                      g = h.getLayout();
                    ((g = g ? g.slice() : [])[0] = g[0] || []),
                      (g[1] = g[1] || []),
                      s.copy(g[0], d),
                      s.copy(g[1], p),
                      +c.curveness &&
                        (g[2] = [
                          (d[0] + p[0]) / 2 - (d[1] - p[1]) * c.curveness,
                          (d[1] + p[1]) / 2 - (p[0] - d[0]) * c.curveness
                        ]),
                      h.setLayout(g);
                  }
                  e && e(o);
                });
              }),
                (e.forceLayout = b),
                (e.preservedPoints = t),
                b.step();
            } else e.forceLayout = null;
        });
      };
    },
    function(e, t, n) {
      var i = n(28),
        a = i.scaleAndAdd;
      t.forceLayout = function(e, t, n) {
        for (
          var o = n.rect,
            r = o.width,
            s = o.height,
            l = [o.x + r / 2, o.y + s / 2],
            u = null == n.gravity ? 0.1 : n.gravity,
            c = 0;
          c < e.length;
          c++
        ) {
          var h = e[c];
          h.p ||
            (h.p = i.create(r * (Math.random() - 0.5) + l[0], s * (Math.random() - 0.5) + l[1])),
            (h.pp = i.clone(h.p)),
            (h.edges = null);
        }
        var d = null == n.friction ? 0.6 : n.friction,
          p = d;
        return {
          warmUp: function() {
            p = 0.8 * d;
          },
          setFixed: function(t) {
            e[t].fixed = !0;
          },
          setUnfixed: function(t) {
            e[t].fixed = !1;
          },
          step: function(n) {
            for (var o = [], r = e.length, s = 0; s < t.length; s++) {
              var c = t[s];
              if (!c.ignoreForceLayout) {
                var h = c.n1,
                  d = c.n2;
                i.sub(o, d.p, h.p);
                var g = i.len(o) - c.d,
                  f = d.w / (h.w + d.w);
                isNaN(f) && (f = 0),
                  i.normalize(o, o),
                  !h.fixed && a(h.p, h.p, o, f * g * p),
                  !d.fixed && a(d.p, d.p, o, -(1 - f) * g * p);
              }
            }
            for (s = 0; s < r; s++) {
              (x = e[s]).fixed || (i.sub(o, l, x.p), a(x.p, x.p, o, u * p));
            }
            for (s = 0; s < r; s++) {
              h = e[s];
              for (var m = s + 1; m < r; m++) {
                d = e[m];
                i.sub(o, d.p, h.p),
                  0 === (g = i.len(o)) &&
                    (i.set(o, Math.random() - 0.5, Math.random() - 0.5), (g = 1));
                var v = (h.rep + d.rep) / g / g;
                !h.fixed && a(h.pp, h.pp, o, v), !d.fixed && a(d.pp, d.pp, o, -v);
              }
            }
            var y = [];
            for (s = 0; s < r; s++) {
              var x;
              (x = e[s]).fixed || (i.sub(y, x.p, x.pp), a(x.p, x.p, y, p), i.copy(x.pp, x.p));
            }
            (p *= 0.992), n && n(e, t, p < 0.01);
          }
        };
      };
    },
    function(e, t, n) {
      var i = n(301),
        a = n(25).getLayoutRect,
        o = n(194);
      e.exports = function(e, t) {
        var n = [];
        return (
          e.eachSeriesByType('graph', function(e) {
            var r = e.get('coordinateSystem');
            if (!r || 'view' === r) {
              var s = e.getData(),
                l = s.mapArray(function(e) {
                  var t = s.getItemModel(e);
                  return [+t.get('x'), +t.get('y')];
                }),
                u = [],
                c = [];
              o.fromPoints(l, u, c),
                c[0] - u[0] === 0 && ((c[0] += 1), (u[0] -= 1)),
                c[1] - u[1] === 0 && ((c[1] += 1), (u[1] -= 1));
              var h = (c[0] - u[0]) / (c[1] - u[1]),
                d = (function(e, t, n) {
                  var i = e.getBoxLayoutParams();
                  return (i.aspect = n), a(i, { width: t.getWidth(), height: t.getHeight() });
                })(e, t, h);
              isNaN(h) && ((u = [d.x, d.y]), (c = [d.x + d.width, d.y + d.height]));
              var p = c[0] - u[0],
                g = c[1] - u[1],
                f = d.width,
                m = d.height,
                v = (e.coordinateSystem = new i());
              (v.zoomLimit = e.get('scaleLimit')),
                v.setBoundingRect(u[0], u[1], p, g),
                v.setViewRect(d.x, d.y, f, m),
                v.setCenter(e.get('center')),
                v.setZoom(e.get('zoom')),
                n.push(v);
            }
          }),
          n
        );
      };
    },
    function(e, t, n) {
      n(864), n(865);
    },
    function(e, t, n) {
      var i = n(125),
        a = n(38),
        o =
          (n(2),
          a.extend({
            type: 'series.gauge',
            getInitialData: function(e, t) {
              return i(this, ['value']);
            },
            defaultOption: {
              zlevel: 0,
              z: 2,
              center: ['50%', '50%'],
              legendHoverLink: !0,
              radius: '75%',
              startAngle: 225,
              endAngle: -45,
              clockwise: !0,
              min: 0,
              max: 100,
              splitNumber: 10,
              axisLine: {
                show: !0,
                lineStyle: {
                  color: [
                    [0.2, '#91c7ae'],
                    [0.8, '#63869e'],
                    [1, '#c23531']
                  ],
                  width: 30
                }
              },
              splitLine: {
                show: !0,
                length: 30,
                lineStyle: { color: '#eee', width: 2, type: 'solid' }
              },
              axisTick: {
                show: !0,
                splitNumber: 5,
                length: 8,
                lineStyle: { color: '#eee', width: 1, type: 'solid' }
              },
              axisLabel: { show: !0, distance: 5, color: 'auto' },
              pointer: { show: !0, length: '80%', width: 8 },
              itemStyle: { color: 'auto' },
              title: { show: !0, offsetCenter: [0, '-40%'], color: '#333', fontSize: 15 },
              detail: {
                show: !0,
                backgroundColor: 'rgba(0,0,0,0)',
                borderWidth: 0,
                borderColor: '#ccc',
                width: 100,
                height: null,
                padding: [5, 10],
                offsetCenter: [0, '40%'],
                color: 'auto',
                fontSize: 30
              }
            }
          }));
      e.exports = o;
    },
    function(e, t, n) {
      var i = n(866),
        a = n(6),
        o = n(71),
        r = n(16),
        s = r.parsePercent,
        l = r.round,
        u = r.linearMap;
      function c(e, t) {
        return (
          t &&
            ('string' === typeof t
              ? (e = t.replace('{value}', null != e ? e : ''))
              : 'function' === typeof t && (e = t(e))),
          e
        );
      }
      var h = 2 * Math.PI,
        d = o.extend({
          type: 'gauge',
          render: function(e, t, n) {
            this.group.removeAll();
            var i = e.get('axisLine.lineStyle.color'),
              a = (function(e, t) {
                var n = e.get('center'),
                  i = t.getWidth(),
                  a = t.getHeight(),
                  o = Math.min(i, a);
                return {
                  cx: s(n[0], t.getWidth()),
                  cy: s(n[1], t.getHeight()),
                  r: s(e.get('radius'), o / 2)
                };
              })(e, n);
            this._renderMain(e, t, n, i, a);
          },
          dispose: function() {},
          _renderMain: function(e, t, n, i, o) {
            for (
              var r = this.group,
                s = e.getModel('axisLine'),
                l = s.getModel('lineStyle'),
                u = e.get('clockwise'),
                c = (-e.get('startAngle') / 180) * Math.PI,
                d = ((v = (-e.get('endAngle') / 180) * Math.PI) - c) % h,
                p = c,
                g = l.get('width'),
                f = s.get('show'),
                m = 0;
              f && m < i.length;
              m++
            ) {
              var v = c + d * Math.min(Math.max(i[m][0], 0), 1),
                y = new a.Sector({
                  shape: {
                    startAngle: p,
                    endAngle: v,
                    cx: o.cx,
                    cy: o.cy,
                    clockwise: u,
                    r0: o.r - g,
                    r: o.r
                  },
                  silent: !0
                });
              y.setStyle({ fill: i[m][1] }),
                y.setStyle(l.getLineStyle(['color', 'borderWidth', 'borderColor'])),
                r.add(y),
                (p = v);
            }
            var x = function(e) {
              if (e <= 0) return i[0][1];
              for (var t = 0; t < i.length; t++)
                if (i[t][0] >= e && (0 === t ? 0 : i[t - 1][0]) < e) return i[t][1];
              return i[t - 1][1];
            };
            if (!u) {
              var _ = c;
              (c = v), (v = _);
            }
            this._renderTicks(e, t, n, x, o, c, v, u),
              this._renderPointer(e, t, n, x, o, c, v, u),
              this._renderTitle(e, t, n, x, o),
              this._renderDetail(e, t, n, x, o);
          },
          _renderTicks: function(e, t, n, i, o, r, u, h) {
            for (
              var d = this.group,
                p = o.cx,
                g = o.cy,
                f = o.r,
                m = +e.get('min'),
                v = +e.get('max'),
                y = e.getModel('splitLine'),
                x = e.getModel('axisTick'),
                _ = e.getModel('axisLabel'),
                b = e.get('splitNumber'),
                S = x.get('splitNumber'),
                w = s(y.get('length'), f),
                M = s(x.get('length'), f),
                I = r,
                A = (u - r) / b,
                T = A / S,
                D = y.getModel('lineStyle').getLineStyle(),
                C = x.getModel('lineStyle').getLineStyle(),
                L = 0;
              L <= b;
              L++
            ) {
              var P = Math.cos(I),
                O = Math.sin(I);
              if (y.get('show')) {
                var k = new a.Line({
                  shape: { x1: P * f + p, y1: O * f + g, x2: P * (f - w) + p, y2: O * (f - w) + g },
                  style: D,
                  silent: !0
                });
                'auto' === D.stroke && k.setStyle({ stroke: i(L / b) }), d.add(k);
              }
              if (_.get('show')) {
                var N = c(l((L / b) * (v - m) + m), _.get('formatter')),
                  R = _.get('distance'),
                  E = i(L / b);
                d.add(
                  new a.Text({
                    style: a.setTextStyle(
                      {},
                      _,
                      {
                        text: N,
                        x: P * (f - w - R) + p,
                        y: O * (f - w - R) + g,
                        textVerticalAlign: O < -0.4 ? 'top' : O > 0.4 ? 'bottom' : 'middle',
                        textAlign: P < -0.4 ? 'left' : P > 0.4 ? 'right' : 'center'
                      },
                      { autoColor: E }
                    ),
                    silent: !0
                  })
                );
              }
              if (x.get('show') && L !== b) {
                for (var V = 0; V <= S; V++) {
                  (P = Math.cos(I)), (O = Math.sin(I));
                  var z = new a.Line({
                    shape: {
                      x1: P * f + p,
                      y1: O * f + g,
                      x2: P * (f - M) + p,
                      y2: O * (f - M) + g
                    },
                    silent: !0,
                    style: C
                  });
                  'auto' === C.stroke && z.setStyle({ stroke: i((L + V / S) / b) }),
                    d.add(z),
                    (I += T);
                }
                I -= T;
              } else I += A;
            }
          },
          _renderPointer: function(e, t, n, o, r, l, c, h) {
            var d = this.group,
              p = this._data;
            if (e.get('pointer.show')) {
              var g = [+e.get('min'), +e.get('max')],
                f = [l, c],
                m = e.getData(),
                v = m.mapDimension('value');
              m
                .diff(p)
                .add(function(t) {
                  var n = new i({ shape: { angle: l } });
                  a.initProps(n, { shape: { angle: u(m.get(v, t), g, f, !0) } }, e),
                    d.add(n),
                    m.setItemGraphicEl(t, n);
                })
                .update(function(t, n) {
                  var i = p.getItemGraphicEl(n);
                  a.updateProps(i, { shape: { angle: u(m.get(v, t), g, f, !0) } }, e),
                    d.add(i),
                    m.setItemGraphicEl(t, i);
                })
                .remove(function(e) {
                  var t = p.getItemGraphicEl(e);
                  d.remove(t);
                })
                .execute(),
                m.eachItemGraphicEl(function(e, t) {
                  var n = m.getItemModel(t),
                    i = n.getModel('pointer');
                  e.setShape({
                    x: r.cx,
                    y: r.cy,
                    width: s(i.get('width'), r.r),
                    r: s(i.get('length'), r.r)
                  }),
                    e.useStyle(n.getModel('itemStyle').getItemStyle()),
                    'auto' === e.style.fill && e.setStyle('fill', o(u(m.get(v, t), g, [0, 1], !0))),
                    a.setHoverStyle(e, n.getModel('emphasis.itemStyle').getItemStyle());
                }),
                (this._data = m);
            } else
              p &&
                p.eachItemGraphicEl(function(e) {
                  d.remove(e);
                });
          },
          _renderTitle: function(e, t, n, i, o) {
            var r = e.getData(),
              l = r.mapDimension('value'),
              c = e.getModel('title');
            if (c.get('show')) {
              var h = c.get('offsetCenter'),
                d = o.cx + s(h[0], o.r),
                p = o.cy + s(h[1], o.r),
                g = +e.get('min'),
                f = +e.get('max'),
                m = e.getData().get(l, 0),
                v = i(u(m, [g, f], [0, 1], !0));
              this.group.add(
                new a.Text({
                  silent: !0,
                  style: a.setTextStyle(
                    {},
                    c,
                    {
                      x: d,
                      y: p,
                      text: r.getName(0),
                      textAlign: 'center',
                      textVerticalAlign: 'middle'
                    },
                    { autoColor: v, forceRich: !0 }
                  )
                })
              );
            }
          },
          _renderDetail: function(e, t, n, i, o) {
            var r = e.getModel('detail'),
              l = +e.get('min'),
              h = +e.get('max');
            if (r.get('show')) {
              var d = r.get('offsetCenter'),
                p = o.cx + s(d[0], o.r),
                g = o.cy + s(d[1], o.r),
                f = s(r.get('width'), o.r),
                m = s(r.get('height'), o.r),
                v = e.getData(),
                y = v.get(v.mapDimension('value'), 0),
                x = i(u(y, [l, h], [0, 1], !0));
              this.group.add(
                new a.Text({
                  silent: !0,
                  style: a.setTextStyle(
                    {},
                    r,
                    {
                      x: p,
                      y: g,
                      text: c(y, r.get('formatter')),
                      textWidth: isNaN(f) ? null : f,
                      textHeight: isNaN(m) ? null : m,
                      textAlign: 'center',
                      textVerticalAlign: 'middle'
                    },
                    { autoColor: x, forceRich: !0 }
                  )
                })
              );
            }
          }
        });
      e.exports = d;
    },
    function(e, t, n) {
      var i = n(33).extend({
        type: 'echartsGaugePointer',
        shape: { angle: 0, width: 10, r: 10, x: 0, y: 0 },
        buildPath: function(e, t) {
          var n = Math.cos,
            i = Math.sin,
            a = t.r,
            o = t.width,
            r = t.angle,
            s = t.x - n(r) * o * (o >= a / 3 ? 1 : 2),
            l = t.y - i(r) * o * (o >= a / 3 ? 1 : 2);
          (r = t.angle - Math.PI / 2),
            e.moveTo(s, l),
            e.lineTo(t.x + n(r) * o, t.y + i(r) * o),
            e.lineTo(t.x + n(t.angle) * a, t.y + i(t.angle) * a),
            e.lineTo(t.x - n(r) * o, t.y - i(r) * o),
            e.lineTo(s, l);
        }
      });
      e.exports = i;
    },
    function(e, t, n) {
      var i = n(4);
      n(868), n(869);
      var a = n(204),
        o = n(870),
        r = n(157);
      i.registerVisual(a('funnel')), i.registerLayout(o), i.registerProcessor(r('funnel'));
    },
    function(e, t, n) {
      var i = n(4),
        a = n(125),
        o = n(18).defaultEmphasis,
        r = i.extendSeriesModel({
          type: 'series.funnel',
          init: function(e) {
            r.superApply(this, 'init', arguments),
              (this.legendDataProvider = function() {
                return this.getRawData();
              }),
              this._defaultLabelLine(e);
          },
          getInitialData: function(e, t) {
            return a(this, ['value']);
          },
          _defaultLabelLine: function(e) {
            o(e, 'labelLine', ['show']);
            var t = e.labelLine,
              n = e.emphasis.labelLine;
            (t.show = t.show && e.label.show), (n.show = n.show && e.emphasis.label.show);
          },
          getDataParams: function(e) {
            var t = this.getData(),
              n = r.superCall(this, 'getDataParams', e),
              i = t.mapDimension('value'),
              a = t.getSum(i);
            return (
              (n.percent = a ? +((t.get(i, e) / a) * 100).toFixed(2) : 0),
              n.$vars.push('percent'),
              n
            );
          },
          defaultOption: {
            zlevel: 0,
            z: 2,
            legendHoverLink: !0,
            left: 80,
            top: 60,
            right: 80,
            bottom: 60,
            minSize: '0%',
            maxSize: '100%',
            sort: 'descending',
            gap: 0,
            funnelAlign: 'center',
            label: { show: !0, position: 'outer' },
            labelLine: { show: !0, length: 20, lineStyle: { width: 1, type: 'solid' } },
            itemStyle: { borderColor: '#fff', borderWidth: 1 },
            emphasis: { label: { show: !0 } }
          }
        }),
        s = r;
      e.exports = s;
    },
    function(e, t, n) {
      var i = n(6),
        a = n(2),
        o = n(71);
      function r(e, t) {
        i.Group.call(this);
        var n = new i.Polygon(),
          a = new i.Polyline(),
          o = new i.Text();
        this.add(n),
          this.add(a),
          this.add(o),
          (this.highDownOnUpdate = function(e, t) {
            'emphasis' === t
              ? ((a.ignore = a.hoverIgnore), (o.ignore = o.hoverIgnore))
              : ((a.ignore = a.normalIgnore), (o.ignore = o.normalIgnore));
          }),
          this.updateData(e, t, !0);
      }
      var s = r.prototype,
        l = ['itemStyle', 'opacity'];
      (s.updateData = function(e, t, n) {
        var o = this.childAt(0),
          r = e.hostModel,
          s = e.getItemModel(t),
          u = e.getItemLayout(t),
          c = e.getItemModel(t).get(l);
        (c = null == c ? 1 : c),
          o.useStyle({}),
          n
            ? (o.setShape({ points: u.points }),
              o.setStyle({ opacity: 0 }),
              i.initProps(o, { style: { opacity: c } }, r, t))
            : i.updateProps(o, { style: { opacity: c }, shape: { points: u.points } }, r, t);
        var h = s.getModel('itemStyle'),
          d = e.getItemVisual(t, 'color');
        o.setStyle(a.defaults({ lineJoin: 'round', fill: d }, h.getItemStyle(['opacity']))),
          (o.hoverStyle = h.getModel('emphasis').getItemStyle()),
          this._updateLabel(e, t),
          i.setHoverStyle(this);
      }),
        (s._updateLabel = function(e, t) {
          var n = this.childAt(1),
            a = this.childAt(2),
            o = e.hostModel,
            r = e.getItemModel(t),
            s = e.getItemLayout(t).label,
            l = e.getItemVisual(t, 'color');
          i.updateProps(n, { shape: { points: s.linePoints || s.linePoints } }, o, t),
            i.updateProps(a, { style: { x: s.x, y: s.y } }, o, t),
            a.attr({ rotation: s.rotation, origin: [s.x, s.y], z2: 10 });
          var u = r.getModel('label'),
            c = r.getModel('emphasis.label'),
            h = r.getModel('labelLine'),
            d = r.getModel('emphasis.labelLine');
          l = e.getItemVisual(t, 'color');
          i.setLabelStyle(
            a.style,
            (a.hoverStyle = {}),
            u,
            c,
            {
              labelFetcher: e.hostModel,
              labelDataIndex: t,
              defaultText: e.getName(t),
              autoColor: l,
              useInsideStyle: !!s.inside
            },
            { textAlign: s.textAlign, textVerticalAlign: s.verticalAlign }
          ),
            (a.ignore = a.normalIgnore = !u.get('show')),
            (a.hoverIgnore = !c.get('show')),
            (n.ignore = n.normalIgnore = !h.get('show')),
            (n.hoverIgnore = !d.get('show')),
            n.setStyle({ stroke: l }),
            n.setStyle(h.getModel('lineStyle').getLineStyle()),
            (n.hoverStyle = d.getModel('lineStyle').getLineStyle());
        }),
        a.inherits(r, i.Group);
      var u = o.extend({
        type: 'funnel',
        render: function(e, t, n) {
          var i = e.getData(),
            a = this._data,
            o = this.group;
          i
            .diff(a)
            .add(function(e) {
              var t = new r(i, e);
              i.setItemGraphicEl(e, t), o.add(t);
            })
            .update(function(e, t) {
              var n = a.getItemGraphicEl(t);
              n.updateData(i, e), o.add(n), i.setItemGraphicEl(e, n);
            })
            .remove(function(e) {
              var t = a.getItemGraphicEl(e);
              o.remove(t);
            })
            .execute(),
            (this._data = i);
        },
        remove: function() {
          this.group.removeAll(), (this._data = null);
        },
        dispose: function() {}
      });
      e.exports = u;
    },
    function(e, t, n) {
      var i = n(25),
        a = n(16),
        o = a.parsePercent,
        r = a.linearMap;
      e.exports = function(e, t, n) {
        e.eachSeriesByType('funnel', function(e) {
          var n = e.getData(),
            a = n.mapDimension('value'),
            s = e.get('sort'),
            l = (function(e, t) {
              return i.getLayoutRect(e.getBoxLayoutParams(), {
                width: t.getWidth(),
                height: t.getHeight()
              });
            })(e, t),
            u = (function(e, t) {
              for (
                var n = e.mapDimension('value'),
                  i = e.mapArray(n, function(e) {
                    return e;
                  }),
                  a = [],
                  o = 'ascending' === t,
                  r = 0,
                  s = e.count();
                r < s;
                r++
              )
                a[r] = r;
              return (
                'function' === typeof t
                  ? a.sort(t)
                  : 'none' !== t &&
                    a.sort(function(e, t) {
                      return o ? i[e] - i[t] : i[t] - i[e];
                    }),
                a
              );
            })(n, s),
            c = [o(e.get('minSize'), l.width), o(e.get('maxSize'), l.width)],
            h = n.getDataExtent(a),
            d = e.get('min'),
            p = e.get('max');
          null == d && (d = Math.min(h[0], 0)), null == p && (p = h[1]);
          var g = e.get('funnelAlign'),
            f = e.get('gap'),
            m = (l.height - f * (n.count() - 1)) / n.count(),
            v = l.y,
            y = function(e, t) {
              var i,
                o = n.get(a, e) || 0,
                s = r(o, [d, p], c, !0);
              switch (g) {
                case 'left':
                  i = l.x;
                  break;
                case 'center':
                  i = l.x + (l.width - s) / 2;
                  break;
                case 'right':
                  i = l.x + l.width - s;
              }
              return [
                [i, t],
                [i + s, t]
              ];
            };
          'ascending' === s && ((m = -m), (f = -f), (v += l.height), (u = u.reverse()));
          for (var x = 0; x < u.length; x++) {
            var _ = u[x],
              b = u[x + 1],
              S = n.getItemModel(_).get('itemStyle.height');
            null == S ? (S = m) : ((S = o(S, l.height)), 'ascending' === s && (S = -S));
            var w = y(_, v),
              M = y(b, v + S);
            (v += S + f), n.setItemLayout(_, { points: w.concat(M.slice().reverse()) });
          }
          !(function(e) {
            e.each(function(t) {
              var n,
                i,
                a,
                o,
                r = e.getItemModel(t),
                s = r.getModel('label').get('position'),
                l = r.getModel('labelLine'),
                u = e.getItemLayout(t),
                c = u.points,
                h =
                  'inner' === s ||
                  'inside' === s ||
                  'center' === s ||
                  'insideLeft' === s ||
                  'insideRight' === s;
              if (h)
                'insideLeft' === s
                  ? ((i = (c[0][0] + c[3][0]) / 2 + 5), (a = (c[0][1] + c[3][1]) / 2), (n = 'left'))
                  : 'insideRight' === s
                  ? ((i = (c[1][0] + c[2][0]) / 2 - 5),
                    (a = (c[1][1] + c[2][1]) / 2),
                    (n = 'right'))
                  : ((i = (c[0][0] + c[1][0] + c[2][0] + c[3][0]) / 4),
                    (a = (c[0][1] + c[1][1] + c[2][1] + c[3][1]) / 4),
                    (n = 'center')),
                  (o = [
                    [i, a],
                    [i, a]
                  ]);
              else {
                var d,
                  p,
                  g,
                  f = l.get('length');
                'left' === s
                  ? ((d = (c[3][0] + c[0][0]) / 2),
                    (p = (c[3][1] + c[0][1]) / 2),
                    (i = (g = d - f) - 5),
                    (n = 'right'))
                  : 'right' === s
                  ? ((d = (c[1][0] + c[2][0]) / 2),
                    (p = (c[1][1] + c[2][1]) / 2),
                    (i = (g = d + f) + 5),
                    (n = 'left'))
                  : 'rightTop' === s
                  ? ((d = c[1][0]), (p = c[1][1]), (i = (g = d + f) + 5), (n = 'top'))
                  : 'rightBottom' === s
                  ? ((d = c[2][0]), (p = c[2][1]), (i = (g = d + f) + 5), (n = 'bottom'))
                  : 'leftTop' === s
                  ? ((d = c[0][0]), (p = c[1][1]), (i = (g = d - f) - 5), (n = 'right'))
                  : 'leftBottom' === s
                  ? ((d = c[3][0]), (p = c[2][1]), (i = (g = d - f) - 5), (n = 'right'))
                  : ((d = (c[1][0] + c[2][0]) / 2),
                    (p = (c[1][1] + c[2][1]) / 2),
                    (i = (g = d + f) + 5),
                    (n = 'left'));
                (o = [
                  [d, p],
                  [g, p]
                ]),
                  (a = p);
              }
              u.label = {
                linePoints: o,
                x: i,
                y: a,
                verticalAlign: 'middle',
                textAlign: n,
                inside: h
              };
            });
          })(n);
        });
      };
    },
    function(e, t, n) {
      var i = n(4);
      n(443), n(880), n(881);
      var a = n(882);
      i.registerVisual(a);
    },
    function(e, t, n) {
      var i = n(2),
        a = n(18);
      e.exports = function(e) {
        !(function(e) {
          if (e.parallel) return;
          var t = !1;
          i.each(e.series, function(e) {
            e && 'parallel' === e.type && (t = !0);
          }),
            t && (e.parallel = [{}]);
        })(e),
          (function(e) {
            var t = a.normalizeToArray(e.parallelAxis);
            i.each(t, function(t) {
              if (i.isObject(t)) {
                var n = t.parallelIndex || 0,
                  o = a.normalizeToArray(e.parallel)[n];
                o && o.parallelAxisDefault && i.merge(t, o.parallelAxisDefault, !1);
              }
            });
          })(e);
      };
    },
    function(e, t, n) {
      var i = n(2),
        a = n(42),
        o = n(25),
        r = n(64),
        s = n(874),
        l = n(6),
        u = n(16),
        c = n(126),
        h = i.each,
        d = Math.min,
        p = Math.max,
        g = Math.floor,
        f = Math.ceil,
        m = u.round,
        v = Math.PI;
      function y(e, t, n) {
        (this._axesMap = i.createHashMap()),
          (this._axesLayout = {}),
          (this.dimensions = e.dimensions),
          this._rect,
          (this._model = e),
          this._init(e, t, n);
      }
      function x(e, t) {
        return d(p(e, t[0]), t[1]);
      }
      function _(e, t) {
        var n = t.layoutLength / (t.axisCount - 1);
        return { position: n * e, axisNameAvailableWidth: n, axisLabelShow: !0 };
      }
      function b(e, t) {
        var n,
          i,
          a = t.layoutLength,
          o = t.axisExpandWidth,
          r = t.axisCount,
          s = t.axisCollapseWidth,
          l = t.winInnerIndices,
          u = s,
          c = !1;
        return (
          e < l[0]
            ? ((n = e * s), (i = s))
            : e <= l[1]
            ? ((n = t.axisExpandWindow0Pos + e * o - t.axisExpandWindow[0]), (u = o), (c = !0))
            : ((n = a - (r - 1 - e) * s), (i = s)),
          { position: n, axisNameAvailableWidth: u, axisLabelShow: c, nameTruncateMaxWidth: i }
        );
      }
      y.prototype = {
        type: 'parallel',
        constructor: y,
        _init: function(e, t, n) {
          var i = e.dimensions,
            a = e.parallelAxisIndex;
          h(
            i,
            function(e, n) {
              var i = a[n],
                o = t.getComponent('parallelAxis', i),
                l = this._axesMap.set(
                  e,
                  new s(e, r.createScaleByModel(o), [0, 0], o.get('type'), i)
                ),
                u = 'category' === l.type;
              (l.onBand = u && o.get('boundaryGap')),
                (l.inverse = o.get('inverse')),
                (o.axis = l),
                (l.model = o),
                (l.coordinateSystem = o.coordinateSystem = this);
            },
            this
          );
        },
        update: function(e, t) {
          this._updateAxesFromSeries(this._model, e);
        },
        containPoint: function(e) {
          var t = this._makeLayoutInfo(),
            n = t.axisBase,
            i = t.layoutBase,
            a = t.pixelDimIndex,
            o = e[1 - a],
            r = e[a];
          return o >= n && o <= n + t.axisLength && r >= i && r <= i + t.layoutLength;
        },
        getModel: function() {
          return this._model;
        },
        _updateAxesFromSeries: function(e, t) {
          t.eachSeries(function(n) {
            if (e.contains(n, t)) {
              var i = n.getData();
              h(
                this.dimensions,
                function(e) {
                  var t = this._axesMap.get(e);
                  t.scale.unionExtentFromData(i, i.mapDimension(e)),
                    r.niceScaleExtent(t.scale, t.model);
                },
                this
              );
            }
          }, this);
        },
        resize: function(e, t) {
          (this._rect = o.getLayoutRect(e.getBoxLayoutParams(), {
            width: t.getWidth(),
            height: t.getHeight()
          })),
            this._layoutAxes();
        },
        getRect: function() {
          return this._rect;
        },
        _makeLayoutInfo: function() {
          var e,
            t = this._model,
            n = this._rect,
            i = ['x', 'y'],
            a = ['width', 'height'],
            o = t.get('layout'),
            r = 'horizontal' === o ? 0 : 1,
            s = n[a[r]],
            l = [0, s],
            u = this.dimensions.length,
            c = x(t.get('axisExpandWidth'), l),
            h = x(t.get('axisExpandCount') || 0, [0, u]),
            d = t.get('axisExpandable') && u > 3 && u > h && h > 1 && c > 0 && s > 0,
            p = t.get('axisExpandWindow');
          p
            ? ((e = x(p[1] - p[0], l)), (p[1] = p[0] + e))
            : ((e = x(c * (h - 1), l)),
              ((p = [c * (t.get('axisExpandCenter') || g(u / 2)) - e / 2])[1] = p[0] + e));
          var v = (s - e) / (u - h);
          v < 3 && (v = 0);
          var y = [g(m(p[0] / c, 1)) + 1, f(m(p[1] / c, 1)) - 1],
            _ = (v / c) * p[0];
          return {
            layout: o,
            pixelDimIndex: r,
            layoutBase: n[i[r]],
            layoutLength: s,
            axisBase: n[i[1 - r]],
            axisLength: n[a[1 - r]],
            axisExpandable: d,
            axisExpandWidth: c,
            axisCollapseWidth: v,
            axisExpandWindow: p,
            axisCount: u,
            winInnerIndices: y,
            axisExpandWindow0Pos: _
          };
        },
        _layoutAxes: function() {
          var e = this._rect,
            t = this._axesMap,
            n = this.dimensions,
            i = this._makeLayoutInfo(),
            o = i.layout;
          t.each(function(e) {
            var t = [0, i.axisLength],
              n = e.inverse ? 1 : 0;
            e.setExtent(t[n], t[1 - n]);
          }),
            h(
              n,
              function(t, n) {
                var r = (i.axisExpandable ? b : _)(n, i),
                  s = {
                    horizontal: { x: r.position, y: i.axisLength },
                    vertical: { x: 0, y: r.position }
                  },
                  l = { horizontal: v / 2, vertical: 0 },
                  u = [s[o].x + e.x, s[o].y + e.y],
                  c = l[o],
                  h = a.create();
                a.rotate(h, h, c),
                  a.translate(h, h, u),
                  (this._axesLayout[t] = {
                    position: u,
                    rotation: c,
                    transform: h,
                    axisNameAvailableWidth: r.axisNameAvailableWidth,
                    axisLabelShow: r.axisLabelShow,
                    nameTruncateMaxWidth: r.nameTruncateMaxWidth,
                    tickDirection: 1,
                    labelDirection: 1
                  });
              },
              this
            );
        },
        getAxis: function(e) {
          return this._axesMap.get(e);
        },
        dataToPoint: function(e, t) {
          return this.axisCoordToPoint(this._axesMap.get(t).dataToCoord(e), t);
        },
        eachActiveState: function(e, t, n, a) {
          null == n && (n = 0), null == a && (a = e.count());
          var o = this._axesMap,
            r = this.dimensions,
            s = [],
            l = [];
          i.each(r, function(t) {
            s.push(e.mapDimension(t)), l.push(o.get(t).model);
          });
          for (var u = this.hasAxisBrushed(), c = n; c < a; c++) {
            var h;
            if (u) {
              h = 'active';
              for (var d = e.getValues(s, c), p = 0, g = r.length; p < g; p++) {
                if ('inactive' === l[p].getActiveState(d[p])) {
                  h = 'inactive';
                  break;
                }
              }
            } else h = 'normal';
            t(h, c);
          }
        },
        hasAxisBrushed: function() {
          for (var e = this.dimensions, t = this._axesMap, n = !1, i = 0, a = e.length; i < a; i++)
            'normal' !== t.get(e[i]).model.getActiveState() && (n = !0);
          return n;
        },
        axisCoordToPoint: function(e, t) {
          var n = this._axesLayout[t];
          return l.applyTransform([e, 0], n.transform);
        },
        getAxisLayout: function(e) {
          return i.clone(this._axesLayout[e]);
        },
        getSlidedAxisExpandWindow: function(e) {
          var t = this._makeLayoutInfo(),
            n = t.pixelDimIndex,
            i = t.axisExpandWindow.slice(),
            a = i[1] - i[0],
            o = [0, t.axisExpandWidth * (t.axisCount - 1)];
          if (!this.containPoint(e)) return { behavior: 'none', axisExpandWindow: i };
          var r,
            s = e[n] - t.layoutBase - t.axisExpandWindow0Pos,
            l = 'slide',
            u = t.axisCollapseWidth,
            h = this._model.get('axisExpandSlideTriggerArea'),
            g = null != h[0];
          if (u)
            g && u && s < a * h[0]
              ? ((l = 'jump'), (r = s - a * h[2]))
              : g && u && s > a * (1 - h[0])
              ? ((l = 'jump'), (r = s - a * (1 - h[2])))
              : (r = s - a * h[1]) >= 0 && (r = s - a * (1 - h[1])) <= 0 && (r = 0),
              (r *= t.axisExpandWidth / u) ? c(r, i, o, 'all') : (l = 'none');
          else {
            a = i[1] - i[0];
            ((i = [p(0, (o[1] * s) / a - a / 2)])[1] = d(o[1], i[0] + a)), (i[0] = i[1] - a);
          }
          return { axisExpandWindow: i, behavior: l };
        }
      };
      var S = y;
      e.exports = S;
    },
    function(e, t, n) {
      var i = n(2),
        a = n(87),
        o = function(e, t, n, i, o) {
          a.call(this, e, t, n), (this.type = i || 'value'), (this.axisIndex = o);
        };
      (o.prototype = {
        constructor: o,
        model: null,
        isHorizontal: function() {
          return 'horizontal' !== this.coordinateSystem.getModel().get('layout');
        }
      }),
        i.inherits(o, a);
      var r = o;
      e.exports = r;
    },
    function(e, t, n) {
      var i = n(2),
        a = n(37);
      n(876);
      var o = a.extend({
        type: 'parallel',
        dependencies: ['parallelAxis'],
        coordinateSystem: null,
        dimensions: null,
        parallelAxisIndex: null,
        layoutMode: 'box',
        defaultOption: {
          zlevel: 0,
          z: 0,
          left: 80,
          top: 60,
          right: 80,
          bottom: 60,
          layout: 'horizontal',
          axisExpandable: !1,
          axisExpandCenter: null,
          axisExpandCount: 0,
          axisExpandWidth: 50,
          axisExpandRate: 17,
          axisExpandDebounce: 50,
          axisExpandSlideTriggerArea: [-0.15, 0.05, 0.4],
          axisExpandTriggerOn: 'click',
          parallelAxisDefault: null
        },
        init: function() {
          a.prototype.init.apply(this, arguments), this.mergeOption({});
        },
        mergeOption: function(e) {
          var t = this.option;
          e && i.merge(t, e, !0), this._initDimensions();
        },
        contains: function(e, t) {
          var n = e.get('parallelIndex');
          return null != n && t.getComponent('parallel', n) === this;
        },
        setAxisExpand: function(e) {
          i.each(
            [
              'axisExpandable',
              'axisExpandCenter',
              'axisExpandCount',
              'axisExpandWidth',
              'axisExpandWindow'
            ],
            function(t) {
              e.hasOwnProperty(t) && (this.option[t] = e[t]);
            },
            this
          );
        },
        _initDimensions: function() {
          var e = (this.dimensions = []),
            t = (this.parallelAxisIndex = []),
            n = i.filter(
              this.dependentModels.parallelAxis,
              function(e) {
                return (e.get('parallelIndex') || 0) === this.componentIndex;
              },
              this
            );
          i.each(n, function(n) {
            e.push('dim' + n.get('dim')), t.push(n.componentIndex);
          });
        }
      });
      e.exports = o;
    },
    function(e, t, n) {
      var i = n(2),
        a = n(37),
        o = n(120),
        r = n(202),
        s = n(16),
        l = n(124),
        u = a.extend({
          type: 'baseParallelAxis',
          axis: null,
          activeIntervals: [],
          getAreaSelectStyle: function() {
            return o([
              ['fill', 'color'],
              ['lineWidth', 'borderWidth'],
              ['stroke', 'borderColor'],
              ['width', 'width'],
              ['opacity', 'opacity']
            ])(this.getModel('areaSelectStyle'));
          },
          setActiveIntervals: function(e) {
            var t = (this.activeIntervals = i.clone(e));
            if (t) for (var n = t.length - 1; n >= 0; n--) s.asc(t[n]);
          },
          getActiveState: function(e) {
            var t = this.activeIntervals;
            if (!t.length) return 'normal';
            if (null == e || isNaN(e)) return 'inactive';
            if (1 === t.length) {
              var n = t[0];
              if (n[0] <= e && e <= n[1]) return 'active';
            } else
              for (var i = 0, a = t.length; i < a; i++)
                if (t[i][0] <= e && e <= t[i][1]) return 'active';
            return 'inactive';
          }
        });
      i.merge(u.prototype, l),
        r(
          'parallel',
          u,
          function(e, t) {
            return t.type || (t.data ? 'category' : 'value');
          },
          {
            type: 'value',
            dim: null,
            areaSelectStyle: {
              width: 20,
              borderWidth: 1,
              borderColor: 'rgba(160,197,232)',
              color: 'rgba(160,197,232)',
              opacity: 0.3
            },
            realtime: !0,
            z: 10
          }
        );
      var c = u;
      e.exports = c;
    },
    function(e, t, n) {
      n(444), n(878), n(879);
    },
    function(e, t, n) {
      var i = n(4);
      i.registerAction({ type: 'axisAreaSelect', event: 'axisAreaSelected' }, function(e, t) {
        t.eachComponent({ mainType: 'parallelAxis', query: e }, function(t) {
          t.axis.model.setActiveIntervals(e.intervals);
        });
      }),
        i.registerAction('parallelAxisExpand', function(e, t) {
          t.eachComponent({ mainType: 'parallel', query: e }, function(t) {
            t.setAxisExpand(e);
          });
        });
    },
    function(e, t, n) {
      var i = n(4),
        a = n(2),
        o = n(88),
        r = n(306),
        s = n(445),
        l = n(6),
        u = ['axisLine', 'axisTickLabel', 'axisName'],
        c = i.extendComponentView({
          type: 'parallelAxis',
          init: function(e, t) {
            c.superApply(this, 'init', arguments),
              (this._brushController = new r(t.getZr())).on('brush', a.bind(this._onBrush, this));
          },
          render: function(e, t, n, i) {
            if (
              !(function(e, t, n) {
                return (
                  n &&
                  'axisAreaSelect' === n.type &&
                  t.findComponents({ mainType: 'parallelAxis', query: n })[0] === e
                );
              })(e, t, i)
            ) {
              (this.axisModel = e), (this.api = n), this.group.removeAll();
              var r = this._axisGroup;
              if (
                ((this._axisGroup = new l.Group()), this.group.add(this._axisGroup), e.get('show'))
              ) {
                var s = (function(e, t) {
                    return t.getComponent('parallel', e.get('parallelIndex'));
                  })(e, t),
                  c = s.coordinateSystem,
                  h = e.getAreaSelectStyle(),
                  d = h.width,
                  p = e.axis.dim,
                  g = c.getAxisLayout(p),
                  f = a.extend({ strokeContainThreshold: d }, g),
                  m = new o(e, f);
                a.each(u, m.add, m),
                  this._axisGroup.add(m.getGroup()),
                  this._refreshBrushController(f, h, e, s, d, n);
                var v = i && !1 === i.animation ? null : e;
                l.groupTransition(r, this._axisGroup, v);
              }
            }
          },
          _refreshBrushController: function(e, t, n, i, o, r) {
            var u = n.axis.getExtent(),
              c = u[1] - u[0],
              h = Math.min(30, 0.1 * Math.abs(c)),
              d = l.BoundingRect.create({ x: u[0], y: -o / 2, width: c, height: o });
            (d.x -= h),
              (d.width += 2 * h),
              this._brushController
                .mount({ enableGlobalPan: !0, rotation: e.rotation, position: e.position })
                .setPanels([
                  {
                    panelId: 'pl',
                    clipPath: s.makeRectPanelClipPath(d),
                    isTargetByCursor: s.makeRectIsTargetByCursor(d, r, i),
                    getLinearBrushOtherExtent: s.makeLinearBrushOtherExtent(d, 0)
                  }
                ])
                .enableBrush({ brushType: 'lineX', brushStyle: t, removeOnClick: !0 })
                .updateCovers(
                  (function(e) {
                    var t = e.axis;
                    return a.map(e.activeIntervals, function(e) {
                      return {
                        brushType: 'lineX',
                        panelId: 'pl',
                        range: [t.dataToCoord(e[0], !0), t.dataToCoord(e[1], !0)]
                      };
                    });
                  })(n)
                );
          },
          _onBrush: function(e, t) {
            var n = this.axisModel,
              i = n.axis,
              o = a.map(e, function(e) {
                return [i.coordToData(e.range[0], !0), i.coordToData(e.range[1], !0)];
              });
            (!n.option.realtime === t.isEnd || t.removeOnClick) &&
              this.api.dispatchAction({
                type: 'axisAreaSelect',
                parallelAxisId: n.id,
                intervals: o
              });
          },
          dispose: function() {
            this._brushController.dispose();
          }
        });
      var h = c;
      e.exports = h;
    },
    function(e, t, n) {
      var i = n(2),
        a = i.each,
        o = i.createHashMap,
        r = n(38),
        s = n(79),
        l = r.extend({
          type: 'series.parallel',
          dependencies: ['parallel'],
          visualColorAccessPath: 'lineStyle.color',
          getInitialData: function(e, t) {
            var n = this.getSource();
            return (
              (function(e, t) {
                if (e.encodeDefine) return;
                var n = t.ecModel.getComponent('parallel', t.get('parallelIndex'));
                if (!n) return;
                var i = (e.encodeDefine = o());
                a(n.dimensions, function(e) {
                  var t = +e.replace('dim', '');
                  i.set(e, t);
                });
              })(n, this),
              s(n, this)
            );
          },
          getRawIndicesByActiveState: function(e) {
            var t = this.coordinateSystem,
              n = this.getData(),
              i = [];
            return (
              t.eachActiveState(n, function(t, a) {
                e === t && i.push(n.getRawIndex(a));
              }),
              i
            );
          },
          defaultOption: {
            zlevel: 0,
            z: 2,
            coordinateSystem: 'parallel',
            parallelIndex: 0,
            label: { show: !1 },
            inactiveOpacity: 0.05,
            activeOpacity: 1,
            lineStyle: { width: 1, opacity: 0.45, type: 'solid' },
            emphasis: { label: { show: !1 } },
            progressive: 500,
            smooth: !1,
            animationEasing: 'linear'
          }
        });
      e.exports = l;
    },
    function(e, t, n) {
      var i = n(6),
        a = n(71),
        o = 0.3;
      function r(e, t, n, i) {
        for (var a, o = [], r = 0; r < n.length; r++) {
          var s = n[r],
            l = e.get(e.mapDimension(s), t);
          (a = l),
            ('category' === i.getAxis(s).type ? null == a : null == a || isNaN(a)) ||
              o.push(i.dataToPoint(l, s));
        }
        return o;
      }
      function s(e, t, n, a, o) {
        var s = r(e, n, a, o),
          l = new i.Polyline({ shape: { points: s }, silent: !0, z2: 10 });
        return t.add(l), e.setItemGraphicEl(n, l), l;
      }
      function l(e) {
        var t = e.get('smooth', !0);
        return (
          !0 === t && (t = o),
          { lineStyle: e.getModel('lineStyle').getLineStyle(), smooth: null != t ? t : o }
        );
      }
      function u(e, t, n, i) {
        var a = i.lineStyle;
        t.hasItemOption &&
          (a = t
            .getItemModel(n)
            .getModel('lineStyle')
            .getLineStyle());
        e.useStyle(a);
        var o = e.style;
        (o.fill = null),
          (o.stroke = t.getItemVisual(n, 'color')),
          (o.opacity = t.getItemVisual(n, 'opacity')),
          i.smooth && (e.shape.smooth = i.smooth);
      }
      var c = a.extend({
        type: 'parallel',
        init: function() {
          (this._dataGroup = new i.Group()),
            this.group.add(this._dataGroup),
            this._data,
            this._initialized;
        },
        render: function(e, t, n, a) {
          var o = this._dataGroup,
            c = e.getData(),
            h = this._data,
            d = e.coordinateSystem,
            p = d.dimensions,
            g = l(e);
          if (
            (c
              .diff(h)
              .add(function(e) {
                u(s(c, o, e, p, d), c, e, g);
              })
              .update(function(t, n) {
                var o = h.getItemGraphicEl(n),
                  s = r(c, t, p, d);
                c.setItemGraphicEl(t, o);
                var l = a && !1 === a.animation ? null : e;
                i.updateProps(o, { shape: { points: s } }, l, t), u(o, c, t, g);
              })
              .remove(function(e) {
                var t = h.getItemGraphicEl(e);
                o.remove(t);
              })
              .execute(),
            !this._initialized)
          ) {
            this._initialized = !0;
            var f = (function(e, t, n) {
              var a = e.model,
                o = e.getRect(),
                r = new i.Rect({ shape: { x: o.x, y: o.y, width: o.width, height: o.height } }),
                s = 'horizontal' === a.get('layout') ? 'width' : 'height';
              return (
                r.setShape(s, 0),
                i.initProps(r, { shape: { width: o.width, height: o.height } }, t, n),
                r
              );
            })(d, e, function() {
              setTimeout(function() {
                o.removeClipPath();
              });
            });
            o.setClipPath(f);
          }
          this._data = c;
        },
        incrementalPrepareRender: function(e, t, n) {
          (this._initialized = !0), (this._data = null), this._dataGroup.removeAll();
        },
        incrementalRender: function(e, t, n) {
          for (
            var i = t.getData(), a = t.coordinateSystem, o = a.dimensions, r = l(t), c = e.start;
            c < e.end;
            c++
          ) {
            var h = s(i, this._dataGroup, c, o, a);
            (h.incremental = !0), u(h, i, c, r);
          }
        },
        dispose: function() {},
        remove: function() {
          this._dataGroup && this._dataGroup.removeAll(), (this._data = null);
        }
      });
      e.exports = c;
    },
    function(e, t) {
      var n = ['lineStyle', 'normal', 'opacity'],
        i = {
          seriesType: 'parallel',
          reset: function(e, t, i) {
            var a = e.getModel('itemStyle'),
              o = e.getModel('lineStyle'),
              r = t.get('color'),
              s = o.get('color') || a.get('color') || r[e.seriesIndex % r.length],
              l = e.get('inactiveOpacity'),
              u = e.get('activeOpacity'),
              c = e.getModel('lineStyle').getLineStyle(),
              h = e.coordinateSystem,
              d = e.getData(),
              p = { normal: c.opacity, active: u, inactive: l };
            return (
              d.setVisual('color', s),
              {
                progress: function(e, t) {
                  h.eachActiveState(
                    t,
                    function(e, i) {
                      var a = p[e];
                      if ('normal' === e && t.hasItemOption) {
                        var o = t.getItemModel(i).get(n, !0);
                        null != o && (a = o);
                      }
                      t.setItemVisual(i, 'opacity', a);
                    },
                    e.start,
                    e.end
                  );
                }
              }
            );
          }
        };
      e.exports = i;
    },
    function(e, t, n) {
      var i = n(4);
      n(884), n(885), n(886);
      var a = n(887),
        o = n(888);
      i.registerLayout(a), i.registerVisual(o);
    },
    function(e, t, n) {
      var i = n(38),
        a = n(439),
        o = n(30).encodeHTML,
        r = n(36),
        s =
          (n(23).__DEV__,
          i.extend({
            type: 'series.sankey',
            layoutInfo: null,
            levelModels: null,
            getInitialData: function(e, t) {
              for (
                var n = e.edges || e.links,
                  i = e.data || e.nodes,
                  o = e.levels,
                  s = (this.levelModels = {}),
                  l = 0;
                l < o.length;
                l++
              )
                null != o[l].depth && o[l].depth >= 0 && (s[o[l].depth] = new r(o[l], this, t));
              if (i && n)
                return a(i, n, this, !0, function(e, t) {
                  e.wrapMethod('getItemModel', function(e, t) {
                    return (
                      e.customizeGetParent(function(e) {
                        var n = this.parentModel,
                          i = n.getData().getItemLayout(t).depth;
                        return n.levelModels[i] || this.parentModel;
                      }),
                      e
                    );
                  }),
                    t.wrapMethod('getItemModel', function(e, t) {
                      return (
                        e.customizeGetParent(function(e) {
                          var n = this.parentModel,
                            i = n
                              .getGraph()
                              .getEdgeByIndex(t)
                              .node1.getLayout().depth;
                          return n.levelModels[i] || this.parentModel;
                        }),
                        e
                      );
                    });
                }).data;
            },
            setNodePosition: function(e, t) {
              var n = this.option.data[e];
              (n.localX = t[0]), (n.localY = t[1]);
            },
            getGraph: function() {
              return this.getData().graph;
            },
            getEdgeData: function() {
              return this.getGraph().edgeData;
            },
            formatTooltip: function(e, t, n) {
              if ('edge' === n) {
                var i = this.getDataParams(e, n),
                  a = i.data,
                  r = a.source + ' -- ' + a.target;
                return i.value && (r += ' : ' + i.value), o(r);
              }
              if ('node' === n) {
                var l = this.getGraph()
                    .getNodeByIndex(e)
                    .getLayout().value,
                  u = this.getDataParams(e, n).data.name;
                if (l) r = u + ' : ' + l;
                return o(r);
              }
              return s.superCall(this, 'formatTooltip', e, t);
            },
            optionUpdated: function() {
              var e = this.option;
              !0 === e.focusNodeAdjacency && (e.focusNodeAdjacency = 'allEdges');
            },
            defaultOption: {
              zlevel: 0,
              z: 2,
              coordinateSystem: 'view',
              layout: null,
              left: '5%',
              top: '5%',
              right: '20%',
              bottom: '5%',
              orient: 'horizontal',
              nodeWidth: 20,
              nodeGap: 8,
              draggable: !0,
              focusNodeAdjacency: !1,
              layoutIterations: 32,
              label: { show: !0, position: 'right', color: '#000', fontSize: 12 },
              levels: [],
              nodeAlign: 'justify',
              itemStyle: { borderWidth: 1, borderColor: '#333' },
              lineStyle: { color: '#314656', opacity: 0.2, curveness: 0.5 },
              emphasis: { label: { show: !0 }, lineStyle: { opacity: 0.6 } },
              animationEasing: 'linear',
              animationDuration: 1e3
            }
          })),
        l = s;
      e.exports = l;
    },
    function(e, t, n) {
      var i = n(6),
        a = n(4),
        o = n(2),
        r = ['itemStyle', 'opacity'],
        s = ['lineStyle', 'opacity'];
      function l(e, t) {
        return e.getVisual('opacity') || e.getModel().get(t);
      }
      function u(e, t, n) {
        var i = e.getGraphicEl(),
          a = l(e, t);
        null != n && (null == a && (a = 1), (a *= n)),
          i.downplay && i.downplay(),
          i.traverse(function(e) {
            'group' !== e.type && e.setStyle('opacity', a);
          });
      }
      function c(e, t) {
        var n = l(e, t),
          i = e.getGraphicEl();
        i.highlight && i.highlight(),
          i.traverse(function(e) {
            'group' !== e.type && e.setStyle('opacity', n);
          });
      }
      var h = i.extendShape({
          shape: {
            x1: 0,
            y1: 0,
            x2: 0,
            y2: 0,
            cpx1: 0,
            cpy1: 0,
            cpx2: 0,
            cpy2: 0,
            extent: 0,
            orient: ''
          },
          buildPath: function(e, t) {
            var n = t.extent;
            e.moveTo(t.x1, t.y1),
              e.bezierCurveTo(t.cpx1, t.cpy1, t.cpx2, t.cpy2, t.x2, t.y2),
              'vertical' === t.orient
                ? (e.lineTo(t.x2 + n, t.y2),
                  e.bezierCurveTo(t.cpx2 + n, t.cpy2, t.cpx1 + n, t.cpy1, t.x1 + n, t.y1))
                : (e.lineTo(t.x2, t.y2 + n),
                  e.bezierCurveTo(t.cpx2, t.cpy2 + n, t.cpx1, t.cpy1 + n, t.x1, t.y1 + n)),
              e.closePath();
          }
        }),
        d = a.extendChartView({
          type: 'sankey',
          _model: null,
          _focusAdjacencyDisabled: !1,
          render: function(e, t, n) {
            var a = this,
              o = e.getGraph(),
              r = this.group,
              s = e.layoutInfo,
              l = s.width,
              u = s.height,
              c = e.getData(),
              d = e.getData('edge'),
              p = e.get('orient');
            (this._model = e),
              r.removeAll(),
              r.attr('position', [s.x, s.y]),
              o.eachEdge(function(t) {
                var n = new h();
                (n.dataIndex = t.dataIndex), (n.seriesIndex = e.seriesIndex), (n.dataType = 'edge');
                var a,
                  o,
                  s,
                  c,
                  g,
                  f,
                  m,
                  v,
                  y = t.getModel('lineStyle'),
                  x = y.get('curveness'),
                  _ = t.node1.getLayout(),
                  b = t.node1.getModel(),
                  S = b.get('localX'),
                  w = b.get('localY'),
                  M = t.node2.getLayout(),
                  I = t.node2.getModel(),
                  A = I.get('localX'),
                  T = I.get('localY'),
                  D = t.getLayout();
                switch (
                  ((n.shape.extent = Math.max(1, D.dy)),
                  (n.shape.orient = p),
                  'vertical' === p
                    ? ((a = (null != S ? S * l : _.x) + D.sy),
                      (o = (null != w ? w * u : _.y) + _.dy),
                      (s = (null != A ? A * l : M.x) + D.ty),
                      (g = a),
                      (f = o * (1 - x) + (c = null != T ? T * u : M.y) * x),
                      (m = s),
                      (v = o * x + c * (1 - x)))
                    : ((a = (null != S ? S * l : _.x) + _.dx),
                      (o = (null != w ? w * u : _.y) + D.sy),
                      (g = a * (1 - x) + (s = null != A ? A * l : M.x) * x),
                      (f = o),
                      (m = a * x + s * (1 - x)),
                      (v = c = (null != T ? T * u : M.y) + D.ty)),
                  n.setShape({ x1: a, y1: o, x2: s, y2: c, cpx1: g, cpy1: f, cpx2: m, cpy2: v }),
                  n.setStyle(y.getItemStyle()),
                  n.style.fill)
                ) {
                  case 'source':
                    n.style.fill = t.node1.getVisual('color');
                    break;
                  case 'target':
                    n.style.fill = t.node2.getVisual('color');
                }
                i.setHoverStyle(n, t.getModel('emphasis.lineStyle').getItemStyle()),
                  r.add(n),
                  d.setItemGraphicEl(t.dataIndex, n);
              }),
              o.eachNode(function(t) {
                var n = t.getLayout(),
                  a = t.getModel(),
                  o = a.get('localX'),
                  s = a.get('localY'),
                  h = a.getModel('label'),
                  d = a.getModel('emphasis.label'),
                  p = new i.Rect({
                    shape: {
                      x: null != o ? o * l : n.x,
                      y: null != s ? s * u : n.y,
                      width: n.dx,
                      height: n.dy
                    },
                    style: a.getModel('itemStyle').getItemStyle()
                  }),
                  g = t.getModel('emphasis.itemStyle').getItemStyle();
                i.setLabelStyle(p.style, g, h, d, {
                  labelFetcher: e,
                  labelDataIndex: t.dataIndex,
                  defaultText: t.id,
                  isRectText: !0
                }),
                  p.setStyle('fill', t.getVisual('color')),
                  i.setHoverStyle(p, g),
                  r.add(p),
                  c.setItemGraphicEl(t.dataIndex, p),
                  (p.dataType = 'node');
              }),
              c.eachItemGraphicEl(function(t, i) {
                var o = c.getItemModel(i);
                o.get('draggable') &&
                  ((t.drift = function(t, o) {
                    (a._focusAdjacencyDisabled = !0),
                      (this.shape.x += t),
                      (this.shape.y += o),
                      this.dirty(),
                      n.dispatchAction({
                        type: 'dragNode',
                        seriesId: e.id,
                        dataIndex: c.getRawIndex(i),
                        localX: this.shape.x / l,
                        localY: this.shape.y / u
                      });
                  }),
                  (t.ondragend = function() {
                    a._focusAdjacencyDisabled = !1;
                  }),
                  (t.draggable = !0),
                  (t.cursor = 'move')),
                  o.get('focusNodeAdjacency') &&
                    (t.off('mouseover').on('mouseover', function() {
                      a._focusAdjacencyDisabled ||
                        n.dispatchAction({
                          type: 'focusNodeAdjacency',
                          seriesId: e.id,
                          dataIndex: t.dataIndex
                        });
                    }),
                    t.off('mouseout').on('mouseout', function() {
                      a._focusAdjacencyDisabled ||
                        n.dispatchAction({ type: 'unfocusNodeAdjacency', seriesId: e.id });
                    }));
              }),
              d.eachItemGraphicEl(function(t, i) {
                d.getItemModel(i).get('focusNodeAdjacency') &&
                  (t.off('mouseover').on('mouseover', function() {
                    a._focusAdjacencyDisabled ||
                      n.dispatchAction({
                        type: 'focusNodeAdjacency',
                        seriesId: e.id,
                        edgeDataIndex: t.dataIndex
                      });
                  }),
                  t.off('mouseout').on('mouseout', function() {
                    a._focusAdjacencyDisabled ||
                      n.dispatchAction({ type: 'unfocusNodeAdjacency', seriesId: e.id });
                  }));
              }),
              !this._data &&
                e.get('animation') &&
                r.setClipPath(
                  (function(e, t, n) {
                    var a = new i.Rect({
                      shape: { x: e.x - 10, y: e.y - 10, width: 0, height: e.height + 20 }
                    });
                    return (
                      i.initProps(
                        a,
                        { shape: { width: e.width + 20, height: e.height + 20 } },
                        t,
                        n
                      ),
                      a
                    );
                  })(r.getBoundingRect(), e, function() {
                    r.removeClipPath();
                  })
                ),
              (this._data = e.getData());
          },
          dispose: function() {},
          focusNodeAdjacency: function(e, t, n, i) {
            var a = this._model.getData(),
              l = a.graph,
              h = i.dataIndex,
              d = a.getItemModel(h),
              p = i.edgeDataIndex;
            if (null != h || null != p) {
              var g = l.getNodeByIndex(h),
                f = l.getEdgeByIndex(p);
              if (
                (l.eachNode(function(e) {
                  u(e, r, 0.1);
                }),
                l.eachEdge(function(e) {
                  u(e, s, 0.1);
                }),
                g)
              ) {
                c(g, r);
                var m = d.get('focusNodeAdjacency');
                'outEdges' === m
                  ? o.each(g.outEdges, function(e) {
                      e.dataIndex < 0 || (c(e, s), c(e.node2, r));
                    })
                  : 'inEdges' === m
                  ? o.each(g.inEdges, function(e) {
                      e.dataIndex < 0 || (c(e, s), c(e.node1, r));
                    })
                  : 'allEdges' === m &&
                    o.each(g.edges, function(e) {
                      e.dataIndex < 0 || (c(e, s), c(e.node1, r), c(e.node2, r));
                    });
              }
              f && (c(f, s), c(f.node1, r), c(f.node2, r));
            }
          },
          unfocusNodeAdjacency: function(e, t, n, i) {
            var a = this._model.getGraph();
            a.eachNode(function(e) {
              u(e, r);
            }),
              a.eachEdge(function(e) {
                u(e, s);
              });
          }
        });
      e.exports = d;
    },
    function(e, t, n) {
      var i = n(4);
      n(440),
        i.registerAction({ type: 'dragNode', event: 'dragnode', update: 'update' }, function(e, t) {
          t.eachComponent({ mainType: 'series', subType: 'sankey', query: e }, function(t) {
            t.setNodePosition(e.dataIndex, [e.localX, e.localY]);
          });
        });
    },
    function(e, t, n) {
      var i = n(25),
        a = n(2),
        o = n(18).groupData;
      function r(e) {
        var t = e.hostGraph.data.getRawDataItem(e.dataIndex);
        return null != t.depth && t.depth >= 0;
      }
      function s(e, t, n, i, o) {
        var r = 'vertical' === o ? 'x' : 'y';
        a.each(e, function(e) {
          var a, s, l;
          e.sort(function(e, t) {
            return e.getLayout()[r] - t.getLayout()[r];
          });
          for (var u = 0, c = e.length, h = 'vertical' === o ? 'dx' : 'dy', d = 0; d < c; d++)
            (l = u - (s = e[d]).getLayout()[r]) > 0 &&
              ((a = s.getLayout()[r] + l),
              'vertical' === o ? s.setLayout({ x: a }, !0) : s.setLayout({ y: a }, !0)),
              (u = s.getLayout()[r] + s.getLayout()[h] + t);
          if ((l = u - t - ('vertical' === o ? i : n)) > 0)
            for (
              a = s.getLayout()[r] - l,
                'vertical' === o ? s.setLayout({ x: a }, !0) : s.setLayout({ y: a }, !0),
                u = a,
                d = c - 2;
              d >= 0;
              --d
            )
              (l = (s = e[d]).getLayout()[r] + s.getLayout()[h] + t - u) > 0 &&
                ((a = s.getLayout()[r] - l),
                'vertical' === o ? s.setLayout({ x: a }, !0) : s.setLayout({ y: a }, !0)),
                (u = s.getLayout()[r]);
        });
      }
      function l(e, t, n) {
        a.each(e.slice().reverse(), function(e) {
          a.each(e, function(e) {
            if (e.outEdges.length) {
              var i = p(e.outEdges, u, n) / p(e.outEdges, d, n);
              if ('vertical' === n) {
                var a = e.getLayout().x + (i - h(e, n)) * t;
                e.setLayout({ x: a }, !0);
              } else {
                var o = e.getLayout().y + (i - h(e, n)) * t;
                e.setLayout({ y: o }, !0);
              }
            }
          });
        });
      }
      function u(e, t) {
        return h(e.node2, t) * e.getValue();
      }
      function c(e, t) {
        return h(e.node1, t) * e.getValue();
      }
      function h(e, t) {
        return 'vertical' === t
          ? e.getLayout().x + e.getLayout().dx / 2
          : e.getLayout().y + e.getLayout().dy / 2;
      }
      function d(e) {
        return e.getValue();
      }
      function p(e, t, n) {
        for (var i = 0, a = e.length, o = -1; ++o < a; ) {
          var r = +t.call(e, e[o], n);
          isNaN(r) || (i += r);
        }
        return i;
      }
      function g(e, t, n) {
        a.each(e, function(e) {
          a.each(e, function(e) {
            if (e.inEdges.length) {
              var i = p(e.inEdges, c, n) / p(e.inEdges, d, n);
              if ('vertical' === n) {
                var a = e.getLayout().x + (i - h(e, n)) * t;
                e.setLayout({ x: a }, !0);
              } else {
                var o = e.getLayout().y + (i - h(e, n)) * t;
                e.setLayout({ y: o }, !0);
              }
            }
          });
        });
      }
      e.exports = function(e, t, n) {
        e.eachSeriesByType('sankey', function(e) {
          var n = e.get('nodeWidth'),
            u = e.get('nodeGap'),
            c = (function(e, t) {
              return i.getLayoutRect(e.getBoxLayoutParams(), {
                width: t.getWidth(),
                height: t.getHeight()
              });
            })(e, t);
          e.layoutInfo = c;
          var h = c.width,
            f = c.height,
            m = e.getGraph(),
            v = m.nodes,
            y = m.edges;
          !(function(e) {
            a.each(e, function(e) {
              var t = p(e.outEdges, d),
                n = p(e.inEdges, d),
                i = Math.max(t, n);
              e.setLayout({ value: i }, !0);
            });
          })(v),
            (function(e, t, n, i, u, c, h, d, p) {
              (function(e, t, n, i, o, s, l) {
                for (var u = [], c = [], h = [], d = [], p = 0, g = 0; g < t.length; g++) u[g] = 1;
                for (g = 0; g < e.length; g++)
                  (c[g] = e[g].inEdges.length), 0 === c[g] && h.push(e[g]);
                var f = -1;
                for (; h.length; ) {
                  for (var m = 0; m < h.length; m++) {
                    var v = h[m],
                      y = v.hostGraph.data.getRawDataItem(v.dataIndex),
                      x = null != y.depth && y.depth >= 0;
                    x && y.depth > f && (f = y.depth),
                      v.setLayout({ depth: x ? y.depth : p }, !0),
                      'vertical' === s ? v.setLayout({ dy: n }, !0) : v.setLayout({ dx: n }, !0);
                    for (var _ = 0; _ < v.outEdges.length; _++) {
                      var b = v.outEdges[_],
                        S = t.indexOf(b);
                      u[S] = 0;
                      var w = b.node2,
                        M = e.indexOf(w);
                      0 === --c[M] && d.indexOf(w) < 0 && d.push(w);
                    }
                  }
                  ++p, (h = d), (d = []);
                }
                for (g = 0; g < u.length; g++)
                  if (1 === u[g]) throw new Error('Sankey is a DAG, the original data has cycle!');
                var I = f > p - 1 ? f : p - 1;
                l &&
                  'left' !== l &&
                  (function(e, t, n, i) {
                    if ('right' === t) {
                      for (var o = [], s = e, l = 0; s.length; ) {
                        for (var u = 0; u < s.length; u++) {
                          var c = s[u];
                          c.setLayout({ skNodeHeight: l }, !0);
                          for (var h = 0; h < c.inEdges.length; h++) {
                            var d = c.inEdges[h];
                            o.indexOf(d.node1) < 0 && o.push(d.node1);
                          }
                        }
                        (s = o), (o = []), ++l;
                      }
                      a.each(e, function(e) {
                        r(e) ||
                          e.setLayout({ depth: Math.max(0, i - e.getLayout().skNodeHeight) }, !0);
                      });
                    } else
                      'justify' === t &&
                        (function(e, t) {
                          a.each(e, function(e) {
                            r(e) || e.outEdges.length || e.setLayout({ depth: t }, !0);
                          });
                        })(e, i);
                  })(e, l, 0, I);
                !(function(e, t, n) {
                  a.each(e, function(e) {
                    var i = e.getLayout().depth * t;
                    'vertical' === n ? e.setLayout({ y: i }, !0) : e.setLayout({ x: i }, !0);
                  });
                })(e, 'vertical' === s ? (o - n) / I : (i - n) / I, s);
              })(e, t, n, u, c, d, p),
                (function(e, t, n, i, r, u, c) {
                  var h = (function(e, t) {
                    var n = [],
                      i = 'vertical' === t ? 'y' : 'x',
                      r = o(e, function(e) {
                        return e.getLayout()[i];
                      });
                    return (
                      r.keys.sort(function(e, t) {
                        return e - t;
                      }),
                      a.each(r.keys, function(e) {
                        n.push(r.buckets.get(e));
                      }),
                      n
                    );
                  })(e, c);
                  (function(e, t, n, i, o, r) {
                    var s = 1 / 0;
                    a.each(e, function(e) {
                      var t = e.length,
                        l = 0;
                      a.each(e, function(e) {
                        l += e.getLayout().value;
                      });
                      var u = 'vertical' === r ? (i - (t - 1) * o) / l : (n - (t - 1) * o) / l;
                      u < s && (s = u);
                    }),
                      a.each(e, function(e) {
                        a.each(e, function(e, t) {
                          var n = e.getLayout().value * s;
                          'vertical' === r
                            ? (e.setLayout({ x: t }, !0), e.setLayout({ dx: n }, !0))
                            : (e.setLayout({ y: t }, !0), e.setLayout({ dy: n }, !0));
                        });
                      }),
                      a.each(t, function(e) {
                        var t = +e.getValue() * s;
                        e.setLayout({ dy: t }, !0);
                      });
                  })(h, t, n, i, r, c),
                    s(h, r, n, i, c);
                  for (var d = 1; u > 0; u--)
                    l(h, (d *= 0.99), c), s(h, r, n, i, c), g(h, d, c), s(h, r, n, i, c);
                })(e, t, c, u, i, h, d),
                (function(e, t) {
                  var n = 'vertical' === t ? 'x' : 'y';
                  a.each(e, function(e) {
                    e.outEdges.sort(function(e, t) {
                      return e.node2.getLayout()[n] - t.node2.getLayout()[n];
                    }),
                      e.inEdges.sort(function(e, t) {
                        return e.node1.getLayout()[n] - t.node1.getLayout()[n];
                      });
                  }),
                    a.each(e, function(e) {
                      var t = 0,
                        n = 0;
                      a.each(e.outEdges, function(e) {
                        e.setLayout({ sy: t }, !0), (t += e.getLayout().dy);
                      }),
                        a.each(e.inEdges, function(e) {
                          e.setLayout({ ty: n }, !0), (n += e.getLayout().dy);
                        });
                    });
                })(e, d);
            })(
              v,
              y,
              n,
              u,
              h,
              f,
              0 !==
                a.filter(v, function(e) {
                  return 0 === e.getLayout().value;
                }).length
                ? 0
                : e.get('layoutIterations'),
              e.get('orient'),
              e.get('nodeAlign')
            );
        });
      };
    },
    function(e, t, n) {
      var i = n(106),
        a = n(2);
      e.exports = function(e, t) {
        e.eachSeriesByType('sankey', function(e) {
          var t = e.getGraph().nodes;
          if (t.length) {
            var n = 1 / 0,
              o = -1 / 0;
            a.each(t, function(e) {
              var t = e.getLayout().value;
              t < n && (n = t), t > o && (o = t);
            }),
              a.each(t, function(t) {
                var a = new i({
                    type: 'color',
                    mappingMethod: 'linear',
                    dataExtent: [n, o],
                    visual: e.get('color')
                  }).mapValueToVisual(t.getLayout().value),
                  r = t.getModel().get('itemStyle.color');
                null != r ? t.setVisual('color', r) : t.setVisual('color', a);
              });
          }
        });
      };
    },
    function(e, t, n) {
      var i = n(4);
      n(890), n(891);
      var a = n(892),
        o = n(893);
      i.registerVisual(a), i.registerLayout(o);
    },
    function(e, t, n) {
      var i = n(2),
        a = n(38),
        o = n(446).seriesModelMixin,
        r = a.extend({
          type: 'series.boxplot',
          dependencies: ['xAxis', 'yAxis', 'grid'],
          defaultValueDimensions: [
            { name: 'min', defaultTooltip: !0 },
            { name: 'Q1', defaultTooltip: !0 },
            { name: 'median', defaultTooltip: !0 },
            { name: 'Q3', defaultTooltip: !0 },
            { name: 'max', defaultTooltip: !0 }
          ],
          dimensions: null,
          defaultOption: {
            zlevel: 0,
            z: 2,
            coordinateSystem: 'cartesian2d',
            legendHoverLink: !0,
            hoverAnimation: !0,
            layout: null,
            boxWidth: [7, 50],
            itemStyle: { color: '#fff', borderWidth: 1 },
            emphasis: {
              itemStyle: {
                borderWidth: 2,
                shadowBlur: 5,
                shadowOffsetX: 2,
                shadowOffsetY: 2,
                shadowColor: 'rgba(0,0,0,0.4)'
              }
            },
            animationEasing: 'elasticOut',
            animationDuration: 800
          }
        });
      i.mixin(r, o, !0);
      var s = r;
      e.exports = s;
    },
    function(e, t, n) {
      var i = n(2),
        a = n(71),
        o = n(6),
        r = n(33),
        s = ['itemStyle'],
        l = ['emphasis', 'itemStyle'],
        u = a.extend({
          type: 'boxplot',
          render: function(e, t, n) {
            var i = e.getData(),
              a = this.group,
              o = this._data;
            this._data || a.removeAll();
            var r = 'horizontal' === e.get('layout') ? 1 : 0;
            i
              .diff(o)
              .add(function(e) {
                if (i.hasValue(e)) {
                  var t = h(i.getItemLayout(e), i, e, r, !0);
                  i.setItemGraphicEl(e, t), a.add(t);
                }
              })
              .update(function(e, t) {
                var n = o.getItemGraphicEl(t);
                if (i.hasValue(e)) {
                  var s = i.getItemLayout(e);
                  n ? d(s, n, i, e) : (n = h(s, i, e, r)), a.add(n), i.setItemGraphicEl(e, n);
                } else a.remove(n);
              })
              .remove(function(e) {
                var t = o.getItemGraphicEl(e);
                t && a.remove(t);
              })
              .execute(),
              (this._data = i);
          },
          remove: function(e) {
            var t = this.group,
              n = this._data;
            (this._data = null),
              n &&
                n.eachItemGraphicEl(function(e) {
                  e && t.remove(e);
                });
          },
          dispose: i.noop
        }),
        c = r.extend({
          type: 'boxplotBoxPath',
          shape: {},
          buildPath: function(e, t) {
            var n = t.points,
              i = 0;
            for (e.moveTo(n[i][0], n[i][1]), i++; i < 4; i++) e.lineTo(n[i][0], n[i][1]);
            for (e.closePath(); i < n.length; i++)
              e.moveTo(n[i][0], n[i][1]), i++, e.lineTo(n[i][0], n[i][1]);
          }
        });
      function h(e, t, n, i, a) {
        var o = e.ends,
          r = new c({ shape: { points: a ? p(o, i, e) : o } });
        return d(e, r, t, n, a), r;
      }
      function d(e, t, n, i, a) {
        var r = n.hostModel;
        (0, o[a ? 'initProps' : 'updateProps'])(t, { shape: { points: e.ends } }, r, i);
        var u = n.getItemModel(i),
          c = u.getModel(s),
          h = n.getItemVisual(i, 'color'),
          d = c.getItemStyle(['borderColor']);
        (d.stroke = h), (d.strokeNoScale = !0), t.useStyle(d), (t.z2 = 100);
        var p = u.getModel(l).getItemStyle();
        o.setHoverStyle(t, p);
      }
      function p(e, t, n) {
        return i.map(e, function(e) {
          return ((e = e.slice())[t] = n.initBaseline), e;
        });
      }
      var g = u;
      e.exports = g;
    },
    function(e, t) {
      var n = ['itemStyle', 'borderColor'];
      e.exports = function(e, t) {
        var i = e.get('color');
        e.eachRawSeriesByType('boxplot', function(t) {
          var a = i[t.seriesIndex % i.length],
            o = t.getData();
          o.setVisual({ legendSymbol: 'roundRect', color: t.get(n) || a }),
            e.isSeriesFiltered(t) ||
              o.each(function(e) {
                var t = o.getItemModel(e);
                o.setItemVisual(e, { color: t.get(n, !0) });
              });
        });
      };
    },
    function(e, t, n) {
      var i = n(2),
        a = n(16).parsePercent,
        o = i.each;
      e.exports = function(e) {
        var t = (function(e) {
          var t = [],
            n = [];
          return (
            e.eachSeriesByType('boxplot', function(e) {
              var a = e.getBaseAxis(),
                o = i.indexOf(n, a);
              o < 0 && ((o = n.length), (n[o] = a), (t[o] = { axis: a, seriesModels: [] })),
                t[o].seriesModels.push(e);
            }),
            t
          );
        })(e);
        o(t, function(e) {
          var t = e.seriesModels;
          t.length &&
            (!(function(e) {
              var t,
                n,
                r = e.axis,
                s = e.seriesModels,
                l = s.length,
                u = (e.boxWidthList = []),
                c = (e.boxOffsetList = []),
                h = [];
              if ('category' === r.type) n = r.getBandWidth();
              else {
                var d = 0;
                o(s, function(e) {
                  d = Math.max(d, e.getData().count());
                }),
                  (t = r.getExtent()),
                  Math.abs(t[1] - t[0]);
              }
              o(s, function(e) {
                var t = e.get('boxWidth');
                i.isArray(t) || (t = [t, t]), h.push([a(t[0], n) || 0, a(t[1], n) || 0]);
              });
              var p = 0.8 * n - 2,
                g = (p / l) * 0.3,
                f = (p - g * (l - 1)) / l,
                m = f / 2 - p / 2;
              o(s, function(e, t) {
                c.push(m), (m += g + f), u.push(Math.min(Math.max(f, h[t][0]), h[t][1]));
              });
            })(e),
            o(t, function(t, n) {
              !(function(e, t, n) {
                var i = e.coordinateSystem,
                  a = e.getData(),
                  o = n / 2,
                  r = 'horizontal' === e.get('layout') ? 0 : 1,
                  s = 1 - r,
                  l = ['x', 'y'],
                  u = a.mapDimension(l[r]),
                  c = a.mapDimension(l[s], !0);
                if (null == u || c.length < 5) return;
                for (var h = 0; h < a.count(); h++) {
                  var d = a.get(u, h),
                    p = x(d, c[2], h),
                    g = x(d, c[0], h),
                    f = x(d, c[1], h),
                    m = x(d, c[3], h),
                    v = x(d, c[4], h),
                    y = [];
                  _(y, f, 0),
                    _(y, m, 1),
                    y.push(g, f, v, m),
                    b(y, g),
                    b(y, v),
                    b(y, p),
                    a.setItemLayout(h, { initBaseline: p[s], ends: y });
                }
                function x(e, n, o) {
                  var l,
                    u = a.get(n, o),
                    c = [];
                  return (
                    (c[r] = e),
                    (c[s] = u),
                    isNaN(e) || isNaN(u) ? (l = [NaN, NaN]) : ((l = i.dataToPoint(c))[r] += t),
                    l
                  );
                }
                function _(e, t, n) {
                  var i = t.slice(),
                    a = t.slice();
                  (i[r] += o), (a[r] -= o), n ? e.push(i, a) : e.push(a, i);
                }
                function b(e, t) {
                  var n = t.slice(),
                    i = t.slice();
                  (n[r] -= o), (i[r] += o), e.push(n, i);
                }
              })(t, e.boxOffsetList[n], e.boxWidthList[n]);
            }));
        });
      };
    },
    function(e, t, n) {
      var i = n(4);
      n(895), n(896);
      var a = n(897),
        o = n(898),
        r = n(899);
      i.registerPreprocessor(a), i.registerVisual(o), i.registerLayout(r);
    },
    function(e, t, n) {
      var i = n(2),
        a = n(38),
        o = n(446).seriesModelMixin,
        r = a.extend({
          type: 'series.candlestick',
          dependencies: ['xAxis', 'yAxis', 'grid'],
          defaultValueDimensions: [
            { name: 'open', defaultTooltip: !0 },
            { name: 'close', defaultTooltip: !0 },
            { name: 'lowest', defaultTooltip: !0 },
            { name: 'highest', defaultTooltip: !0 }
          ],
          dimensions: null,
          defaultOption: {
            zlevel: 0,
            z: 2,
            coordinateSystem: 'cartesian2d',
            legendHoverLink: !0,
            hoverAnimation: !0,
            layout: null,
            clip: !0,
            itemStyle: {
              color: '#c23531',
              color0: '#314656',
              borderWidth: 1,
              borderColor: '#c23531',
              borderColor0: '#314656'
            },
            emphasis: { itemStyle: { borderWidth: 2 } },
            barMaxWidth: null,
            barMinWidth: null,
            barWidth: null,
            large: !0,
            largeThreshold: 600,
            progressive: 3e3,
            progressiveThreshold: 1e4,
            progressiveChunkMode: 'mod',
            animationUpdate: !1,
            animationEasing: 'linear',
            animationDuration: 300
          },
          getShadowDim: function() {
            return 'open';
          },
          brushSelector: function(e, t, n) {
            var i = t.getItemLayout(e);
            return i && n.rect(i.brushRect);
          }
        });
      i.mixin(r, o, !0);
      var s = r;
      e.exports = s;
    },
    function(e, t, n) {
      var i = n(2),
        a = n(71),
        o = n(6),
        r = n(33),
        s = n(154).createClipPath,
        l = ['itemStyle'],
        u = ['emphasis', 'itemStyle'],
        c = ['color', 'color0', 'borderColor', 'borderColor0'],
        h = a.extend({
          type: 'candlestick',
          render: function(e, t, n) {
            this.group.removeClipPath(),
              this._updateDrawMode(e),
              this._isLargeDraw ? this._renderLarge(e) : this._renderNormal(e);
          },
          incrementalPrepareRender: function(e, t, n) {
            this._clear(), this._updateDrawMode(e);
          },
          incrementalRender: function(e, t, n, i) {
            this._isLargeDraw
              ? this._incrementalRenderLarge(e, t)
              : this._incrementalRenderNormal(e, t);
          },
          _updateDrawMode: function(e) {
            var t = e.pipelineContext.large;
            (null == this._isLargeDraw || t ^ this._isLargeDraw) &&
              ((this._isLargeDraw = t), this._clear());
          },
          _renderNormal: function(e) {
            var t = e.getData(),
              n = this._data,
              i = this.group,
              a = t.getLayout('isSimpleBox'),
              r = e.get('clip', !0),
              s = e.coordinateSystem,
              l = s.getArea && s.getArea();
            this._data || i.removeAll(),
              t
                .diff(n)
                .add(function(n) {
                  if (t.hasValue(n)) {
                    var s,
                      u = t.getItemLayout(n);
                    if (r && g(l, u)) return;
                    (s = p(u, n, !0)),
                      o.initProps(s, { shape: { points: u.ends } }, e, n),
                      f(s, t, n, a),
                      i.add(s),
                      t.setItemGraphicEl(n, s);
                  }
                })
                .update(function(s, u) {
                  var c = n.getItemGraphicEl(u);
                  if (t.hasValue(s)) {
                    var h = t.getItemLayout(s);
                    r && g(l, h)
                      ? i.remove(c)
                      : (c ? o.updateProps(c, { shape: { points: h.ends } }, e, s) : (c = p(h, s)),
                        f(c, t, s, a),
                        i.add(c),
                        t.setItemGraphicEl(s, c));
                  } else i.remove(c);
                })
                .remove(function(e) {
                  var t = n.getItemGraphicEl(e);
                  t && i.remove(t);
                })
                .execute(),
              (this._data = t);
          },
          _renderLarge: function(e) {
            this._clear(), y(e, this.group);
            var t = e.get('clip', !0) ? s(e.coordinateSystem, !1, e) : null;
            t ? this.group.setClipPath(t) : this.group.removeClipPath();
          },
          _incrementalRenderNormal: function(e, t) {
            for (var n, i = t.getData(), a = i.getLayout('isSimpleBox'); null != (n = e.next()); ) {
              var o;
              f((o = p(i.getItemLayout(n), n)), i, n, a), (o.incremental = !0), this.group.add(o);
            }
          },
          _incrementalRenderLarge: function(e, t) {
            y(t, this.group, !0);
          },
          remove: function(e) {
            this._clear();
          },
          _clear: function() {
            this.group.removeAll(), (this._data = null);
          },
          dispose: i.noop
        }),
        d = r.extend({
          type: 'normalCandlestickBox',
          shape: {},
          buildPath: function(e, t) {
            var n = t.points;
            this.__simpleBox
              ? (e.moveTo(n[4][0], n[4][1]), e.lineTo(n[6][0], n[6][1]))
              : (e.moveTo(n[0][0], n[0][1]),
                e.lineTo(n[1][0], n[1][1]),
                e.lineTo(n[2][0], n[2][1]),
                e.lineTo(n[3][0], n[3][1]),
                e.closePath(),
                e.moveTo(n[4][0], n[4][1]),
                e.lineTo(n[5][0], n[5][1]),
                e.moveTo(n[6][0], n[6][1]),
                e.lineTo(n[7][0], n[7][1]));
          }
        });
      function p(e, t, n) {
        var i = e.ends;
        return new d({ shape: { points: n ? m(i, e) : i }, z2: 100 });
      }
      function g(e, t) {
        for (var n = !0, i = 0; i < t.ends.length; i++)
          if (e.contain(t.ends[i][0], t.ends[i][1])) {
            n = !1;
            break;
          }
        return n;
      }
      function f(e, t, n, i) {
        var a = t.getItemModel(n),
          r = a.getModel(l),
          s = t.getItemVisual(n, 'color'),
          h = t.getItemVisual(n, 'borderColor') || s,
          d = r.getItemStyle(c);
        e.useStyle(d),
          (e.style.strokeNoScale = !0),
          (e.style.fill = s),
          (e.style.stroke = h),
          (e.__simpleBox = i);
        var p = a.getModel(u).getItemStyle();
        o.setHoverStyle(e, p);
      }
      function m(e, t) {
        return i.map(e, function(e) {
          return ((e = e.slice())[1] = t.initBaseline), e;
        });
      }
      var v = r.extend({
        type: 'largeCandlestickBox',
        shape: {},
        buildPath: function(e, t) {
          for (var n = t.points, i = 0; i < n.length; )
            if (this.__sign === n[i++]) {
              var a = n[i++];
              e.moveTo(a, n[i++]), e.lineTo(a, n[i++]);
            } else i += 3;
        }
      });
      function y(e, t, n) {
        var i = e.getData(),
          a = i.getLayout('largePoints'),
          o = new v({ shape: { points: a }, __sign: 1 });
        t.add(o);
        var r = new v({ shape: { points: a }, __sign: -1 });
        t.add(r), x(1, o, e, i), x(-1, r, e, i), n && ((o.incremental = !0), (r.incremental = !0));
      }
      function x(e, t, n, i) {
        var a = e > 0 ? 'P' : 'N',
          o = i.getVisual('borderColor' + a) || i.getVisual('color' + a),
          r = n.getModel(l).getItemStyle(c);
        t.useStyle(r), (t.style.fill = null), (t.style.stroke = o);
      }
      var _ = h;
      e.exports = _;
    },
    function(e, t, n) {
      var i = n(2);
      e.exports = function(e) {
        e &&
          i.isArray(e.series) &&
          i.each(e.series, function(e) {
            i.isObject(e) && 'k' === e.type && (e.type = 'candlestick');
          });
      };
    },
    function(e, t, n) {
      var i = n(122),
        a = ['itemStyle', 'borderColor'],
        o = ['itemStyle', 'borderColor0'],
        r = ['itemStyle', 'color'],
        s = ['itemStyle', 'color0'],
        l = {
          seriesType: 'candlestick',
          plan: i(),
          performRawSeries: !0,
          reset: function(e, t) {
            var n = e.getData(),
              i = e.pipelineContext.large;
            if (
              (n.setVisual({
                legendSymbol: 'roundRect',
                colorP: l(1, e),
                colorN: l(-1, e),
                borderColorP: u(1, e),
                borderColorN: u(-1, e)
              }),
              !t.isSeriesFiltered(e))
            )
              return (
                !i && {
                  progress: function(e, t) {
                    var n;
                    for (; null != (n = e.next()); ) {
                      var i = t.getItemModel(n),
                        a = t.getItemLayout(n).sign;
                      t.setItemVisual(n, { color: l(a, i), borderColor: u(a, i) });
                    }
                  }
                }
              );
            function l(e, t) {
              return t.get(e > 0 ? r : s);
            }
            function u(e, t) {
              return t.get(e > 0 ? a : o);
            }
          }
        };
      e.exports = l;
    },
    function(e, t, n) {
      var i = n(6).subPixelOptimize,
        a = n(122),
        o = n(16).parsePercent,
        r = n(2).retrieve2,
        s = 'undefined' !== typeof Float32Array ? Float32Array : Array,
        l = {
          seriesType: 'candlestick',
          plan: a(),
          reset: function(e) {
            var t = e.coordinateSystem,
              n = e.getData(),
              a = (function(e, t) {
                var n,
                  i = e.getBaseAxis(),
                  a =
                    'category' === i.type
                      ? i.getBandWidth()
                      : ((n = i.getExtent()), Math.abs(n[1] - n[0]) / t.count()),
                  s = o(r(e.get('barMaxWidth'), a), a),
                  l = o(r(e.get('barMinWidth'), 1), a),
                  u = e.get('barWidth');
                return null != u ? o(u, a) : Math.max(Math.min(a / 2, s), l);
              })(e, n),
              l = 0,
              c = 1,
              h = ['x', 'y'],
              d = n.mapDimension(h[l]),
              p = n.mapDimension(h[c], !0),
              g = p[0],
              f = p[1],
              m = p[2],
              v = p[3];
            if (
              (n.setLayout({ candleWidth: a, isSimpleBox: a <= 1.3 }), !(null == d || p.length < 4))
            )
              return {
                progress: e.pipelineContext.large
                  ? function(e, n) {
                      var i,
                        a,
                        o = new s(4 * e.count),
                        r = 0,
                        h = [],
                        p = [];
                      for (; null != (a = e.next()); ) {
                        var y = n.get(d, a),
                          x = n.get(g, a),
                          _ = n.get(f, a),
                          b = n.get(m, a),
                          S = n.get(v, a);
                        isNaN(y) || isNaN(b) || isNaN(S)
                          ? ((o[r++] = NaN), (r += 3))
                          : ((o[r++] = u(n, a, x, _, f)),
                            (h[l] = y),
                            (h[c] = b),
                            (i = t.dataToPoint(h, null, p)),
                            (o[r++] = i ? i[0] : NaN),
                            (o[r++] = i ? i[1] : NaN),
                            (h[c] = S),
                            (i = t.dataToPoint(h, null, p)),
                            (o[r++] = i ? i[1] : NaN));
                      }
                      n.setLayout('largePoints', o);
                    }
                  : function(e, n) {
                      var o;
                      for (; null != (o = e.next()); ) {
                        var r = n.get(d, o),
                          s = n.get(g, o),
                          h = n.get(f, o),
                          p = n.get(m, o),
                          y = n.get(v, o),
                          x = Math.min(s, h),
                          _ = Math.max(s, h),
                          b = A(x, r),
                          S = A(_, r),
                          w = A(p, r),
                          M = A(y, r),
                          I = [];
                        T(I, S, 0),
                          T(I, b, 1),
                          I.push(C(M), C(S), C(w), C(b)),
                          n.setItemLayout(o, {
                            sign: u(n, o, s, h, f),
                            initBaseline: s > h ? S[c] : b[c],
                            ends: I,
                            brushRect: D(p, y, r)
                          });
                      }
                      function A(e, n) {
                        var i = [];
                        return (
                          (i[l] = n),
                          (i[c] = e),
                          isNaN(n) || isNaN(e) ? [NaN, NaN] : t.dataToPoint(i)
                        );
                      }
                      function T(e, t, n) {
                        var o = t.slice(),
                          r = t.slice();
                        (o[l] = i(o[l] + a / 2, 1, !1)),
                          (r[l] = i(r[l] - a / 2, 1, !0)),
                          n ? e.push(o, r) : e.push(r, o);
                      }
                      function D(e, t, n) {
                        var i = A(e, n),
                          o = A(t, n);
                        return (
                          (i[l] -= a / 2),
                          (o[l] -= a / 2),
                          {
                            x: i[0],
                            y: i[1],
                            width: c ? a : o[0] - i[0],
                            height: c ? o[1] - i[1] : a
                          }
                        );
                      }
                      function C(e) {
                        return (e[l] = i(e[l], 1)), e;
                      }
                    }
              };
          }
        };
      function u(e, t, n, i, a) {
        return n > i ? -1 : n < i ? 1 : t > 0 ? (e.get(a, t - 1) <= i ? 1 : -1) : 1;
      }
      e.exports = l;
    },
    function(e, t, n) {
      var i = n(4);
      n(901), n(902);
      var a = n(103),
        o = n(155);
      i.registerVisual(a('effectScatter', 'circle')), i.registerLayout(o('effectScatter'));
    },
    function(e, t, n) {
      var i = n(79),
        a = n(38).extend({
          type: 'series.effectScatter',
          dependencies: ['grid', 'polar'],
          getInitialData: function(e, t) {
            return i(this.getSource(), this);
          },
          brushSelector: 'point',
          defaultOption: {
            coordinateSystem: 'cartesian2d',
            zlevel: 0,
            z: 2,
            legendHoverLink: !0,
            effectType: 'ripple',
            progressive: 0,
            showEffectOn: 'render',
            rippleEffect: { period: 4, scale: 2.5, brushType: 'fill' },
            symbolSize: 10
          }
        });
      e.exports = a;
    },
    function(e, t, n) {
      var i = n(4),
        a = n(153),
        o = n(903),
        r = n(42),
        s = n(155),
        l = i.extendChartView({
          type: 'effectScatter',
          init: function() {
            this._symbolDraw = new a(o);
          },
          render: function(e, t, n) {
            var i = e.getData(),
              a = this._symbolDraw;
            a.updateData(i), this.group.add(a.group);
          },
          updateTransform: function(e, t, n) {
            var i = e.getData();
            this.group.dirty();
            var a = s().reset(e);
            a.progress && a.progress({ start: 0, end: i.count() }, i),
              this._symbolDraw.updateLayout(i);
          },
          _updateGroupTransform: function(e) {
            var t = e.coordinateSystem;
            t &&
              t.getRoamTransform &&
              ((this.group.transform = r.clone(t.getRoamTransform())),
              this.group.decomposeTransform());
          },
          remove: function(e, t) {
            this._symbolDraw && this._symbolDraw.remove(t);
          },
          dispose: function() {}
        });
      e.exports = l;
    },
    function(e, t, n) {
      var i = n(2),
        a = n(54).createSymbol,
        o = n(6).Group,
        r = n(16).parsePercent,
        s = n(201);
      function l(e, t) {
        var n = t.rippleEffectColor || t.color;
        e.eachChild(function(e) {
          e.attr({
            z: t.z,
            zlevel: t.zlevel,
            style: {
              stroke: 'stroke' === t.brushType ? n : null,
              fill: 'fill' === t.brushType ? n : null
            }
          });
        });
      }
      function u(e, t) {
        o.call(this);
        var n = new s(e, t),
          i = new o();
        this.add(n),
          this.add(i),
          (i.beforeUpdate = function() {
            this.attr(n.getScale());
          }),
          this.updateData(e, t);
      }
      var c = u.prototype;
      (c.stopEffectAnimation = function() {
        this.childAt(1).removeAll();
      }),
        (c.startEffectAnimation = function(e) {
          for (var t = e.symbolType, n = e.color, i = this.childAt(1), o = 0; o < 3; o++) {
            var r = a(t, -1, -1, 2, 2, n);
            r.attr({ style: { strokeNoScale: !0 }, z2: 99, silent: !0, scale: [0.5, 0.5] });
            var s = (-o / 3) * e.period + e.effectOffset;
            r
              .animate('', !0)
              .when(e.period, { scale: [e.rippleScale / 2, e.rippleScale / 2] })
              .delay(s)
              .start(),
              r
                .animateStyle(!0)
                .when(e.period, { opacity: 0 })
                .delay(s)
                .start(),
              i.add(r);
          }
          l(i, e);
        }),
        (c.updateEffectAnimation = function(e) {
          for (
            var t = this._effectCfg,
              n = this.childAt(1),
              i = ['symbolType', 'period', 'rippleScale'],
              a = 0;
            a < i.length;
            a++
          ) {
            var o = i[a];
            if (t[o] !== e[o]) return this.stopEffectAnimation(), void this.startEffectAnimation(e);
          }
          l(n, e);
        }),
        (c.highlight = function() {
          this.trigger('emphasis');
        }),
        (c.downplay = function() {
          this.trigger('normal');
        }),
        (c.updateData = function(e, t) {
          var n = e.hostModel;
          this.childAt(0).updateData(e, t);
          var a = this.childAt(1),
            o = e.getItemModel(t),
            s = e.getItemVisual(t, 'symbol'),
            l = (function(e) {
              return i.isArray(e) || (e = [+e, +e]), e;
            })(e.getItemVisual(t, 'symbolSize')),
            u = e.getItemVisual(t, 'color');
          a.attr('scale', l),
            a.traverse(function(e) {
              e.attr({ fill: u });
            });
          var c = o.getShallow('symbolOffset');
          if (c) {
            var h = a.position;
            (h[0] = r(c[0], l[0])), (h[1] = r(c[1], l[1]));
          }
          a.rotation = ((o.getShallow('symbolRotate') || 0) * Math.PI) / 180 || 0;
          var d = {};
          if (
            ((d.showEffectOn = n.get('showEffectOn')),
            (d.rippleScale = o.get('rippleEffect.scale')),
            (d.brushType = o.get('rippleEffect.brushType')),
            (d.period = 1e3 * o.get('rippleEffect.period')),
            (d.effectOffset = t / e.count()),
            (d.z = o.getShallow('z') || 0),
            (d.zlevel = o.getShallow('zlevel') || 0),
            (d.symbolType = s),
            (d.color = u),
            (d.rippleEffectColor = o.get('rippleEffect.color')),
            this.off('mouseover')
              .off('mouseout')
              .off('emphasis')
              .off('normal'),
            'render' === d.showEffectOn)
          )
            this._effectCfg ? this.updateEffectAnimation(d) : this.startEffectAnimation(d),
              (this._effectCfg = d);
          else {
            (this._effectCfg = null), this.stopEffectAnimation();
            var p = this.childAt(0),
              g = function() {
                p.highlight(), 'render' !== d.showEffectOn && this.startEffectAnimation(d);
              },
              f = function() {
                p.downplay(), 'render' !== d.showEffectOn && this.stopEffectAnimation();
              };
            this.on('mouseover', g, this)
              .on('mouseout', f, this)
              .on('emphasis', g, this)
              .on('normal', f, this);
          }
          this._effectCfg = d;
        }),
        (c.fadeOut = function(e) {
          this.off('mouseover')
            .off('mouseout')
            .off('emphasis')
            .off('normal'),
            e && e();
        }),
        i.inherits(u, o);
      var h = u;
      e.exports = h;
    },
    function(e, t, n) {
      var i = n(4);
      n(905), n(906);
      var a = n(449),
        o = n(909);
      i.registerLayout(a), i.registerVisual(o);
    },
    function(e, t, n) {
      n(23).__DEV__;
      var i = n(38),
        a = n(53),
        o = n(2),
        r = o.concatArray,
        s = o.mergeAll,
        l = o.map,
        u = n(30).encodeHTML,
        c = (n(63), 'undefined' === typeof Uint32Array ? Array : Uint32Array),
        h = 'undefined' === typeof Float64Array ? Array : Float64Array;
      function d(e) {
        var t = e.data;
        t &&
          t[0] &&
          t[0][0] &&
          t[0][0].coord &&
          (e.data = l(t, function(e) {
            var t = { coords: [e[0].coord, e[1].coord] };
            return (
              e[0].name && (t.fromName = e[0].name),
              e[1].name && (t.toName = e[1].name),
              s([t, e[0], e[1]])
            );
          }));
      }
      var p = i.extend({
          type: 'series.lines',
          dependencies: ['grid', 'polar'],
          visualColorAccessPath: 'lineStyle.color',
          init: function(e) {
            (e.data = e.data || []), d(e);
            var t = this._processFlatCoordsArray(e.data);
            (this._flatCoords = t.flatCoords),
              (this._flatCoordsOffset = t.flatCoordsOffset),
              t.flatCoords && (e.data = new Float32Array(t.count)),
              p.superApply(this, 'init', arguments);
          },
          mergeOption: function(e) {
            if (((e.data = e.data || []), d(e), e.data)) {
              var t = this._processFlatCoordsArray(e.data);
              (this._flatCoords = t.flatCoords),
                (this._flatCoordsOffset = t.flatCoordsOffset),
                t.flatCoords && (e.data = new Float32Array(t.count));
            }
            p.superApply(this, 'mergeOption', arguments);
          },
          appendData: function(e) {
            var t = this._processFlatCoordsArray(e.data);
            t.flatCoords &&
              (this._flatCoords
                ? ((this._flatCoords = r(this._flatCoords, t.flatCoords)),
                  (this._flatCoordsOffset = r(this._flatCoordsOffset, t.flatCoordsOffset)))
                : ((this._flatCoords = t.flatCoords),
                  (this._flatCoordsOffset = t.flatCoordsOffset)),
              (e.data = new Float32Array(t.count))),
              this.getRawData().appendData(e.data);
          },
          _getCoordsFromItemModel: function(e) {
            var t = this.getData().getItemModel(e);
            return t.option instanceof Array ? t.option : t.getShallow('coords');
          },
          getLineCoordsCount: function(e) {
            return this._flatCoordsOffset
              ? this._flatCoordsOffset[2 * e + 1]
              : this._getCoordsFromItemModel(e).length;
          },
          getLineCoords: function(e, t) {
            if (this._flatCoordsOffset) {
              for (
                var n = this._flatCoordsOffset[2 * e], i = this._flatCoordsOffset[2 * e + 1], a = 0;
                a < i;
                a++
              )
                (t[a] = t[a] || []),
                  (t[a][0] = this._flatCoords[n + 2 * a]),
                  (t[a][1] = this._flatCoords[n + 2 * a + 1]);
              return i;
            }
            var o = this._getCoordsFromItemModel(e);
            for (a = 0; a < o.length; a++)
              (t[a] = t[a] || []), (t[a][0] = o[a][0]), (t[a][1] = o[a][1]);
            return o.length;
          },
          _processFlatCoordsArray: function(e) {
            var t = 0;
            if ((this._flatCoords && (t = this._flatCoords.length), 'number' === typeof e[0])) {
              for (
                var n = e.length, i = new c(n), a = new h(n), o = 0, r = 0, s = 0, l = 0;
                l < n;

              ) {
                s++;
                var u = e[l++];
                (i[r++] = o + t), (i[r++] = u);
                for (var d = 0; d < u; d++) {
                  var p = e[l++],
                    g = e[l++];
                  (a[o++] = p), (a[o++] = g);
                }
              }
              return { flatCoordsOffset: new Uint32Array(i.buffer, 0, r), flatCoords: a, count: s };
            }
            return { flatCoordsOffset: null, flatCoords: null, count: e.length };
          },
          getInitialData: function(e, t) {
            var n = new a(['value'], this);
            return (
              (n.hasItemOption = !1),
              n.initData(e.data, [], function(e, t, i, a) {
                if (e instanceof Array) return NaN;
                n.hasItemOption = !0;
                var o = e.value;
                return null != o ? (o instanceof Array ? o[a] : o) : void 0;
              }),
              n
            );
          },
          formatTooltip: function(e) {
            var t = this.getData().getItemModel(e),
              n = t.get('name');
            if (n) return n;
            var i = t.get('fromName'),
              a = t.get('toName'),
              o = [];
            return null != i && o.push(i), null != a && o.push(a), u(o.join(' > '));
          },
          preventIncremental: function() {
            return !!this.get('effect.show');
          },
          getProgressive: function() {
            var e = this.option.progressive;
            return null == e ? (this.option.large ? 1e4 : this.get('progressive')) : e;
          },
          getProgressiveThreshold: function() {
            var e = this.option.progressiveThreshold;
            return null == e ? (this.option.large ? 2e4 : this.get('progressiveThreshold')) : e;
          },
          defaultOption: {
            coordinateSystem: 'geo',
            zlevel: 0,
            z: 2,
            legendHoverLink: !0,
            hoverAnimation: !0,
            xAxisIndex: 0,
            yAxisIndex: 0,
            symbol: ['none', 'none'],
            symbolSize: [10, 10],
            geoIndex: 0,
            effect: {
              show: !1,
              period: 4,
              constantSpeed: 0,
              symbol: 'circle',
              symbolSize: 3,
              loop: !0,
              trailLength: 0.2
            },
            large: !1,
            largeThreshold: 2e3,
            polyline: !1,
            clip: !0,
            label: { show: !1, position: 'end' },
            lineStyle: { opacity: 0.5 }
          }
        }),
        g = p;
      e.exports = g;
    },
    function(e, t, n) {
      n(23).__DEV__;
      var i = n(4),
        a = n(303),
        o = n(447),
        r = n(304),
        s = n(448),
        l = n(907),
        u = n(908),
        c = n(449),
        h = n(154).createClipPath,
        d = i.extendChartView({
          type: 'lines',
          init: function() {},
          render: function(e, t, n) {
            var i = e.getData(),
              a = this._updateLineDraw(i, e),
              o = e.get('zlevel'),
              r = e.get('effect.trailLength'),
              s = n.getZr(),
              l = 'svg' === s.painter.getType();
            l || s.painter.getLayer(o).clear(!0),
              null == this._lastZlevel || l || s.configLayer(this._lastZlevel, { motionBlur: !1 }),
              this._showEffect(e) &&
                r &&
                (l ||
                  s.configLayer(o, {
                    motionBlur: !0,
                    lastFrameAlpha: Math.max(Math.min(r / 10 + 0.9, 1), 0)
                  })),
              a.updateData(i);
            var u = e.get('clip', !0) && h(e.coordinateSystem, !1, e);
            u ? this.group.setClipPath(u) : this.group.removeClipPath(),
              (this._lastZlevel = o),
              (this._finished = !0);
          },
          incrementalPrepareRender: function(e, t, n) {
            var i = e.getData();
            this._updateLineDraw(i, e).incrementalPrepareUpdate(i),
              this._clearLayer(n),
              (this._finished = !1);
          },
          incrementalRender: function(e, t, n) {
            this._lineDraw.incrementalUpdate(e, t.getData()),
              (this._finished = e.end === t.getData().count());
          },
          updateTransform: function(e, t, n) {
            var i = e.getData(),
              a = e.pipelineContext;
            if (!this._finished || a.large || a.progressiveRender) return { update: !0 };
            var o = c.reset(e);
            o.progress && o.progress({ start: 0, end: i.count() }, i),
              this._lineDraw.updateLayout(),
              this._clearLayer(n);
          },
          _updateLineDraw: function(e, t) {
            var n = this._lineDraw,
              i = this._showEffect(t),
              c = !!t.get('polyline'),
              h = t.pipelineContext.large;
            return (
              (n && i === this._hasEffet && c === this._isPolyline && h === this._isLargeDraw) ||
                (n && n.remove(),
                (n = this._lineDraw = h ? new u() : new a(c ? (i ? l : s) : i ? o : r)),
                (this._hasEffet = i),
                (this._isPolyline = c),
                (this._isLargeDraw = h),
                this.group.removeAll()),
              this.group.add(n.group),
              n
            );
          },
          _showEffect: function(e) {
            return !!e.get('effect.show');
          },
          _clearLayer: function(e) {
            var t = e.getZr();
            'svg' === t.painter.getType() ||
              null == this._lastZlevel ||
              t.painter.getLayer(this._lastZlevel).clear(!0);
          },
          remove: function(e, t) {
            this._lineDraw && this._lineDraw.remove(), (this._lineDraw = null), this._clearLayer(t);
          },
          dispose: function() {}
        });
      e.exports = d;
    },
    function(e, t, n) {
      var i = n(448),
        a = n(2),
        o = n(447),
        r = n(28);
      function s(e, t, n) {
        o.call(this, e, t, n), (this._lastFrame = 0), (this._lastFramePercent = 0);
      }
      var l = s.prototype;
      (l.createLine = function(e, t, n) {
        return new i(e, t, n);
      }),
        (l.updateAnimationPoints = function(e, t) {
          this._points = t;
          for (var n = [0], i = 0, a = 1; a < t.length; a++) {
            var o = t[a - 1],
              s = t[a];
            (i += r.dist(o, s)), n.push(i);
          }
          if (0 !== i) {
            for (a = 0; a < n.length; a++) n[a] /= i;
            (this._offsets = n), (this._length = i);
          }
        }),
        (l.getLineLength = function(e) {
          return this._length;
        }),
        (l.updateSymbolPosition = function(e) {
          var t = e.__t,
            n = this._points,
            i = this._offsets,
            a = n.length;
          if (i) {
            var o = this._lastFrame;
            if (t < this._lastFramePercent) {
              for (s = Math.min(o + 1, a - 1); s >= 0 && !(i[s] <= t); s--);
              s = Math.min(s, a - 2);
            } else {
              for (var s = o; s < a && !(i[s] > t); s++);
              s = Math.min(s - 1, a - 2);
            }
            r.lerp(e.position, n[s], n[s + 1], (t - i[s]) / (i[s + 1] - i[s]));
            var l = n[s + 1][0] - n[s][0],
              u = n[s + 1][1] - n[s][1];
            (e.rotation = -Math.atan2(u, l) - Math.PI / 2),
              (this._lastFrame = s),
              (this._lastFramePercent = t),
              (e.ignore = !1);
          }
        }),
        a.inherits(s, o);
      var u = s;
      e.exports = u;
    },
    function(e, t, n) {
      var i = n(6),
        a = n(290),
        o = n(405),
        r = n(406),
        s = i.extendShape({
          shape: { polyline: !1, curveness: 0, segs: [] },
          buildPath: function(e, t) {
            var n = t.segs,
              i = t.curveness;
            if (t.polyline)
              for (var a = 0; a < n.length; ) {
                var o = n[a++];
                if (o > 0) {
                  e.moveTo(n[a++], n[a++]);
                  for (var r = 1; r < o; r++) e.lineTo(n[a++], n[a++]);
                }
              }
            else
              for (a = 0; a < n.length; ) {
                var s = n[a++],
                  l = n[a++],
                  u = n[a++],
                  c = n[a++];
                if ((e.moveTo(s, l), i > 0)) {
                  var h = (s + u) / 2 - (l - c) * i,
                    d = (l + c) / 2 - (u - s) * i;
                  e.quadraticCurveTo(h, d, u, c);
                } else e.lineTo(u, c);
              }
          },
          findDataIndex: function(e, t) {
            var n = this.shape,
              i = n.segs,
              a = n.curveness;
            if (n.polyline)
              for (var s = 0, l = 0; l < i.length; ) {
                var u = i[l++];
                if (u > 0)
                  for (var c = i[l++], h = i[l++], d = 1; d < u; d++) {
                    var p = i[l++],
                      g = i[l++];
                    if (o.containStroke(c, h, p, g)) return s;
                  }
                s++;
              }
            else
              for (s = 0, l = 0; l < i.length; ) {
                (c = i[l++]), (h = i[l++]), (p = i[l++]), (g = i[l++]);
                if (a > 0) {
                  var f = (c + p) / 2 - (h - g) * a,
                    m = (h + g) / 2 - (p - c) * a;
                  if (r.containStroke(c, h, f, m, p, g)) return s;
                } else if (o.containStroke(c, h, p, g)) return s;
                s++;
              }
            return -1;
          }
        });
      function l() {
        this.group = new i.Group();
      }
      var u = l.prototype;
      (u.isPersistent = function() {
        return !this._incremental;
      }),
        (u.updateData = function(e) {
          this.group.removeAll();
          var t = new s({ rectHover: !0, cursor: 'default' });
          t.setShape({ segs: e.getLayout('linesPoints') }),
            this._setCommon(t, e),
            this.group.add(t),
            (this._incremental = null);
        }),
        (u.incrementalPrepareUpdate = function(e) {
          this.group.removeAll(),
            this._clearIncremental(),
            e.count() > 5e5
              ? (this._incremental || (this._incremental = new a({ silent: !0 })),
                this.group.add(this._incremental))
              : (this._incremental = null);
        }),
        (u.incrementalUpdate = function(e, t) {
          var n = new s();
          n.setShape({ segs: t.getLayout('linesPoints') }),
            this._setCommon(n, t, !!this._incremental),
            this._incremental
              ? this._incremental.addDisplayable(n, !0)
              : ((n.rectHover = !0),
                (n.cursor = 'default'),
                (n.__startIndex = e.start),
                this.group.add(n));
        }),
        (u.remove = function() {
          this._clearIncremental(), (this._incremental = null), this.group.removeAll();
        }),
        (u._setCommon = function(e, t, n) {
          var i = t.hostModel;
          e.setShape({ polyline: i.get('polyline'), curveness: i.get('lineStyle.curveness') }),
            e.useStyle(i.getModel('lineStyle').getLineStyle()),
            (e.style.strokeNoScale = !0);
          var a = t.getVisual('color');
          a && e.setStyle('stroke', a),
            e.setStyle('fill'),
            n ||
              ((e.seriesIndex = i.seriesIndex),
              e.on('mousemove', function(t) {
                e.dataIndex = null;
                var n = e.findDataIndex(t.offsetX, t.offsetY);
                n > 0 && (e.dataIndex = n + e.__startIndex);
              }));
        }),
        (u._clearIncremental = function() {
          var e = this._incremental;
          e && e.clearDisplaybles();
        });
      var c = l;
      e.exports = c;
    },
    function(e, t) {
      function n(e) {
        return e instanceof Array || (e = [e, e]), e;
      }
      var i = 'lineStyle.opacity'.split('.'),
        a = {
          seriesType: 'lines',
          reset: function(e, t, a) {
            var o = n(e.get('symbol')),
              r = n(e.get('symbolSize')),
              s = e.getData();
            return (
              s.setVisual('fromSymbol', o && o[0]),
              s.setVisual('toSymbol', o && o[1]),
              s.setVisual('fromSymbolSize', r && r[0]),
              s.setVisual('toSymbolSize', r && r[1]),
              s.setVisual('opacity', e.get(i)),
              {
                dataEach: s.hasItemOption
                  ? function(e, t) {
                      var a = e.getItemModel(t),
                        o = n(a.getShallow('symbol', !0)),
                        r = n(a.getShallow('symbolSize', !0)),
                        s = a.get(i);
                      o[0] && e.setItemVisual(t, 'fromSymbol', o[0]),
                        o[1] && e.setItemVisual(t, 'toSymbol', o[1]),
                        r[0] && e.setItemVisual(t, 'fromSymbolSize', r[0]),
                        r[1] && e.setItemVisual(t, 'toSymbolSize', r[1]),
                        e.setItemVisual(t, 'opacity', s);
                    }
                  : null
              }
            );
          }
        };
      e.exports = a;
    },
    function(e, t, n) {
      n(911), n(912);
    },
    function(e, t, n) {
      var i = n(38),
        a = n(79),
        o = n(63),
        r = i.extend({
          type: 'series.heatmap',
          getInitialData: function(e, t) {
            return a(this.getSource(), this, { generateCoord: 'value' });
          },
          preventIncremental: function() {
            var e = o.get(this.get('coordinateSystem'));
            if (e && e.dimensions) return 'lng' === e.dimensions[0] && 'lat' === e.dimensions[1];
          },
          defaultOption: {
            coordinateSystem: 'cartesian2d',
            zlevel: 0,
            z: 2,
            geoIndex: 0,
            blurSize: 30,
            pointSize: 20,
            maxOpacity: 1,
            minOpacity: 0
          }
        });
      e.exports = r;
    },
    function(e, t, n) {
      n(23).__DEV__;
      var i = n(4),
        a = n(6),
        o = n(913),
        r = n(2);
      var s = i.extendChartView({
        type: 'heatmap',
        render: function(e, t, n) {
          var i;
          t.eachComponent('visualMap', function(t) {
            t.eachTargetSeries(function(n) {
              n === e && (i = t);
            });
          }),
            this.group.removeAll(),
            (this._incrementalDisplayable = null);
          var a = e.coordinateSystem;
          'cartesian2d' === a.type || 'calendar' === a.type
            ? this._renderOnCartesianAndCalendar(e, n, 0, e.getData().count())
            : (function(e) {
                var t = e.dimensions;
                return 'lng' === t[0] && 'lat' === t[1];
              })(a) && this._renderOnGeo(a, e, i, n);
        },
        incrementalPrepareRender: function(e, t, n) {
          this.group.removeAll();
        },
        incrementalRender: function(e, t, n, i) {
          t.coordinateSystem && this._renderOnCartesianAndCalendar(t, i, e.start, e.end, !0);
        },
        _renderOnCartesianAndCalendar: function(e, t, n, i, o) {
          var s,
            l,
            u = e.coordinateSystem;
          if ('cartesian2d' === u.type) {
            var c = u.getAxis('x'),
              h = u.getAxis('y');
            (s = c.getBandWidth()), (l = h.getBandWidth());
          }
          for (
            var d = this.group,
              p = e.getData(),
              g = e.getModel('itemStyle').getItemStyle(['color']),
              f = e.getModel('emphasis.itemStyle').getItemStyle(),
              m = e.getModel('label'),
              v = e.getModel('emphasis.label'),
              y = u.type,
              x =
                'cartesian2d' === y
                  ? [p.mapDimension('x'), p.mapDimension('y'), p.mapDimension('value')]
                  : [p.mapDimension('time'), p.mapDimension('value')],
              _ = n;
            _ < i;
            _++
          ) {
            var b;
            if ('cartesian2d' === y) {
              if (isNaN(p.get(x[2], _))) continue;
              var S = u.dataToPoint([p.get(x[0], _), p.get(x[1], _)]);
              b = new a.Rect({
                shape: { x: S[0] - s / 2, y: S[1] - l / 2, width: s, height: l },
                style: { fill: p.getItemVisual(_, 'color'), opacity: p.getItemVisual(_, 'opacity') }
              });
            } else {
              if (isNaN(p.get(x[1], _))) continue;
              b = new a.Rect({
                z2: 1,
                shape: u.dataToRect([p.get(x[0], _)]).contentShape,
                style: { fill: p.getItemVisual(_, 'color'), opacity: p.getItemVisual(_, 'opacity') }
              });
            }
            var w = p.getItemModel(_);
            p.hasItemOption &&
              ((g = w.getModel('itemStyle').getItemStyle(['color'])),
              (f = w.getModel('emphasis.itemStyle').getItemStyle()),
              (m = w.getModel('label')),
              (v = w.getModel('emphasis.label')));
            var M = e.getRawValue(_),
              I = '-';
            M && null != M[2] && (I = M[2]),
              a.setLabelStyle(g, f, m, v, {
                labelFetcher: e,
                labelDataIndex: _,
                defaultText: I,
                isRectText: !0
              }),
              b.setStyle(g),
              a.setHoverStyle(b, p.hasItemOption ? f : r.extend({}, f)),
              (b.incremental = o),
              o && (b.useHoverLayer = !0),
              d.add(b),
              p.setItemGraphicEl(_, b);
          }
        },
        _renderOnGeo: function(e, t, n, i) {
          var s = n.targetVisuals.inRange,
            l = n.targetVisuals.outOfRange,
            u = t.getData(),
            c = this._hmLayer || this._hmLayer || new o();
          (c.blurSize = t.get('blurSize')),
            (c.pointSize = t.get('pointSize')),
            (c.minOpacity = t.get('minOpacity')),
            (c.maxOpacity = t.get('maxOpacity'));
          var h = e.getViewRect().clone(),
            d = e.getRoamTransform();
          h.applyTransform(d);
          var p = Math.max(h.x, 0),
            g = Math.max(h.y, 0),
            f = Math.min(h.width + h.x, i.getWidth()),
            m = Math.min(h.height + h.y, i.getHeight()),
            v = f - p,
            y = m - g,
            x = [u.mapDimension('lng'), u.mapDimension('lat'), u.mapDimension('value')],
            _ = u.mapArray(x, function(t, n, i) {
              var a = e.dataToPoint([t, n]);
              return (a[0] -= p), (a[1] -= g), a.push(i), a;
            }),
            b = n.getExtent(),
            S =
              'visualMap.continuous' === n.type
                ? (function(e, t) {
                    var n = e[1] - e[0];
                    return (
                      (t = [(t[0] - e[0]) / n, (t[1] - e[0]) / n]),
                      function(e) {
                        return e >= t[0] && e <= t[1];
                      }
                    );
                  })(b, n.option.range)
                : (function(e, t, n) {
                    var i = e[1] - e[0],
                      a = (t = r.map(t, function(t) {
                        return {
                          interval: [(t.interval[0] - e[0]) / i, (t.interval[1] - e[0]) / i]
                        };
                      })).length,
                      o = 0;
                    return function(e) {
                      for (var i = o; i < a; i++) {
                        if ((r = t[i].interval)[0] <= e && e <= r[1]) {
                          o = i;
                          break;
                        }
                      }
                      if (i === a)
                        for (i = o - 1; i >= 0; i--) {
                          var r;
                          if ((r = t[i].interval)[0] <= e && e <= r[1]) {
                            o = i;
                            break;
                          }
                        }
                      return i >= 0 && i < a && n[i];
                    };
                  })(b, n.getPieceList(), n.option.selected);
          c.update(
            _,
            v,
            y,
            s.color.getNormalizer(),
            { inRange: s.color.getColorMapper(), outOfRange: l.color.getColorMapper() },
            S
          );
          var w = new a.Image({
            style: { width: v, height: y, x: p, y: g, image: c.canvas },
            silent: !0
          });
          this.group.add(w);
        },
        dispose: function() {}
      });
      e.exports = s;
    },
    function(e, t, n) {
      var i = n(2);
      function a() {
        var e = i.createCanvas();
        (this.canvas = e),
          (this.blurSize = 30),
          (this.pointSize = 20),
          (this.maxOpacity = 1),
          (this.minOpacity = 0),
          (this._gradientPixels = {});
      }
      a.prototype = {
        update: function(e, t, n, i, a, o) {
          var r = this._getBrush(),
            s = this._getGradient(e, a, 'inRange'),
            l = this._getGradient(e, a, 'outOfRange'),
            u = this.pointSize + this.blurSize,
            c = this.canvas,
            h = c.getContext('2d'),
            d = e.length;
          (c.width = t), (c.height = n);
          for (var p = 0; p < d; ++p) {
            var g = e[p],
              f = g[0],
              m = g[1],
              v = i(g[2]);
            (h.globalAlpha = v), h.drawImage(r, f - u, m - u);
          }
          if (!c.width || !c.height) return c;
          for (
            var y = h.getImageData(0, 0, c.width, c.height),
              x = y.data,
              _ = 0,
              b = x.length,
              S = this.minOpacity,
              w = this.maxOpacity - S;
            _ < b;

          ) {
            v = x[_ + 3] / 256;
            var M = 4 * Math.floor(255 * v);
            if (v > 0) {
              var I = o(v) ? s : l;
              v > 0 && (v = v * w + S),
                (x[_++] = I[M]),
                (x[_++] = I[M + 1]),
                (x[_++] = I[M + 2]),
                (x[_++] = I[M + 3] * v * 256);
            } else _ += 4;
          }
          return h.putImageData(y, 0, 0), c;
        },
        _getBrush: function() {
          var e = this._brushCanvas || (this._brushCanvas = i.createCanvas()),
            t = this.pointSize + this.blurSize,
            n = 2 * t;
          (e.width = n), (e.height = n);
          var a = e.getContext('2d');
          return (
            a.clearRect(0, 0, n, n),
            (a.shadowOffsetX = n),
            (a.shadowBlur = this.blurSize),
            (a.shadowColor = '#000'),
            a.beginPath(),
            a.arc(-t, t, this.pointSize, 0, 2 * Math.PI, !0),
            a.closePath(),
            a.fill(),
            e
          );
        },
        _getGradient: function(e, t, n) {
          for (
            var i = this._gradientPixels,
              a = i[n] || (i[n] = new Uint8ClampedArray(1024)),
              o = [0, 0, 0, 0],
              r = 0,
              s = 0;
            s < 256;
            s++
          )
            t[n](s / 255, !0, o),
              (a[r++] = o[0]),
              (a[r++] = o[1]),
              (a[r++] = o[2]),
              (a[r++] = o[3]);
          return a;
        }
      };
      var o = a;
      e.exports = o;
    },
    function(e, t, n) {
      var i = n(4),
        a = n(2);
      n(296), n(915), n(916);
      var o = n(200).layout,
        r = n(103);
      n(156),
        i.registerLayout(a.curry(o, 'pictorialBar')),
        i.registerVisual(r('pictorialBar', 'roundRect'));
    },
    function(e, t, n) {
      var i = n(431).extend({
          type: 'series.pictorialBar',
          dependencies: ['grid'],
          defaultOption: {
            symbol: 'circle',
            symbolSize: null,
            symbolRotate: null,
            symbolPosition: null,
            symbolOffset: null,
            symbolMargin: null,
            symbolRepeat: !1,
            symbolRepeatDirection: 'end',
            symbolClip: !1,
            symbolBoundingData: null,
            symbolPatternSize: 400,
            barGap: '-100%',
            progressive: 0,
            hoverAnimation: !1
          },
          getInitialData: function(e) {
            return (e.stack = null), i.superApply(this, 'getInitialData', arguments);
          }
        }),
        a = i;
      e.exports = a;
    },
    function(e, t, n) {
      var i = n(4),
        a = n(2),
        o = n(6),
        r = n(54).createSymbol,
        s = n(16),
        l = s.parsePercent,
        u = s.isNumeric,
        c = n(432).setLabel,
        h = ['itemStyle', 'borderWidth'],
        d = [
          { xy: 'x', wh: 'width', index: 0, posDesc: ['left', 'right'] },
          { xy: 'y', wh: 'height', index: 1, posDesc: ['top', 'bottom'] }
        ],
        p = new o.Circle();
      function g(e, t, n, i) {
        var o = e.getItemLayout(t),
          r = n.get('symbolRepeat'),
          s = n.get('symbolClip'),
          c = n.get('symbolPosition') || 'start',
          d = ((n.get('symbolRotate') || 0) * Math.PI) / 180 || 0,
          g = n.get('symbolPatternSize') || 2,
          m = n.isAnimationEnabled(),
          v = {
            dataIndex: t,
            layout: o,
            itemModel: n,
            symbolType: e.getItemVisual(t, 'symbol') || 'circle',
            color: e.getItemVisual(t, 'color'),
            symbolClip: s,
            symbolRepeat: r,
            symbolRepeatDirection: n.get('symbolRepeatDirection'),
            symbolPatternSize: g,
            rotation: d,
            animationModel: m ? n : null,
            hoverAnimation: m && n.get('hoverAnimation'),
            z2: n.getShallow('z', !0) || 0
          };
        !(function(e, t, n, i, o) {
          var r,
            s = i.valueDim,
            l = e.get('symbolBoundingData'),
            u = i.coordSys.getOtherAxis(i.coordSys.getBaseAxis()),
            c = u.toGlobalCoord(u.dataToCoord(0)),
            h = 1 - +(n[s.wh] <= 0);
          if (a.isArray(l)) {
            var d = [f(u, l[0]) - c, f(u, l[1]) - c];
            d[1] < d[0] && d.reverse(), (r = d[h]);
          } else r = null != l ? f(u, l) - c : t ? i.coordSysExtent[s.index][h] - c : n[s.wh];
          (o.boundingLength = r), t && (o.repeatCutLength = n[s.wh]);
          o.pxSign = r > 0 ? 1 : r < 0 ? -1 : 0;
        })(n, r, o, i, v),
          (function(e, t, n, i, o, r, s, u, c, h) {
            var d = c.valueDim,
              p = c.categoryDim,
              g = Math.abs(n[p.wh]),
              f = e.getItemVisual(t, 'symbolSize');
            a.isArray(f) ? (f = f.slice()) : (null == f && (f = '100%'), (f = [f, f]));
            (f[p.index] = l(f[p.index], g)),
              (f[d.index] = l(f[d.index], i ? g : Math.abs(r))),
              (h.symbolSize = f),
              ((h.symbolScale = [f[0] / u, f[1] / u])[d.index] *= (c.isHorizontal ? -1 : 1) * s);
          })(e, t, o, r, 0, v.boundingLength, v.pxSign, g, i, v),
          (function(e, t, n, i, a) {
            var o = e.get(h) || 0;
            o &&
              (p.attr({ scale: t.slice(), rotation: n }),
              p.updateTransform(),
              (o /= p.getLineScale()),
              (o *= t[i.valueDim.index]));
            a.valueLineWidth = o;
          })(n, v.symbolScale, d, i, v);
        var y = v.symbolSize,
          x = n.get('symbolOffset');
        return (
          a.isArray(x) && (x = [l(x[0], y[0]), l(x[1], y[1])]),
          (function(e, t, n, i, o, r, s, c, h, d, p, g) {
            var f = p.categoryDim,
              m = p.valueDim,
              v = g.pxSign,
              y = Math.max(t[m.index] + c, 0),
              x = y;
            if (i) {
              var _ = Math.abs(h),
                b = a.retrieve(e.get('symbolMargin'), '15%') + '',
                S = !1;
              b.lastIndexOf('!') === b.length - 1 && ((S = !0), (b = b.slice(0, b.length - 1))),
                (b = l(b, t[m.index]));
              var w = Math.max(y + 2 * b, 0),
                M = S ? 0 : 2 * b,
                I = u(i),
                A = I ? i : P((_ + M) / w);
              (w = y + 2 * (b = (_ - A * y) / 2 / (S ? A : A - 1))),
                (M = S ? 0 : 2 * b),
                I || 'fixed' === i || (A = d ? P((Math.abs(d) + M) / w) : 0),
                (x = A * w - M),
                (g.repeatTimes = A),
                (g.symbolMargin = b);
            }
            var T = v * (x / 2),
              D = (g.pathPosition = []);
            (D[f.index] = n[f.wh] / 2),
              (D[m.index] = 'start' === s ? T : 'end' === s ? h - T : h / 2),
              r && ((D[0] += r[0]), (D[1] += r[1]));
            var C = (g.bundlePosition = []);
            (C[f.index] = n[f.xy]), (C[m.index] = n[m.xy]);
            var L = (g.barRectShape = a.extend({}, n));
            (L[m.wh] = v * Math.max(Math.abs(n[m.wh]), Math.abs(D[m.index] + T))),
              (L[f.wh] = n[f.wh]);
            var O = (g.clipShape = {});
            (O[f.xy] = -n[f.xy]), (O[f.wh] = p.ecSize[f.wh]), (O[m.xy] = 0), (O[m.wh] = n[m.wh]);
          })(n, y, o, r, 0, x, c, v.valueLineWidth, v.boundingLength, v.repeatCutLength, i, v),
          v
        );
      }
      function f(e, t) {
        return e.toGlobalCoord(e.dataToCoord(e.scale.parse(t)));
      }
      function m(e) {
        var t = e.symbolPatternSize,
          n = r(e.symbolType, -t / 2, -t / 2, t, t, e.color);
        return n.attr({ culling: !0 }), 'image' !== n.type && n.setStyle({ strokeNoScale: !0 }), n;
      }
      function v(e, t, n, i) {
        var a = e.__pictorialBundle,
          o = n.symbolSize,
          r = n.valueLineWidth,
          s = n.pathPosition,
          l = t.valueDim,
          u = n.repeatTimes || 0,
          c = 0,
          h = o[t.valueDim.index] + r + 2 * n.symbolMargin;
        for (
          D(e, function(e) {
            (e.__pictorialAnimationIndex = c),
              (e.__pictorialRepeatTimes = u),
              c < u
                ? C(e, null, g(c), n, i)
                : C(e, null, { scale: [0, 0] }, n, i, function() {
                    a.remove(e);
                  }),
              M(e, n),
              c++;
          });
          c < u;
          c++
        ) {
          var d = m(n);
          (d.__pictorialAnimationIndex = c), (d.__pictorialRepeatTimes = u), a.add(d);
          var p = g(c);
          C(
            d,
            { position: p.position, scale: [0, 0] },
            { scale: p.scale, rotation: p.rotation },
            n,
            i
          ),
            d.on('mouseover', f).on('mouseout', v),
            M(d, n);
        }
        function g(e) {
          var t = s.slice(),
            i = n.pxSign,
            a = e;
          return (
            ('start' === n.symbolRepeatDirection ? i > 0 : i < 0) && (a = u - 1 - e),
            (t[l.index] = h * (a - u / 2 + 0.5) + s[l.index]),
            { position: t, scale: n.symbolScale.slice(), rotation: n.rotation }
          );
        }
        function f() {
          D(e, function(e) {
            e.trigger('emphasis');
          });
        }
        function v() {
          D(e, function(e) {
            e.trigger('normal');
          });
        }
      }
      function y(e, t, n, i) {
        var a = e.__pictorialBundle,
          o = e.__pictorialMainPath;
        o
          ? C(
              o,
              null,
              {
                position: n.pathPosition.slice(),
                scale: n.symbolScale.slice(),
                rotation: n.rotation
              },
              n,
              i
            )
          : ((o = e.__pictorialMainPath = m(n)),
            a.add(o),
            C(
              o,
              { position: n.pathPosition.slice(), scale: [0, 0], rotation: n.rotation },
              { scale: n.symbolScale.slice() },
              n,
              i
            ),
            o
              .on('mouseover', function() {
                this.trigger('emphasis');
              })
              .on('mouseout', function() {
                this.trigger('normal');
              })),
          M(o, n);
      }
      function x(e, t, n) {
        var i = a.extend({}, t.barRectShape),
          r = e.__pictorialBarRect;
        r
          ? C(r, null, { shape: i }, t, n)
          : ((r = e.__pictorialBarRect = new o.Rect({
              z2: 2,
              shape: i,
              silent: !0,
              style: { stroke: 'transparent', fill: 'transparent', lineWidth: 0 }
            })),
            e.add(r));
      }
      function _(e, t, n, i) {
        if (n.symbolClip) {
          var r = e.__pictorialClipPath,
            s = a.extend({}, n.clipShape),
            l = t.valueDim,
            u = n.animationModel,
            c = n.dataIndex;
          if (r) o.updateProps(r, { shape: s }, u, c);
          else {
            (s[l.wh] = 0),
              (r = new o.Rect({ shape: s })),
              e.__pictorialBundle.setClipPath(r),
              (e.__pictorialClipPath = r);
            var h = {};
            (h[l.wh] = n.clipShape[l.wh]),
              o[i ? 'updateProps' : 'initProps'](r, { shape: h }, u, c);
          }
        }
      }
      function b(e, t) {
        var n = e.getItemModel(t);
        return (n.getAnimationDelayParams = S), (n.isAnimationEnabled = w), n;
      }
      function S(e) {
        return { index: e.__pictorialAnimationIndex, count: e.__pictorialRepeatTimes };
      }
      function w() {
        return this.parentModel.isAnimationEnabled() && !!this.getShallow('animation');
      }
      function M(e, t) {
        e.off('emphasis').off('normal');
        var n = t.symbolScale.slice();
        t.hoverAnimation &&
          e
            .on('emphasis', function() {
              this.animateTo({ scale: [1.1 * n[0], 1.1 * n[1]] }, 400, 'elasticOut');
            })
            .on('normal', function() {
              this.animateTo({ scale: n.slice() }, 400, 'elasticOut');
            });
      }
      function I(e, t, n, i) {
        var a = new o.Group(),
          r = new o.Group();
        return (
          a.add(r),
          (a.__pictorialBundle = r),
          r.attr('position', n.bundlePosition.slice()),
          n.symbolRepeat ? v(a, t, n) : y(a, 0, n),
          x(a, n, i),
          _(a, t, n, i),
          (a.__pictorialShapeStr = T(e, n)),
          (a.__pictorialSymbolMeta = n),
          a
        );
      }
      function A(e, t, n, i) {
        var r = i.__pictorialBarRect;
        r && (r.style.text = null);
        var s = [];
        D(i, function(e) {
          s.push(e);
        }),
          i.__pictorialMainPath && s.push(i.__pictorialMainPath),
          i.__pictorialClipPath && (n = null),
          a.each(s, function(e) {
            o.updateProps(e, { scale: [0, 0] }, n, t, function() {
              i.parent && i.parent.remove(i);
            });
          }),
          e.setItemGraphicEl(t, null);
      }
      function T(e, t) {
        return [
          e.getItemVisual(t.dataIndex, 'symbol') || 'none',
          !!t.symbolRepeat,
          !!t.symbolClip
        ].join(':');
      }
      function D(e, t, n) {
        a.each(e.__pictorialBundle.children(), function(i) {
          i !== e.__pictorialBarRect && t.call(n, i);
        });
      }
      function C(e, t, n, i, a, r) {
        t && e.attr(t),
          i.symbolClip && !a
            ? n && e.attr(n)
            : n && o[a ? 'updateProps' : 'initProps'](e, n, i.animationModel, i.dataIndex, r);
      }
      function L(e, t, n) {
        var i = n.color,
          r = n.dataIndex,
          s = n.itemModel,
          l = s.getModel('itemStyle').getItemStyle(['color']),
          u = s.getModel('emphasis.itemStyle').getItemStyle(),
          h = s.getShallow('cursor');
        D(e, function(e) {
          e.setColor(i),
            e.setStyle(a.defaults({ fill: i, opacity: n.opacity }, l)),
            o.setHoverStyle(e, u),
            h && (e.cursor = h),
            (e.z2 = n.z2);
        });
        var d = {},
          p = t.valueDim.posDesc[+(n.boundingLength > 0)],
          g = e.__pictorialBarRect;
        c(g.style, d, s, i, t.seriesModel, r, p), o.setHoverStyle(g, d);
      }
      function P(e) {
        var t = Math.round(e);
        return Math.abs(e - t) < 1e-4 ? t : Math.ceil(e);
      }
      var O = i.extendChartView({
        type: 'pictorialBar',
        render: function(e, t, n) {
          var i = this.group,
            a = e.getData(),
            r = this._data,
            s = e.coordinateSystem,
            l = !!s.getBaseAxis().isHorizontal(),
            u = s.grid.getRect(),
            c = {
              ecSize: { width: n.getWidth(), height: n.getHeight() },
              seriesModel: e,
              coordSys: s,
              coordSysExtent: [
                [u.x, u.x + u.width],
                [u.y, u.y + u.height]
              ],
              isHorizontal: l,
              valueDim: d[+l],
              categoryDim: d[1 - l]
            };
          return (
            a
              .diff(r)
              .add(function(e) {
                if (a.hasValue(e)) {
                  var t = b(a, e),
                    n = g(a, e, t, c),
                    o = I(a, c, n);
                  a.setItemGraphicEl(e, o), i.add(o), L(o, c, n);
                }
              })
              .update(function(e, t) {
                var n = r.getItemGraphicEl(t);
                if (a.hasValue(e)) {
                  var s = b(a, e),
                    l = g(a, e, s, c),
                    u = T(a, l);
                  n &&
                    u !== n.__pictorialShapeStr &&
                    (i.remove(n), a.setItemGraphicEl(e, null), (n = null)),
                    n
                      ? (function(e, t, n) {
                          var i = n.animationModel,
                            a = n.dataIndex,
                            r = e.__pictorialBundle;
                          o.updateProps(r, { position: n.bundlePosition.slice() }, i, a),
                            n.symbolRepeat ? v(e, t, n, !0) : y(e, t, n, !0);
                          x(e, n, !0), _(e, t, n, !0);
                        })(n, c, l)
                      : (n = I(a, c, l, !0)),
                    a.setItemGraphicEl(e, n),
                    (n.__pictorialSymbolMeta = l),
                    i.add(n),
                    L(n, c, l);
                } else i.remove(n);
              })
              .remove(function(e) {
                var t = r.getItemGraphicEl(e);
                t && A(r, e, t.__pictorialSymbolMeta.animationModel, t);
              })
              .execute(),
            (this._data = a),
            this.group
          );
        },
        dispose: a.noop,
        remove: function(e, t) {
          var n = this.group,
            i = this._data;
          e.get('animation')
            ? i &&
              i.eachItemGraphicEl(function(t) {
                A(i, t.dataIndex, e, t);
              })
            : n.removeAll();
        }
      });
      e.exports = O;
    },
    function(e, t, n) {
      var i = n(4);
      n(450), n(927), n(928);
      var a = n(929),
        o = n(930),
        r = n(157);
      i.registerLayout(a), i.registerVisual(o), i.registerProcessor(r('themeRiver'));
    },
    function(e, t, n) {
      var i = n(919);
      n(63).register('single', {
        create: function(e, t) {
          var n = [];
          return (
            e.eachComponent('singleAxis', function(a, o) {
              var r = new i(a, e, t);
              (r.name = 'single_' + o), r.resize(a, t), (a.coordinateSystem = r), n.push(r);
            }),
            e.eachSeries(function(t) {
              if ('singleAxis' === t.get('coordinateSystem')) {
                var n = e.queryComponents({
                  mainType: 'singleAxis',
                  index: t.get('singleAxisIndex'),
                  id: t.get('singleAxisId')
                })[0];
                t.coordinateSystem = n && n.coordinateSystem;
              }
            }),
            n
          );
        },
        dimensions: i.prototype.dimensions
      });
    },
    function(e, t, n) {
      var i = n(920),
        a = n(64),
        o = n(25).getLayoutRect,
        r = n(2).each;
      function s(e, t, n) {
        (this.dimension = 'single'),
          (this.dimensions = ['single']),
          (this._axis = null),
          this._rect,
          this._init(e, t, n),
          (this.model = e);
      }
      s.prototype = {
        type: 'singleAxis',
        axisPointerEnabled: !0,
        constructor: s,
        _init: function(e, t, n) {
          var o = this.dimension,
            r = new i(o, a.createScaleByModel(e), [0, 0], e.get('type'), e.get('position')),
            s = 'category' === r.type;
          (r.onBand = s && e.get('boundaryGap')),
            (r.inverse = e.get('inverse')),
            (r.orient = e.get('orient')),
            (e.axis = r),
            (r.model = e),
            (r.coordinateSystem = this),
            (this._axis = r);
        },
        update: function(e, t) {
          e.eachSeries(function(e) {
            if (e.coordinateSystem === this) {
              var t = e.getData();
              r(
                t.mapDimension(this.dimension, !0),
                function(e) {
                  this._axis.scale.unionExtentFromData(t, e);
                },
                this
              ),
                a.niceScaleExtent(this._axis.scale, this._axis.model);
            }
          }, this);
        },
        resize: function(e, t) {
          (this._rect = o(
            {
              left: e.get('left'),
              top: e.get('top'),
              right: e.get('right'),
              bottom: e.get('bottom'),
              width: e.get('width'),
              height: e.get('height')
            },
            { width: t.getWidth(), height: t.getHeight() }
          )),
            this._adjustAxis();
        },
        getRect: function() {
          return this._rect;
        },
        _adjustAxis: function() {
          var e = this._rect,
            t = this._axis,
            n = t.isHorizontal(),
            i = n ? [0, e.width] : [0, e.height],
            a = t.reverse ? 1 : 0;
          t.setExtent(i[a], i[1 - a]), this._updateAxisTransform(t, n ? e.x : e.y);
        },
        _updateAxisTransform: function(e, t) {
          var n = e.getExtent(),
            i = n[0] + n[1],
            a = e.isHorizontal();
          (e.toGlobalCoord = a
            ? function(e) {
                return e + t;
              }
            : function(e) {
                return i - e + t;
              }),
            (e.toLocalCoord = a
              ? function(e) {
                  return e - t;
                }
              : function(e) {
                  return i - e + t;
                });
        },
        getAxis: function() {
          return this._axis;
        },
        getBaseAxis: function() {
          return this._axis;
        },
        getAxes: function() {
          return [this._axis];
        },
        getTooltipAxes: function() {
          return { baseAxes: [this.getAxis()] };
        },
        containPoint: function(e) {
          var t = this.getRect(),
            n = this.getAxis();
          return 'horizontal' === n.orient
            ? n.contain(n.toLocalCoord(e[0])) && e[1] >= t.y && e[1] <= t.y + t.height
            : n.contain(n.toLocalCoord(e[1])) && e[0] >= t.y && e[0] <= t.y + t.height;
        },
        pointToData: function(e) {
          var t = this.getAxis();
          return [t.coordToData(t.toLocalCoord(e['horizontal' === t.orient ? 0 : 1]))];
        },
        dataToPoint: function(e) {
          var t = this.getAxis(),
            n = this.getRect(),
            i = [],
            a = 'horizontal' === t.orient ? 0 : 1;
          return (
            e instanceof Array && (e = e[0]),
            (i[a] = t.toGlobalCoord(t.dataToCoord(+e))),
            (i[1 - a] = 0 === a ? n.y + n.height / 2 : n.x + n.width / 2),
            i
          );
        }
      };
      var l = s;
      e.exports = l;
    },
    function(e, t, n) {
      var i = n(2),
        a = n(87),
        o = function(e, t, n, i, o) {
          a.call(this, e, t, n),
            (this.type = i || 'value'),
            (this.position = o || 'bottom'),
            (this.orient = null);
        };
      (o.prototype = {
        constructor: o,
        model: null,
        isHorizontal: function() {
          var e = this.position;
          return 'top' === e || 'bottom' === e;
        },
        pointToData: function(e, t) {
          return this.coordinateSystem.pointToData(e, t)[0];
        },
        toGlobalCoord: null,
        toLocalCoord: null
      }),
        i.inherits(o, a);
      var r = o;
      e.exports = r;
    },
    function(e, t, n) {
      var i = n(2),
        a = n(88),
        o = n(6),
        r = n(451),
        s = n(104),
        l = ['axisLine', 'axisTickLabel', 'axisName'],
        u = s.extend({
          type: 'singleAxis',
          axisPointerClass: 'SingleAxisPointer',
          render: function(e, t, n, o) {
            var s = this.group;
            s.removeAll();
            var c = r.layout(e),
              h = new a(e, c);
            i.each(l, h.add, h),
              s.add(h.getGroup()),
              e.get('splitLine.show') && this._splitLine(e),
              u.superCall(this, 'render', e, t, n, o);
          },
          _splitLine: function(e) {
            var t = e.axis;
            if (!t.scale.isBlank()) {
              var n = e.getModel('splitLine'),
                i = n.getModel('lineStyle'),
                a = i.get('width'),
                r = i.get('color');
              r = r instanceof Array ? r : [r];
              for (
                var s = e.coordinateSystem.getRect(),
                  l = t.isHorizontal(),
                  u = [],
                  c = 0,
                  h = t.getTicksCoords({ tickModel: n }),
                  d = [],
                  p = [],
                  g = 0;
                g < h.length;
                ++g
              ) {
                var f = t.toGlobalCoord(h[g].coord);
                l
                  ? ((d[0] = f), (d[1] = s.y), (p[0] = f), (p[1] = s.y + s.height))
                  : ((d[0] = s.x), (d[1] = f), (p[0] = s.x + s.width), (p[1] = f));
                var m = c++ % r.length;
                (u[m] = u[m] || []),
                  u[m].push(
                    new o.Line({
                      subPixelOptimize: !0,
                      shape: { x1: d[0], y1: d[1], x2: p[0], y2: p[1] },
                      style: { lineWidth: a },
                      silent: !0
                    })
                  );
              }
              for (g = 0; g < u.length; ++g)
                this.group.add(
                  o.mergePath(u[g], {
                    style: { stroke: r[g % r.length], lineDash: i.getLineDash(a), lineWidth: a },
                    silent: !0
                  })
                );
            }
          }
        }),
        c = u;
      e.exports = c;
    },
    function(e, t, n) {
      var i = n(2),
        a = n(37),
        o = n(202),
        r = n(124),
        s = a.extend({
          type: 'singleAxis',
          layoutMode: 'box',
          axis: null,
          coordinateSystem: null,
          getCoordSysModel: function() {
            return this;
          }
        });
      i.merge(s.prototype, r),
        o(
          'single',
          s,
          function(e, t) {
            return t.type || (t.data ? 'category' : 'value');
          },
          {
            left: '5%',
            top: '5%',
            right: '5%',
            bottom: '5%',
            type: 'value',
            position: 'bottom',
            orient: 'horizontal',
            axisLine: { show: !0, lineStyle: { width: 1, type: 'solid' } },
            tooltip: { show: !0 },
            axisTick: { show: !0, length: 6, lineStyle: { width: 1 } },
            axisLabel: { show: !0, interval: 'auto' },
            splitLine: { show: !0, lineStyle: { type: 'dashed', opacity: 0.2 } }
          }
        );
      var l = s;
      e.exports = l;
    },
    function(e, t, n) {
      var i = n(2),
        a = n(18).makeInner,
        o = n(203),
        r = n(452),
        s = i.each,
        l = i.curry,
        u = a();
      function c(e, t, n, a, o) {
        var r = e.axis;
        if (!r.scale.isBlank() && r.containData(t))
          if (e.involveSeries) {
            var l = (function(e, t) {
                var n = t.axis,
                  i = n.dim,
                  a = e,
                  o = [],
                  r = Number.MAX_VALUE,
                  l = -1;
                return (
                  s(t.seriesModels, function(t, u) {
                    var c,
                      h,
                      d = t.getData().mapDimension(i, !0);
                    if (t.getAxisTooltipData) {
                      var p = t.getAxisTooltipData(d, e, n);
                      (h = p.dataIndices), (c = p.nestestValue);
                    } else {
                      if (
                        !(h = t
                          .getData()
                          .indicesOfNearest(d[0], e, 'category' === n.type ? 0.5 : null)).length
                      )
                        return;
                      c = t.getData().get(d[0], h[0]);
                    }
                    if (null != c && isFinite(c)) {
                      var g = e - c,
                        f = Math.abs(g);
                      f <= r &&
                        ((f < r || (g >= 0 && l < 0)) &&
                          ((r = f), (l = g), (a = c), (o.length = 0)),
                        s(h, function(e) {
                          o.push({
                            seriesIndex: t.seriesIndex,
                            dataIndexInside: e,
                            dataIndex: t.getData().getRawIndex(e)
                          });
                        }));
                    }
                  }),
                  { payloadBatch: o, snapToValue: a }
                );
              })(t, e),
              u = l.payloadBatch,
              c = l.snapToValue;
            u[0] && null == o.seriesIndex && i.extend(o, u[0]),
              !a && e.snap && r.containData(c) && null != c && (t = c),
              n.showPointer(e, t, u, o),
              n.showTooltip(e, l, c);
          } else n.showPointer(e, t);
      }
      function h(e, t, n, i) {
        e[t.key] = { value: n, payloadBatch: i };
      }
      function d(e, t, n, i) {
        var a = n.payloadBatch,
          r = t.axis,
          s = r.model,
          l = t.axisPointerModel;
        if (t.triggerTooltip && a.length) {
          var u = t.coordSys.model,
            c = o.makeKey(u),
            h = e.map[c];
          h ||
            ((h = e.map[c] = {
              coordSysId: u.id,
              coordSysIndex: u.componentIndex,
              coordSysType: u.type,
              coordSysMainType: u.mainType,
              dataByAxis: []
            }),
            e.list.push(h)),
            h.dataByAxis.push({
              axisDim: r.dim,
              axisIndex: s.componentIndex,
              axisType: s.type,
              axisId: s.id,
              value: i,
              valueLabelOpt: {
                precision: l.get('label.precision'),
                formatter: l.get('label.formatter')
              },
              seriesDataIndices: a.slice()
            });
        }
      }
      function p(e) {
        var t = e.axis.model,
          n = {},
          i = (n.axisDim = e.axis.dim);
        return (
          (n.axisIndex = n[i + 'AxisIndex'] = t.componentIndex),
          (n.axisName = n[i + 'AxisName'] = t.name),
          (n.axisId = n[i + 'AxisId'] = t.id),
          n
        );
      }
      function g(e) {
        return !e || null == e[0] || isNaN(e[0]) || null == e[1] || isNaN(e[1]);
      }
      e.exports = function(e, t, n) {
        var a = e.currTrigger,
          o = [e.x, e.y],
          f = e,
          m = e.dispatchAction || i.bind(n.dispatchAction, n),
          v = t.getComponent('axisPointer').coordSysAxesInfo;
        if (v) {
          g(o) && (o = r({ seriesIndex: f.seriesIndex, dataIndex: f.dataIndex }, t).point);
          var y = g(o),
            x = f.axesInfo,
            _ = v.axesInfo,
            b = 'leave' === a || g(o),
            S = {},
            w = {},
            M = { list: [], map: {} },
            I = { showPointer: l(h, w), showTooltip: l(d, M) };
          s(v.coordSysMap, function(e, t) {
            var n = y || e.containPoint(o);
            s(v.coordSysAxesInfo[t], function(e, t) {
              var i = e.axis,
                a = (function(e, t) {
                  for (var n = 0; n < (e || []).length; n++) {
                    var i = e[n];
                    if (t.axis.dim === i.axisDim && t.axis.model.componentIndex === i.axisIndex)
                      return i;
                  }
                })(x, e);
              if (!b && n && (!x || a)) {
                var r = a && a.value;
                null != r || y || (r = i.pointToData(o)), null != r && c(e, r, I, !1, S);
              }
            });
          });
          var A = {};
          return (
            s(_, function(e, t) {
              var n = e.linkGroup;
              n &&
                !w[t] &&
                s(n.axesInfo, function(t, i) {
                  var a = w[i];
                  if (t !== e && a) {
                    var o = a.value;
                    n.mapper && (o = e.axis.scale.parse(n.mapper(o, p(t), p(e)))), (A[e.key] = o);
                  }
                });
            }),
            s(A, function(e, t) {
              c(_[t], e, I, !0, S);
            }),
            (function(e, t, n) {
              var i = (n.axesInfo = []);
              s(t, function(t, n) {
                var a = t.axisPointerModel.option,
                  o = e[n];
                o
                  ? (!t.useHandle && (a.status = 'show'),
                    (a.value = o.value),
                    (a.seriesDataIndices = (o.payloadBatch || []).slice()))
                  : !t.useHandle && (a.status = 'hide'),
                  'show' === a.status &&
                    i.push({
                      axisDim: t.axis.dim,
                      axisIndex: t.axis.model.componentIndex,
                      value: a.value
                    });
              });
            })(w, _, S),
            (function(e, t, n, i) {
              if (g(t) || !e.list.length) return void i({ type: 'hideTip' });
              var a = ((e.list[0].dataByAxis[0] || {}).seriesDataIndices || [])[0] || {};
              i({
                type: 'showTip',
                escapeConnect: !0,
                x: t[0],
                y: t[1],
                tooltipOption: n.tooltipOption,
                position: n.position,
                dataIndexInside: a.dataIndexInside,
                dataIndex: a.dataIndex,
                seriesIndex: a.seriesIndex,
                dataByCoordSys: e.list
              });
            })(M, o, e, m),
            (function(e, t, n) {
              var a = n.getZr(),
                o = u(a).axisPointerLastHighlights || {},
                r = (u(a).axisPointerLastHighlights = {});
              s(e, function(e, t) {
                var n = e.axisPointerModel.option;
                'show' === n.status &&
                  s(n.seriesDataIndices, function(e) {
                    var t = e.seriesIndex + ' | ' + e.dataIndex;
                    r[t] = e;
                  });
              });
              var l = [],
                c = [];
              i.each(o, function(e, t) {
                !r[t] && c.push(e);
              }),
                i.each(r, function(e, t) {
                  !o[t] && l.push(e);
                }),
                c.length && n.dispatchAction({ type: 'downplay', escapeConnect: !0, batch: c }),
                l.length && n.dispatchAction({ type: 'highlight', escapeConnect: !0, batch: l });
            })(_, 0, n),
            S
          );
        }
      };
    },
    function(e, t, n) {
      var i = n(4).extendComponentModel({
        type: 'axisPointer',
        coordSysAxesInfo: null,
        defaultOption: {
          show: 'auto',
          triggerOn: null,
          zlevel: 0,
          z: 50,
          type: 'line',
          snap: !1,
          triggerTooltip: !0,
          value: null,
          status: null,
          link: [],
          animation: null,
          animationDurationUpdate: 200,
          lineStyle: { color: '#aaa', width: 1, type: 'solid' },
          shadowStyle: { color: 'rgba(150,150,150,0.3)' },
          label: {
            show: !0,
            formatter: null,
            precision: 'auto',
            margin: 3,
            color: '#fff',
            padding: [5, 7, 5, 7],
            backgroundColor: 'auto',
            borderColor: null,
            borderWidth: 0,
            shadowBlur: 3,
            shadowColor: '#aaa'
          },
          handle: {
            show: !1,
            icon:
              'M10.7,11.9v-1.3H9.3v1.3c-4.9,0.3-8.8,4.4-8.8,9.4c0,5,3.9,9.1,8.8,9.4h1.3c4.9-0.3,8.8-4.4,8.8-9.4C19.5,16.3,15.6,12.2,10.7,11.9z M13.3,24.4H6.7v-1.2h6.6z M13.3,22H6.7v-1.2h6.6z M13.3,19.6H6.7v-1.2h6.6z',
            size: 45,
            margin: 50,
            color: '#333',
            shadowBlur: 3,
            shadowColor: '#aaa',
            shadowOffsetX: 0,
            shadowOffsetY: 2,
            throttle: 40
          }
        }
      });
      e.exports = i;
    },
    function(e, t, n) {
      var i = n(4),
        a = n(453),
        o = i.extendComponentView({
          type: 'axisPointer',
          render: function(e, t, n) {
            var i = t.getComponent('tooltip'),
              o = e.get('triggerOn') || (i && i.get('triggerOn')) || 'mousemove|click';
            a.register('axisPointer', n, function(e, t, n) {
              'none' !== o &&
                ('leave' === e || o.indexOf(e) >= 0) &&
                n({
                  type: 'updateAxisPointer',
                  currTrigger: e,
                  x: t && t.offsetX,
                  y: t && t.offsetY
                });
            });
          },
          remove: function(e, t) {
            a.unregister(t.getZr(), 'axisPointer'), o.superApply(this._model, 'remove', arguments);
          },
          dispose: function(e, t) {
            a.unregister('axisPointer', t), o.superApply(this._model, 'dispose', arguments);
          }
        }),
        r = o;
      e.exports = r;
    },
    function(e, t, n) {
      var i = n(307),
        a = n(207),
        o = n(451),
        r = n(104),
        s = ['x', 'y'],
        l = ['width', 'height'],
        u = i.extend({
          makeElOption: function(e, t, n, i, r) {
            var s = n.axis,
              l = s.coordinateSystem,
              u = d(l, 1 - h(s)),
              p = l.dataToPoint(t)[0],
              g = i.get('type');
            if (g && 'none' !== g) {
              var f = a.buildElStyle(i),
                m = c[g](s, p, u);
              (m.style = f), (e.graphicKey = m.type), (e.pointer = m);
            }
            var v = o.layout(n);
            a.buildCartesianSingleLabelElOption(t, e, v, n, i, r);
          },
          getHandleTransform: function(e, t, n) {
            var i = o.layout(t, { labelInside: !1 });
            return (
              (i.labelMargin = n.get('handle.margin')),
              {
                position: a.getTransformedPosition(t.axis, e, i),
                rotation: i.rotation + (i.labelDirection < 0 ? Math.PI : 0)
              }
            );
          },
          updateHandleTransform: function(e, t, n, i) {
            var a = n.axis,
              o = a.coordinateSystem,
              r = h(a),
              s = d(o, r),
              l = e.position;
            (l[r] += t[r]), (l[r] = Math.min(s[1], l[r])), (l[r] = Math.max(s[0], l[r]));
            var u = d(o, 1 - r),
              c = (u[1] + u[0]) / 2,
              p = [c, c];
            return (
              (p[r] = l[r]),
              {
                position: l,
                rotation: e.rotation,
                cursorPoint: p,
                tooltipOption: { verticalAlign: 'middle' }
              }
            );
          }
        }),
        c = {
          line: function(e, t, n) {
            return {
              type: 'Line',
              subPixelOptimize: !0,
              shape: a.makeLineShape([t, n[0]], [t, n[1]], h(e))
            };
          },
          shadow: function(e, t, n) {
            var i = e.getBandWidth(),
              o = n[1] - n[0];
            return { type: 'Rect', shape: a.makeRectShape([t - i / 2, n[0]], [i, o], h(e)) };
          }
        };
      function h(e) {
        return e.isHorizontal() ? 0 : 1;
      }
      function d(e, t) {
        var n = e.getRect();
        return [n[s[t]], n[s[t]] + n[l[t]]];
      }
      r.registerAxisPointerClass('SingleAxisPointer', u);
      var p = u;
      e.exports = p;
    },
    function(e, t, n) {
      var i = n(38),
        a = n(123),
        o = n(152).getDimensionTypeByAxis,
        r = n(53),
        s = n(2),
        l = n(18).groupData,
        u = n(30).encodeHTML,
        c = i.extend({
          type: 'series.themeRiver',
          dependencies: ['singleAxis'],
          nameMap: null,
          init: function(e) {
            c.superApply(this, 'init', arguments),
              (this.legendDataProvider = function() {
                return this.getRawData();
              });
          },
          fixData: function(e) {
            var t = e.length,
              n = l(e, function(e) {
                return e[2];
              }),
              i = [];
            n.buckets.each(function(e, t) {
              i.push({ name: t, dataList: e });
            });
            for (var a = i.length, o = -1, r = -1, s = 0; s < a; ++s) {
              var u = i[s].dataList.length;
              u > o && ((o = u), (r = s));
            }
            for (var c = 0; c < a; ++c)
              if (c !== r)
                for (var h = i[c].name, d = 0; d < o; ++d) {
                  for (
                    var p = i[r].dataList[d][0], g = i[c].dataList.length, f = -1, m = 0;
                    m < g;
                    ++m
                  ) {
                    if (i[c].dataList[m][0] === p) {
                      f = m;
                      break;
                    }
                  }
                  -1 === f && ((e[t] = []), (e[t][0] = p), (e[t][1] = 0), (e[t][2] = h), t++);
                }
            return e;
          },
          getInitialData: function(e, t) {
            for (
              var n = t
                  .queryComponents({
                    mainType: 'singleAxis',
                    index: this.get('singleAxisIndex'),
                    id: this.get('singleAxisId')
                  })[0]
                  .get('type'),
                i = s.filter(e.data, function(e) {
                  return void 0 !== e[2];
                }),
                l = this.fixData(i || []),
                u = [],
                c = (this.nameMap = s.createHashMap()),
                h = 0,
                d = 0;
              d < l.length;
              ++d
            )
              u.push(l[d][2]), c.get(l[d][2]) || (c.set(l[d][2], h), h++);
            var p = a(l, {
                coordDimensions: ['single'],
                dimensionsDefine: [
                  { name: 'time', type: o(n) },
                  { name: 'value', type: 'float' },
                  { name: 'name', type: 'ordinal' }
                ],
                encodeDefine: { single: 0, value: 1, itemName: 2 }
              }),
              g = new r(p, this);
            return g.initData(l), g;
          },
          getLayerSeries: function() {
            for (var e = this.getData(), t = e.count(), n = [], i = 0; i < t; ++i) n[i] = i;
            var a = e.mapDimension('single'),
              o = l(n, function(t) {
                return e.get('name', t);
              }),
              r = [];
            return (
              o.buckets.each(function(t, n) {
                t.sort(function(t, n) {
                  return e.get(a, t) - e.get(a, n);
                }),
                  r.push({ name: n, indices: t });
              }),
              r
            );
          },
          getAxisTooltipData: function(e, t, n) {
            s.isArray(e) || (e = e ? [e] : []);
            for (
              var i, a = this.getData(), o = this.getLayerSeries(), r = [], l = o.length, u = 0;
              u < l;
              ++u
            ) {
              for (var c = Number.MAX_VALUE, h = -1, d = o[u].indices.length, p = 0; p < d; ++p) {
                var g = a.get(e[0], o[u].indices[p]),
                  f = Math.abs(g - t);
                f <= c && ((i = g), (c = f), (h = o[u].indices[p]));
              }
              r.push(h);
            }
            return { dataIndices: r, nestestValue: i };
          },
          formatTooltip: function(e) {
            var t = this.getData(),
              n = t.getName(e),
              i = t.get(t.mapDimension('value'), e);
            return (isNaN(i) || null == i) && (i = '-'), u(n + ' : ' + i);
          },
          defaultOption: {
            zlevel: 0,
            z: 2,
            coordinateSystem: 'singleAxis',
            boundaryGap: ['10%', '10%'],
            singleAxisIndex: 0,
            animationEasing: 'linear',
            label: { margin: 4, show: !0, position: 'left', color: '#000', fontSize: 11 },
            emphasis: { label: { show: !0 } }
          }
        }),
        h = c;
      e.exports = h;
    },
    function(e, t, n) {
      var i = n(4),
        a = n(427).Polygon,
        o = n(6),
        r = n(2),
        s = r.bind,
        l = r.extend,
        u = n(102),
        c = i.extendChartView({
          type: 'themeRiver',
          init: function() {
            this._layers = [];
          },
          render: function(e, t, n) {
            var i = e.getData(),
              r = this.group,
              c = e.getLayerSeries(),
              h = i.getLayout('layoutInfo'),
              d = h.rect,
              p = h.boundaryGap;
            function g(e) {
              return e.name;
            }
            r.attr('position', [0, d.y + p[0]]);
            var f = new u(this._layersSeries || [], c, g, g),
              m = {};
            function v(t, n, s) {
              var u = this._layers;
              if ('remove' !== t) {
                for (var h, d, p, g = [], f = [], v = c[n].indices, y = 0; y < v.length; y++) {
                  var x = i.getItemLayout(v[y]),
                    _ = x.x,
                    b = x.y0,
                    S = x.y;
                  g.push([_, b]), f.push([_, b + S]), (h = i.getItemVisual(v[y], 'color'));
                }
                var w = i.getItemLayout(v[0]),
                  M = i.getItemModel(v[y - 1]),
                  I = M.getModel('label'),
                  A = I.get('margin');
                if ('add' === t) {
                  var T = (m[n] = new o.Group());
                  (d = new a({
                    shape: {
                      points: g,
                      stackedOnPoints: f,
                      smooth: 0.4,
                      stackedOnSmooth: 0.4,
                      smoothConstraint: !1
                    },
                    z2: 0
                  })),
                    (p = new o.Text({ style: { x: w.x - A, y: w.y0 + w.y / 2 } })),
                    T.add(d),
                    T.add(p),
                    r.add(T),
                    d.setClipPath(
                      (function(e, t, n) {
                        var i = new o.Rect({
                          shape: { x: e.x - 10, y: e.y - 10, width: 0, height: e.height + 20 }
                        });
                        return (
                          o.initProps(
                            i,
                            { shape: { width: e.width + 20, height: e.height + 20 } },
                            t,
                            n
                          ),
                          i
                        );
                      })(d.getBoundingRect(), e, function() {
                        d.removeClipPath();
                      })
                    );
                } else {
                  T = u[s];
                  (d = T.childAt(0)),
                    (p = T.childAt(1)),
                    r.add(T),
                    (m[n] = T),
                    o.updateProps(d, { shape: { points: g, stackedOnPoints: f } }, e),
                    o.updateProps(p, { style: { x: w.x - A, y: w.y0 + w.y / 2 } }, e);
                }
                var D = M.getModel('emphasis.itemStyle'),
                  C = M.getModel('itemStyle');
                o.setTextStyle(p.style, I, {
                  text: I.get('show')
                    ? e.getFormattedLabel(v[y - 1], 'normal') || i.getName(v[y - 1])
                    : null,
                  textVerticalAlign: 'middle'
                }),
                  d.setStyle(l({ fill: h }, C.getItemStyle(['color']))),
                  o.setHoverStyle(d, D.getItemStyle());
              } else r.remove(u[n]);
            }
            f
              .add(s(v, this, 'add'))
              .update(s(v, this, 'update'))
              .remove(s(v, this, 'remove'))
              .execute(),
              (this._layersSeries = c),
              (this._layers = m);
          },
          dispose: function() {}
        });
      e.exports = c;
    },
    function(e, t, n) {
      var i = n(2),
        a = n(16);
      function o(e, t, n) {
        if (e.count())
          for (
            var a,
              o = t.coordinateSystem,
              r = t.getLayerSeries(),
              s = e.mapDimension('single'),
              l = e.mapDimension('value'),
              u = i.map(r, function(t) {
                return i.map(t.indices, function(t) {
                  var n = o.dataToPoint(e.get(s, t));
                  return (n[1] = e.get(l, t)), n;
                });
              }),
              c = (function(e) {
                for (
                  var t = e.length, n = e[0].length, i = [], a = [], o = 0, r = {}, s = 0;
                  s < n;
                  ++s
                ) {
                  for (var l = 0, u = 0; l < t; ++l) u += e[l][s][1];
                  u > o && (o = u), i.push(u);
                }
                for (var c = 0; c < n; ++c) a[c] = (o - i[c]) / 2;
                o = 0;
                for (var h = 0; h < n; ++h) {
                  var d = i[h] + a[h];
                  d > o && (o = d);
                }
                return (r.y0 = a), (r.max = o), r;
              })(u),
              h = c.y0,
              d = n / c.max,
              p = r.length,
              g = r[0].indices.length,
              f = 0;
            f < g;
            ++f
          ) {
            (a = h[f] * d),
              e.setItemLayout(r[0].indices[f], {
                layerIndex: 0,
                x: u[0][f][0],
                y0: a,
                y: u[0][f][1] * d
              });
            for (var m = 1; m < p; ++m)
              (a += u[m - 1][f][1] * d),
                e.setItemLayout(r[m].indices[f], {
                  layerIndex: m,
                  x: u[m][f][0],
                  y0: a,
                  y: u[m][f][1] * d
                });
          }
      }
      e.exports = function(e, t) {
        e.eachSeriesByType('themeRiver', function(e) {
          var t = e.getData(),
            n = e.coordinateSystem,
            i = {},
            r = n.getRect();
          i.rect = r;
          var s = e.get('boundaryGap'),
            l = n.getAxis();
          ((i.boundaryGap = s), 'horizontal' === l.orient)
            ? ((s[0] = a.parsePercent(s[0], r.height)),
              (s[1] = a.parsePercent(s[1], r.height)),
              o(t, e, r.height - s[0] - s[1]))
            : ((s[0] = a.parsePercent(s[0], r.width)),
              (s[1] = a.parsePercent(s[1], r.width)),
              o(t, e, r.width - s[0] - s[1]));
          t.setLayout('layoutInfo', i);
        });
      };
    },
    function(e, t, n) {
      var i = n(2).createHashMap;
      e.exports = function(e) {
        e.eachSeriesByType('themeRiver', function(e) {
          var t = e.getData(),
            n = e.getRawData(),
            a = e.get('color'),
            o = i();
          t.each(function(e) {
            o.set(t.getRawIndex(e), e);
          }),
            n.each(function(i) {
              var r = n.getName(i),
                s = a[(e.nameMap.get(r) - 1) % a.length];
              n.setItemVisual(i, 'color', s);
              var l = o.get(i);
              null != l && t.setItemVisual(l, 'color', s);
            });
        });
      };
    },
    function(e, t, n) {
      var i = n(4),
        a = n(2);
      n(932), n(933), n(935);
      var o = n(204),
        r = n(936),
        s = n(157);
      i.registerVisual(a.curry(o, 'sunburst')),
        i.registerLayout(a.curry(r, 'sunburst')),
        i.registerProcessor(a.curry(s, 'sunburst'));
    },
    function(e, t, n) {
      var i = n(2),
        a = n(38),
        o = n(302),
        r = n(105).wrapTreePathInfo,
        s = a.extend({
          type: 'series.sunburst',
          _viewRoot: null,
          getInitialData: function(e, t) {
            var n = { name: e.name, children: e.data };
            !(function e(t) {
              var n = 0;
              i.each(t.children, function(t) {
                e(t);
                var a = t.value;
                i.isArray(a) && (a = a[0]), (n += a);
              });
              var a = t.value;
              i.isArray(a) && (a = a[0]);
              (null == a || isNaN(a)) && (a = n);
              a < 0 && (a = 0);
              i.isArray(t.value) ? (t.value[0] = a) : (t.value = a);
            })(n);
            var a = e.levels || [],
              r = {};
            return (r.levels = a), o.createTree(n, this, r).data;
          },
          optionUpdated: function() {
            this.resetViewRoot();
          },
          getDataParams: function(e) {
            var t = a.prototype.getDataParams.apply(this, arguments),
              n = this.getData().tree.getNodeByDataIndex(e);
            return (t.treePathInfo = r(n, this)), t;
          },
          defaultOption: {
            zlevel: 0,
            z: 2,
            center: ['50%', '50%'],
            radius: [0, '75%'],
            clockwise: !0,
            startAngle: 90,
            minAngle: 0,
            percentPrecision: 2,
            stillShowZeroSum: !0,
            highlightPolicy: 'descendant',
            nodeClick: 'rootToNode',
            renderLabelForZeroData: !1,
            label: {
              rotate: 'radial',
              show: !0,
              opacity: 1,
              align: 'center',
              position: 'inside',
              distance: 5,
              silent: !0,
              emphasis: {}
            },
            itemStyle: {
              borderWidth: 1,
              borderColor: 'white',
              borderType: 'solid',
              shadowBlur: 0,
              shadowColor: 'rgba(0, 0, 0, 0.2)',
              shadowOffsetX: 0,
              shadowOffsetY: 0,
              opacity: 1,
              emphasis: {},
              highlight: { opacity: 1 },
              downplay: { opacity: 0.9 }
            },
            animationType: 'expansion',
            animationDuration: 1e3,
            animationDurationUpdate: 500,
            animationEasing: 'cubicOut',
            data: [],
            levels: [],
            sort: 'desc'
          },
          getViewRoot: function() {
            return this._viewRoot;
          },
          resetViewRoot: function(e) {
            e ? (this._viewRoot = e) : (e = this._viewRoot);
            var t = this.getRawData().tree.root;
            (e && (e === t || t.contains(e))) || (this._viewRoot = t);
          }
        });
      e.exports = s;
    },
    function(e, t, n) {
      var i = n(2),
        a = n(71),
        o = n(934),
        r = n(102),
        s = a.extend({
          type: 'sunburst',
          init: function() {},
          render: function(e, t, n, a) {
            var s = this;
            (this.seriesModel = e), (this.api = n), (this.ecModel = t);
            var l = e.getData(),
              u = l.tree.root,
              c = e.getViewRoot(),
              h = this.group,
              d = e.get('renderLabelForZeroData'),
              p = [];
            c.eachNode(function(e) {
              p.push(e);
            });
            var g = this._oldChildren || [];
            if (
              ((function(n, a) {
                if (0 === n.length && 0 === a.length) return;
                function s(e) {
                  return e.getId();
                }
                function c(i, r) {
                  !(function(n, i) {
                    d || !n || n.getValue() || (n = null);
                    if (n !== u && i !== u)
                      if (i && i.piece)
                        n
                          ? (i.piece.updateData(!1, n, 'normal', e, t),
                            l.setItemGraphicEl(n.dataIndex, i.piece))
                          : (function(e) {
                              if (!e) return;
                              e.piece && (h.remove(e.piece), (e.piece = null));
                            })(i);
                      else if (n) {
                        var a = new o(n, e, t);
                        h.add(a), l.setItemGraphicEl(n.dataIndex, a);
                      }
                  })(null == i ? null : n[i], null == r ? null : a[r]);
                }
                new r(a, n, s, s)
                  .add(c)
                  .update(c)
                  .remove(i.curry(c, null))
                  .execute();
              })(p, g),
              (function(n, i) {
                if (i.depth > 0) {
                  s.virtualPiece
                    ? s.virtualPiece.updateData(!1, n, 'normal', e, t)
                    : ((s.virtualPiece = new o(n, e, t)), h.add(s.virtualPiece)),
                    i.piece._onclickEvent && i.piece.off('click', i.piece._onclickEvent);
                  var a = function(e) {
                    s._rootToNode(i.parentNode);
                  };
                  (i.piece._onclickEvent = a), s.virtualPiece.on('click', a);
                } else s.virtualPiece && (h.remove(s.virtualPiece), (s.virtualPiece = null));
              })(u, c),
              a && a.highlight && a.highlight.piece)
            ) {
              var f = e.getShallow('highlightPolicy');
              a.highlight.piece.onEmphasis(f);
            } else if (a && a.unhighlight) {
              var m = this.virtualPiece;
              !m && u.children.length && (m = u.children[0].piece), m && m.onNormal();
            }
            this._initEvents(), (this._oldChildren = p);
          },
          dispose: function() {},
          _initEvents: function() {
            var e = this,
              t = function(t) {
                var n = !1;
                e.seriesModel.getViewRoot().eachNode(function(i) {
                  if (!n && i.piece && i.piece.childAt(0) === t.target) {
                    var a = i.getModel().get('nodeClick');
                    if ('rootToNode' === a) e._rootToNode(i);
                    else if ('link' === a) {
                      var o = i.getModel(),
                        r = o.get('link');
                      if (r) {
                        var s = o.get('target', !0) || '_blank';
                        window.open(r, s);
                      }
                    }
                    n = !0;
                  }
                });
              };
            this.group._onclickEvent && this.group.off('click', this.group._onclickEvent),
              this.group.on('click', t),
              (this.group._onclickEvent = t);
          },
          _rootToNode: function(e) {
            e !== this.seriesModel.getViewRoot() &&
              this.api.dispatchAction({
                type: 'sunburstRootToNode',
                from: this.uid,
                seriesId: this.seriesModel.id,
                targetNode: e
              });
          },
          containPoint: function(e, t) {
            var n = t.getData().getItemLayout(0);
            if (n) {
              var i = e[0] - n.cx,
                a = e[1] - n.cy,
                o = Math.sqrt(i * i + a * a);
              return o <= n.r && o >= n.r0;
            }
          }
        });
      e.exports = s;
    },
    function(e, t, n) {
      var i = n(2),
        a = n(6),
        o = { NONE: 'none', DESCENDANT: 'descendant', ANCESTOR: 'ancestor', SELF: 'self' },
        r = 2,
        s = 4;
      function l(e, t, n) {
        a.Group.call(this);
        var i = new a.Sector({ z2: r });
        i.seriesIndex = t.seriesIndex;
        var o = new a.Text({ z2: s, silent: e.getModel('label').get('silent') });
        function l() {
          o.ignore = o.hoverIgnore;
        }
        function u() {
          o.ignore = o.normalIgnore;
        }
        this.add(i),
          this.add(o),
          this.updateData(!0, e, 'normal', t, n),
          this.on('emphasis', l)
            .on('normal', u)
            .on('mouseover', l)
            .on('mouseout', u);
      }
      var u = l.prototype;
      (u.updateData = function(e, t, n, o, r) {
        (this.node = t), (t.piece = this), (o = o || this._seriesModel), (r = r || this._ecModel);
        var s = this.childAt(0);
        s.dataIndex = t.dataIndex;
        var l = t.getModel(),
          u = t.getLayout(),
          c = i.extend({}, u);
        c.label = null;
        var h = (function(e, t, n) {
          var a = e.getVisual('color'),
            o = e.getVisual('visualMeta');
          (o && 0 !== o.length) || (a = null);
          var r = e.getModel('itemStyle').get('color');
          if (r) return r;
          if (a) return a;
          if (0 === e.depth) return n.option.color[0];
          var s = n.option.color.length;
          r =
            n.option.color[
              (function(e) {
                var t = e;
                for (; t.depth > 1; ) t = t.parentNode;
                var n = e.getAncestors()[0];
                return i.indexOf(n.children, t);
              })(e) % s
            ];
          return r;
        })(t, 0, r);
        !(function(e, t, n) {
          t.getData().setItemVisual(e.dataIndex, 'color', n);
        })(t, o, h);
        var d,
          p = l.getModel('itemStyle').getItemStyle();
        if ('normal' === n) d = p;
        else {
          var g = l.getModel(n + '.itemStyle').getItemStyle();
          d = i.merge(g, p);
        }
        (d = i.defaults({ lineJoin: 'bevel', fill: d.fill || h }, d)),
          e
            ? (s.setShape(c),
              (s.shape.r = u.r0),
              a.updateProps(s, { shape: { r: u.r } }, o, t.dataIndex),
              s.useStyle(d))
            : ('object' === typeof d.fill && d.fill.type) ||
              ('object' === typeof s.style.fill && s.style.fill.type)
            ? (a.updateProps(s, { shape: c }, o), s.useStyle(d))
            : a.updateProps(s, { shape: c, style: d }, o),
          this._updateLabel(o, h, n);
        var f = l.getShallow('cursor');
        if ((f && s.attr('cursor', f), e)) {
          var m = o.getShallow('highlightPolicy');
          this._initEvents(s, t, o, m);
        }
        (this._seriesModel = o || this._seriesModel), (this._ecModel = r || this._ecModel);
      }),
        (u.onEmphasis = function(e) {
          var t = this;
          this.node.hostTree.root.eachNode(function(n) {
            var i, a, r;
            n.piece &&
              (t.node === n
                ? n.piece.updateData(!1, n, 'emphasis')
                : ((i = n),
                  (a = t.node),
                  (r = e) !== o.NONE &&
                  (r === o.SELF
                    ? i === a
                    : r === o.ANCESTOR
                    ? i === a || i.isAncestorOf(a)
                    : i === a || i.isDescendantOf(a))
                    ? n.piece.childAt(0).trigger('highlight')
                    : e !== o.NONE && n.piece.childAt(0).trigger('downplay')));
          });
        }),
        (u.onNormal = function() {
          this.node.hostTree.root.eachNode(function(e) {
            e.piece && e.piece.updateData(!1, e, 'normal');
          });
        }),
        (u.onHighlight = function() {
          this.updateData(!1, this.node, 'highlight');
        }),
        (u.onDownplay = function() {
          this.updateData(!1, this.node, 'downplay');
        }),
        (u._updateLabel = function(e, t, n) {
          var o = this.node.getModel(),
            r = o.getModel('label'),
            s = 'normal' === n || 'emphasis' === n ? r : o.getModel(n + '.label'),
            l = o.getModel('emphasis.label'),
            u = i.retrieve(
              e.getFormattedLabel(this.node.dataIndex, n, null, null, 'label'),
              this.node.name
            );
          !1 === I('show') && (u = '');
          var c = this.node.getLayout(),
            h = s.get('minAngle');
          null == h && (h = r.get('minAngle')), (h = (h / 180) * Math.PI);
          var d = c.endAngle - c.startAngle;
          null != h && Math.abs(d) < h && (u = '');
          var p = this.childAt(1);
          a.setLabelStyle(p.style, p.hoverStyle || {}, r, l, {
            defaultText: s.getShallow('show') ? u : null,
            autoColor: t,
            useInsideStyle: !0
          });
          var g,
            f = (c.startAngle + c.endAngle) / 2,
            m = Math.cos(f),
            v = Math.sin(f),
            y = I('position'),
            x = I('distance') || 0,
            _ = I('align');
          'outside' === y
            ? ((g = c.r + x), (_ = f > Math.PI / 2 ? 'right' : 'left'))
            : _ && 'center' !== _
            ? 'left' === _
              ? ((g = c.r0 + x), f > Math.PI / 2 && (_ = 'right'))
              : 'right' === _ && ((g = c.r - x), f > Math.PI / 2 && (_ = 'left'))
            : ((g = (c.r + c.r0) / 2), (_ = 'center')),
            p.attr('style', {
              text: u,
              textAlign: _,
              textVerticalAlign: I('verticalAlign') || 'middle',
              opacity: I('opacity')
            });
          var b = g * m + c.cx,
            S = g * v + c.cy;
          p.attr('position', [b, S]);
          var w = I('rotate'),
            M = 0;
          function I(e) {
            var t = s.get(e);
            return null == t ? r.get(e) : t;
          }
          'radial' === w
            ? (M = -f) < -Math.PI / 2 && (M += Math.PI)
            : 'tangential' === w
            ? (M = Math.PI / 2 - f) > Math.PI / 2
              ? (M -= Math.PI)
              : M < -Math.PI / 2 && (M += Math.PI)
            : 'number' === typeof w && (M = (w * Math.PI) / 180),
            p.attr('rotation', M);
        }),
        (u._initEvents = function(e, t, n, i) {
          e.off('mouseover')
            .off('mouseout')
            .off('emphasis')
            .off('normal');
          var a = this,
            o = function() {
              a.onEmphasis(i);
            },
            r = function() {
              a.onNormal();
            };
          n.isAnimationEnabled() &&
            e
              .on('mouseover', o)
              .on('mouseout', r)
              .on('emphasis', o)
              .on('normal', r)
              .on('downplay', function() {
                a.onDownplay();
              })
              .on('highlight', function() {
                a.onHighlight();
              });
        }),
        i.inherits(l, a.Group);
      var c = l;
      e.exports = c;
    },
    function(e, t, n) {
      var i = n(4),
        a = n(105),
        o = 'sunburstRootToNode';
      i.registerAction({ type: o, update: 'updateView' }, function(e, t) {
        t.eachComponent({ mainType: 'series', subType: 'sunburst', query: e }, function(t, n) {
          var i = a.retrieveTargetInfo(e, [o], t);
          if (i) {
            var r = t.getViewRoot();
            r && (e.direction = a.aboveViewRoot(r, i.node) ? 'rollUp' : 'drillDown'),
              t.resetViewRoot(i.node);
          }
        });
      });
      var r = 'sunburstHighlight';
      i.registerAction({ type: r, update: 'updateView' }, function(e, t) {
        t.eachComponent({ mainType: 'series', subType: 'sunburst', query: e }, function(t, n) {
          var i = a.retrieveTargetInfo(e, [r], t);
          i && (e.highlight = i.node);
        });
      });
      i.registerAction({ type: 'sunburstUnhighlight', update: 'updateView' }, function(e, t) {
        t.eachComponent({ mainType: 'series', subType: 'sunburst', query: e }, function(t, n) {
          e.unhighlight = !0;
        });
      });
    },
    function(e, t, n) {
      var i = n(16).parsePercent,
        a = n(2),
        o = Math.PI / 180;
      function r(e, t) {
        var n = e.children || [];
        (e.children = (function(e, t) {
          if ('function' === typeof t) return e.sort(t);
          var n = 'asc' === t;
          return e.sort(function(e, t) {
            var i = (e.getValue() - t.getValue()) * (n ? 1 : -1);
            return 0 === i ? (e.dataIndex - t.dataIndex) * (n ? -1 : 1) : i;
          });
        })(n, t)),
          n.length &&
            a.each(e.children, function(e) {
              r(e, t);
            });
      }
      e.exports = function(e, t, n, s) {
        t.eachSeriesByType(e, function(e) {
          var t = e.get('center'),
            s = e.get('radius');
          a.isArray(s) || (s = [0, s]), a.isArray(t) || (t = [t, t]);
          var l = n.getWidth(),
            u = n.getHeight(),
            c = Math.min(l, u),
            h = i(t[0], l),
            d = i(t[1], u),
            p = i(s[0], c / 2),
            g = i(s[1], c / 2),
            f = -e.get('startAngle') * o,
            m = e.get('minAngle') * o,
            v = e.getData().tree.root,
            y = e.getViewRoot(),
            x = y.depth,
            _ = e.get('sort');
          null != _ && r(y, _);
          var b = 0;
          a.each(y.children, function(e) {
            !isNaN(e.getValue()) && b++;
          });
          var S = y.getValue(),
            w = (Math.PI / (S || b)) * 2,
            M = y.depth > 0,
            I = y.height - (M ? -1 : 1),
            A = (g - p) / (I || 1),
            T = e.get('clockwise'),
            D = e.get('stillShowZeroSum'),
            C = T ? 1 : -1;
          if (M) {
            var L = p,
              P = p + A,
              O = 2 * Math.PI;
            v.setLayout({
              angle: O,
              startAngle: f,
              endAngle: f + O,
              clockwise: T,
              cx: h,
              cy: d,
              r0: L,
              r: P
            });
          }
          !(function e(t, n) {
            if (t) {
              var o = n;
              if (t !== v) {
                var r = t.getValue(),
                  s = 0 === S && D ? w : r * w;
                s < m && (s = m), (o = n + C * s);
                var l = t.depth - x - (M ? -1 : 1),
                  u = p + A * l,
                  g = p + A * (l + 1),
                  f = t.getModel();
                null != f.get('r0') && (u = i(f.get('r0'), c / 2)),
                  null != f.get('r') && (g = i(f.get('r'), c / 2)),
                  t.setLayout({
                    angle: s,
                    startAngle: n,
                    endAngle: o,
                    clockwise: T,
                    cx: h,
                    cy: d,
                    r0: u,
                    r: g
                  });
              }
              if (t.children && t.children.length) {
                var y = 0;
                a.each(t.children, function(t) {
                  y += e(t, n + y);
                });
              }
              return o - n;
            }
          })(y, f);
        });
      };
    },
    function(e, t, n) {
      n(23).__DEV__;
      var i = n(2),
        a = n(6),
        o = n(295).getDefaultLabel,
        r = n(79),
        s = n(200).getLayoutOnAxis,
        l = n(102),
        u = n(38),
        c = n(36),
        h = n(71),
        d = n(154).createClipPath,
        p = n(938),
        g = n(939),
        f = n(940),
        m = n(941),
        v = n(942),
        y = a.CACHED_LABEL_STYLE_PROPERTIES,
        x = ['itemStyle'],
        _ = ['emphasis', 'itemStyle'],
        b = ['label'],
        S = ['emphasis', 'label'],
        w = 'e\0\0',
        M = { cartesian2d: p, geo: g, singleAxis: f, polar: m, calendar: v };
      function I(e, t, n, i, a) {
        null == n[e] || a || ((t[e] = n[e]), (n[e] = i[e]));
      }
      function A(e, t, n, r) {
        var l = e.get('renderItem'),
          u = e.coordinateSystem,
          c = {};
        u && (c = u.prepareCustoms ? u.prepareCustoms() : M[u.type](u));
        var h,
          d,
          p,
          g,
          f,
          m = i.defaults(
            {
              getWidth: r.getWidth,
              getHeight: r.getHeight,
              getZr: r.getZr,
              getDevicePixelRatio: r.getDevicePixelRatio,
              value: function(e, n) {
                return null == n && (n = h), t.get(t.getDimension(e || 0), n);
              },
              style: function(n, r) {
                null == r && (r = h), w(r);
                var s = d.getModel(x).getItemStyle();
                null != f && (s.fill = f);
                var l = t.getItemVisual(r, 'opacity');
                null != l && (s.opacity = l);
                var u = n ? O(n, p) : p;
                return (
                  a.setTextStyle(s, u, null, { autoColor: f, isRectText: !0 }),
                  (s.text = u.getShallow('show')
                    ? i.retrieve2(e.getFormattedLabel(r, 'normal'), o(t, r))
                    : null),
                  n && k(s, n),
                  s
                );
              },
              styleEmphasis: function(n, r) {
                null == r && (r = h), w(r);
                var s = d.getModel(_).getItemStyle(),
                  l = n ? O(n, g) : g;
                return (
                  a.setTextStyle(s, l, null, { isRectText: !0 }, !0),
                  (s.text = l.getShallow('show')
                    ? i.retrieve3(
                        e.getFormattedLabel(r, 'emphasis'),
                        e.getFormattedLabel(r, 'normal'),
                        o(t, r)
                      )
                    : null),
                  n && k(s, n),
                  s
                );
              },
              visual: function(e, n) {
                return null == n && (n = h), t.getItemVisual(n, e);
              },
              barLayout: function(e) {
                if (u.getBaseAxis) {
                  var t = u.getBaseAxis();
                  return s(i.defaults({ axis: t }, e), r);
                }
              },
              currentSeriesIndices: function() {
                return n.getCurrentSeriesIndices();
              },
              font: function(e) {
                return a.getFont(e, n);
              }
            },
            c.api || {}
          ),
          v = {
            context: {},
            seriesId: e.id,
            seriesName: e.name,
            seriesIndex: e.seriesIndex,
            coordSys: c.coordSys,
            dataInsideLength: t.count(),
            encode: T(e.getData())
          },
          y = !0;
        return function(e, n) {
          return (
            (h = e),
            (y = !0),
            l &&
              l(
                i.defaults(
                  {
                    dataIndexInside: e,
                    dataIndex: t.getRawIndex(e),
                    actionType: n ? n.type : null
                  },
                  v
                ),
                m
              )
          );
        };
        function w(e) {
          null == e && (e = h),
            y &&
              ((d = t.getItemModel(e)),
              (p = d.getModel(b)),
              (g = d.getModel(S)),
              (f = t.getItemVisual(e, 'color')),
              (y = !1));
        }
      }
      function T(e) {
        var t = {};
        return (
          i.each(e.dimensions, function(n, i) {
            var a = e.getDimensionInfo(n);
            if (!a.isExtraCoord) {
              var o = a.coordDim;
              (t[o] = t[o] || [])[a.coordDimIndex] = i;
            }
          }),
          t
        );
      }
      function D(e, t, n, i, a, o) {
        return (e = C(e, t, n, i, a, o, !0)) && o.setItemGraphicEl(t, e), e;
      }
      function C(e, t, n, o, r, s, u) {
        var c,
          h = !n,
          d = (n = n || {}).type,
          p = n.shape,
          g = n.style;
        if (
          (e &&
            (h ||
              (null != d && d !== e.__customGraphicType) ||
              ('path' === d &&
                (c = p) && (c.hasOwnProperty('pathData') || c.hasOwnProperty('d')) &&
                R(p) !== e.__customPathData) ||
              ('image' === d && E(g, 'image') && g.image !== e.__customImagePath) ||
              ('text' === d && E(p, 'text') && g.text !== e.__customText)) &&
            (r.remove(e), (e = null)),
          !h)
        ) {
          var f = !e;
          return (
            !e &&
              (e = (function(e) {
                var t,
                  n = e.type;
                if ('path' === n) {
                  var i = e.shape,
                    o =
                      null != i.width && null != i.height
                        ? { x: i.x || 0, y: i.y || 0, width: i.width, height: i.height }
                        : null,
                    r = R(i);
                  (t = a.makePath(r, null, o, i.layout || 'center')).__customPathData = r;
                } else if ('image' === n) (t = new a.Image({})).__customImagePath = e.style.image;
                else if ('text' === n) (t = new a.Text({})).__customText = e.style.text;
                else if ('group' === n) t = new a.Group();
                else {
                  if ('compoundPath' === n) throw new Error('"compoundPath" is not supported yet.');
                  t = new (a.getShapeClass(n))();
                }
                return (t.__customGraphicType = n), (t.name = e.name), t;
              })(n)),
            (function(e, t, n, o, r, s, l) {
              var u = {},
                c = n.style || {};
              if (
                (n.shape && (u.shape = i.clone(n.shape)),
                n.position && (u.position = n.position.slice()),
                n.scale && (u.scale = n.scale.slice()),
                n.origin && (u.origin = n.origin.slice()),
                n.rotation && (u.rotation = n.rotation),
                'image' === e.type && n.style)
              ) {
                var h = (u.style = {});
                i.each(['x', 'y', 'width', 'height'], function(t) {
                  I(t, h, c, e.style, s);
                });
              }
              if ('text' === e.type && n.style) {
                h = u.style = {};
                i.each(['x', 'y'], function(t) {
                  I(t, h, c, e.style, s);
                }),
                  !c.hasOwnProperty('textFill') && c.fill && (c.textFill = c.fill),
                  !c.hasOwnProperty('textStroke') && c.stroke && (c.textStroke = c.stroke);
              }
              if ('group' !== e.type && (e.useStyle(c), s)) {
                e.style.opacity = 0;
                var d = c.opacity;
                null == d && (d = 1), a.initProps(e, { style: { opacity: d } }, o, t);
              }
              s ? e.attr(u) : a.updateProps(e, u, o, t),
                n.hasOwnProperty('z2') && e.attr('z2', n.z2 || 0),
                n.hasOwnProperty('silent') && e.attr('silent', n.silent),
                n.hasOwnProperty('invisible') && e.attr('invisible', n.invisible),
                n.hasOwnProperty('ignore') && e.attr('ignore', n.ignore),
                n.hasOwnProperty('info') && e.attr('info', n.info);
              var p = n.styleEmphasis;
              a.setElementHoverStyle(e, p), l && a.setAsHighDownDispatcher(e, !1 !== p);
            })(e, t, n, o, 0, f, u),
            'group' === d &&
              (function(e, t, n, i, a) {
                var o = n.children,
                  r = o ? o.length : 0,
                  s = n.$mergeChildren,
                  u = 'byName' === s || n.diffChildrenByName,
                  c = !1 === s;
                if (!r && !u && !c) return;
                if (u)
                  return (
                    (h = {
                      oldChildren: e.children() || [],
                      newChildren: o || [],
                      dataIndex: t,
                      animatableModel: i,
                      group: e,
                      data: a
                    }),
                    void new l(h.oldChildren, h.newChildren, L, L, h)
                      .add(P)
                      .update(P)
                      .remove(N)
                      .execute()
                  );
                var h;
                c && e.removeAll();
                for (var d = 0; d < r; d++) o[d] && C(e.childAt(d), t, o[d], i, e, a);
              })(e, t, n, o, s),
            r.add(e),
            e
          );
        }
      }
      function L(e, t) {
        var n = e && e.name;
        return null != n ? n : w + t;
      }
      function P(e, t) {
        var n = this.context,
          i = null != e ? n.newChildren[e] : null;
        C(null != t ? n.oldChildren[t] : null, n.dataIndex, i, n.animatableModel, n.group, n.data);
      }
      function O(e, t) {
        var n = new c({}, t);
        return (
          i.each(y, function(t, i) {
            e.hasOwnProperty(t) && (n.option[i] = e[t]);
          }),
          n
        );
      }
      function k(e, t) {
        for (var n in t) (!t.hasOwnProperty(n) && y.hasOwnProperty(n)) || (e[n] = t[n]);
      }
      function N(e) {
        var t = this.context,
          n = t.oldChildren[e];
        n && t.group.remove(n);
      }
      function R(e) {
        return e && (e.pathData || e.d);
      }
      function E(e, t) {
        return e && e.hasOwnProperty(t);
      }
      u.extend({
        type: 'series.custom',
        dependencies: ['grid', 'polar', 'geo', 'singleAxis', 'calendar'],
        defaultOption: {
          coordinateSystem: 'cartesian2d',
          zlevel: 0,
          z: 2,
          legendHoverLink: !0,
          useTransform: !0,
          clip: !1
        },
        getInitialData: function(e, t) {
          return r(this.getSource(), this);
        },
        getDataParams: function(e, t, n) {
          var i = u.prototype.getDataParams.apply(this, arguments);
          return n && (i.info = n.info), i;
        }
      }),
        h.extend({
          type: 'custom',
          _data: null,
          render: function(e, t, n, i) {
            var a = this._data,
              o = e.getData(),
              r = this.group,
              s = A(e, o, t, n);
            o.diff(a)
              .add(function(t) {
                D(null, t, s(t, i), e, r, o);
              })
              .update(function(t, n) {
                D(a.getItemGraphicEl(n), t, s(t, i), e, r, o);
              })
              .remove(function(e) {
                var t = a.getItemGraphicEl(e);
                t && r.remove(t);
              })
              .execute();
            var l = e.get('clip', !0) ? d(e.coordinateSystem, !1, e) : null;
            l ? r.setClipPath(l) : r.removeClipPath(), (this._data = o);
          },
          incrementalPrepareRender: function(e, t, n) {
            this.group.removeAll(), (this._data = null);
          },
          incrementalRender: function(e, t, n, i, a) {
            var o = t.getData(),
              r = A(t, o, n, i);
            function s(e) {
              e.isGroup || ((e.incremental = !0), (e.useHoverLayer = !0));
            }
            for (var l = e.start; l < e.end; l++) {
              D(null, l, r(l, a), t, this.group, o).traverse(s);
            }
          },
          dispose: i.noop,
          filterForExposedEvent: function(e, t, n, i) {
            var a = t.element;
            if (null == a || n.name === a) return !0;
            for (; (n = n.parent) && n !== this.group; ) if (n.name === a) return !0;
            return !1;
          }
        });
    },
    function(e, t, n) {
      var i = n(2);
      function a(e, t) {
        return (
          (t = t || [0, 0]),
          i.map(
            ['x', 'y'],
            function(n, i) {
              var a = this.getAxis(n),
                o = t[i],
                r = e[i] / 2;
              return 'category' === a.type
                ? a.getBandWidth()
                : Math.abs(a.dataToCoord(o - r) - a.dataToCoord(o + r));
            },
            this
          )
        );
      }
      e.exports = function(e) {
        var t = e.grid.getRect();
        return {
          coordSys: { type: 'cartesian2d', x: t.x, y: t.y, width: t.width, height: t.height },
          api: {
            coord: function(t) {
              return e.dataToPoint(t);
            },
            size: i.bind(a, e)
          }
        };
      };
    },
    function(e, t, n) {
      var i = n(2);
      function a(e, t) {
        return (
          (t = t || [0, 0]),
          i.map(
            [0, 1],
            function(n) {
              var i = t[n],
                a = e[n] / 2,
                o = [],
                r = [];
              return (
                (o[n] = i - a),
                (r[n] = i + a),
                (o[1 - n] = r[1 - n] = t[1 - n]),
                Math.abs(this.dataToPoint(o)[n] - this.dataToPoint(r)[n])
              );
            },
            this
          )
        );
      }
      e.exports = function(e) {
        var t = e.getBoundingRect();
        return {
          coordSys: {
            type: 'geo',
            x: t.x,
            y: t.y,
            width: t.width,
            height: t.height,
            zoom: e.getZoom()
          },
          api: {
            coord: function(t) {
              return e.dataToPoint(t);
            },
            size: i.bind(a, e)
          }
        };
      };
    },
    function(e, t, n) {
      var i = n(2);
      function a(e, t) {
        var n = this.getAxis(),
          i = t instanceof Array ? t[0] : t,
          a = (e instanceof Array ? e[0] : e) / 2;
        return 'category' === n.type
          ? n.getBandWidth()
          : Math.abs(n.dataToCoord(i - a) - n.dataToCoord(i + a));
      }
      e.exports = function(e) {
        var t = e.getRect();
        return {
          coordSys: { type: 'singleAxis', x: t.x, y: t.y, width: t.width, height: t.height },
          api: {
            coord: function(t) {
              return e.dataToPoint(t);
            },
            size: i.bind(a, e)
          }
        };
      };
    },
    function(e, t, n) {
      var i = n(2);
      function a(e, t) {
        return i.map(
          ['Radius', 'Angle'],
          function(n, i) {
            var a = this['get' + n + 'Axis'](),
              o = t[i],
              r = e[i] / 2,
              s = 'dataTo' + n,
              l = 'category' === a.type ? a.getBandWidth() : Math.abs(a[s](o - r) - a[s](o + r));
            return 'Angle' === n && (l = (l * Math.PI) / 180), l;
          },
          this
        );
      }
      e.exports = function(e) {
        var t = e.getRadiusAxis(),
          n = e.getAngleAxis(),
          o = t.getExtent();
        return (
          o[0] > o[1] && o.reverse(),
          {
            coordSys: { type: 'polar', cx: e.cx, cy: e.cy, r: o[1], r0: o[0] },
            api: {
              coord: i.bind(function(i) {
                var a = t.dataToRadius(i[0]),
                  o = n.dataToAngle(i[1]),
                  r = e.coordToPoint([a, o]);
                return r.push(a, (o * Math.PI) / 180), r;
              }),
              size: i.bind(a, e)
            }
          }
        );
      };
    },
    function(e, t) {
      e.exports = function(e) {
        var t = e.getRect(),
          n = e.getRangeInfo();
        return {
          coordSys: {
            type: 'calendar',
            x: t.x,
            y: t.y,
            width: t.width,
            height: t.height,
            cellWidth: e.getCellWidth(),
            cellHeight: e.getCellHeight(),
            rangeInfo: { start: n.start, end: n.end, weeks: n.weeks, dayCount: n.allDay }
          },
          api: {
            coord: function(t, n) {
              return e.dataToPoint(t, n);
            }
          }
        };
      };
    },
    function(e, t, n) {
      n(156), n(454), n(159);
    },
    function(e, t, n) {
      var i = n(4),
        a = n(2),
        o = n(945);
      n(308),
        n(951),
        n(953),
        n(159),
        n(955),
        i.registerLayout(a.curry(o, 'bar')),
        i.extendComponentView({ type: 'polar' });
    },
    function(e, t, n) {
      var i = n(2),
        a = n(16).parsePercent,
        o = n(72).isDimensionStacked;
      function r(e) {
        return e.get('stack') || '__ec_stack_' + e.seriesIndex;
      }
      function s(e, t) {
        return t.dim + e.model.componentIndex;
      }
      var l = function(e, t, n) {
        var l = {},
          u = (function(e, t) {
            var n = {};
            i.each(e, function(e, t) {
              var i = e.getData(),
                o = e.coordinateSystem,
                l = o.getBaseAxis(),
                u = s(o, l),
                c = l.getExtent(),
                h = 'category' === l.type ? l.getBandWidth() : Math.abs(c[1] - c[0]) / i.count(),
                d = n[u] || {
                  bandWidth: h,
                  remainedWidth: h,
                  autoWidthCount: 0,
                  categoryGap: '20%',
                  gap: '30%',
                  stacks: {}
                },
                p = d.stacks;
              n[u] = d;
              var g = r(e);
              p[g] || d.autoWidthCount++, (p[g] = p[g] || { width: 0, maxWidth: 0 });
              var f = a(e.get('barWidth'), h),
                m = a(e.get('barMaxWidth'), h),
                v = e.get('barGap'),
                y = e.get('barCategoryGap');
              f &&
                !p[g].width &&
                ((f = Math.min(d.remainedWidth, f)), (p[g].width = f), (d.remainedWidth -= f)),
                m && (p[g].maxWidth = m),
                null != v && (d.gap = v),
                null != y && (d.categoryGap = y);
            });
            var o = {};
            return (
              i.each(n, function(e, t) {
                o[t] = {};
                var n = e.stacks,
                  r = e.bandWidth,
                  s = a(e.categoryGap, r),
                  l = a(e.gap, 1),
                  u = e.remainedWidth,
                  c = e.autoWidthCount,
                  h = (u - s) / (c + (c - 1) * l);
                (h = Math.max(h, 0)),
                  i.each(n, function(e, t) {
                    var n = e.maxWidth;
                    n &&
                      n < h &&
                      ((n = Math.min(n, u)),
                      e.width && (n = Math.min(n, e.width)),
                      (u -= n),
                      (e.width = n),
                      c--);
                  }),
                  (h = (u - s) / (c + (c - 1) * l)),
                  (h = Math.max(h, 0));
                var d,
                  p = 0;
                i.each(n, function(e, t) {
                  e.width || (e.width = h), (d = e), (p += e.width * (1 + l));
                }),
                  d && (p -= d.width * l);
                var g = -p / 2;
                i.each(n, function(e, n) {
                  (o[t][n] = o[t][n] || { offset: g, width: e.width }), (g += e.width * (1 + l));
                });
              }),
              o
            );
          })(
            i.filter(t.getSeriesByType(e), function(e) {
              return (
                !t.isSeriesFiltered(e) && e.coordinateSystem && 'polar' === e.coordinateSystem.type
              );
            })
          );
        t.eachSeriesByType(
          e,
          function(e) {
            if ('polar' === e.coordinateSystem.type) {
              var t = e.getData(),
                n = e.coordinateSystem,
                i = n.getBaseAxis(),
                a = s(n, i),
                c = r(e),
                h = u[a][c],
                d = h.offset,
                p = h.width,
                g = n.getOtherAxis(i),
                f = e.coordinateSystem.cx,
                m = e.coordinateSystem.cy,
                v = e.get('barMinHeight') || 0,
                y = e.get('barMinAngle') || 0;
              l[c] = l[c] || [];
              for (
                var x = t.mapDimension(g.dim),
                  _ = t.mapDimension(i.dim),
                  b = o(t, x),
                  S = 'radius' !== i.dim || !e.get('roundCap', !0),
                  w = g.getExtent()[0],
                  M = 0,
                  I = t.count();
                M < I;
                M++
              ) {
                var A = t.get(x, M),
                  T = t.get(_, M);
                if (!isNaN(A)) {
                  var D,
                    C,
                    L,
                    P,
                    O = A >= 0 ? 'p' : 'n',
                    k = w;
                  if (
                    (b && (l[c][T] || (l[c][T] = { p: w, n: w }), (k = l[c][T][O])),
                    'radius' === g.dim)
                  ) {
                    var N = g.dataToRadius(A) - w,
                      R = i.dataToAngle(T);
                    Math.abs(N) < v && (N = (N < 0 ? -1 : 1) * v),
                      (D = k),
                      (C = k + N),
                      (P = (L = R - d) - p),
                      b && (l[c][T][O] = C);
                  } else {
                    var E = g.dataToAngle(A, S) - w,
                      V = i.dataToRadius(T);
                    Math.abs(E) < y && (E = (E < 0 ? -1 : 1) * y),
                      (C = (D = V + d) + p),
                      (L = k),
                      (P = k + E),
                      b && (l[c][T][O] = P);
                  }
                  t.setItemLayout(M, {
                    cx: f,
                    cy: m,
                    r0: D,
                    r: C,
                    startAngle: (-L * Math.PI) / 180,
                    endAngle: (-P * Math.PI) / 180
                  });
                }
              }
            }
          },
          this
        );
      };
      e.exports = l;
    },
    function(e, t, n) {
      var i = n(947),
        a = n(948),
        o = function(e) {
          (this.name = e || ''),
            (this.cx = 0),
            (this.cy = 0),
            (this._radiusAxis = new i()),
            (this._angleAxis = new a()),
            (this._radiusAxis.polar = this._angleAxis.polar = this);
        };
      o.prototype = {
        type: 'polar',
        axisPointerEnabled: !0,
        constructor: o,
        dimensions: ['radius', 'angle'],
        model: null,
        containPoint: function(e) {
          var t = this.pointToCoord(e);
          return this._radiusAxis.contain(t[0]) && this._angleAxis.contain(t[1]);
        },
        containData: function(e) {
          return this._radiusAxis.containData(e[0]) && this._angleAxis.containData(e[1]);
        },
        getAxis: function(e) {
          return this['_' + e + 'Axis'];
        },
        getAxes: function() {
          return [this._radiusAxis, this._angleAxis];
        },
        getAxesByScale: function(e) {
          var t = [],
            n = this._angleAxis,
            i = this._radiusAxis;
          return n.scale.type === e && t.push(n), i.scale.type === e && t.push(i), t;
        },
        getAngleAxis: function() {
          return this._angleAxis;
        },
        getRadiusAxis: function() {
          return this._radiusAxis;
        },
        getOtherAxis: function(e) {
          var t = this._angleAxis;
          return e === t ? this._radiusAxis : t;
        },
        getBaseAxis: function() {
          return (
            this.getAxesByScale('ordinal')[0] ||
            this.getAxesByScale('time')[0] ||
            this.getAngleAxis()
          );
        },
        getTooltipAxes: function(e) {
          var t = null != e && 'auto' !== e ? this.getAxis(e) : this.getBaseAxis();
          return { baseAxes: [t], otherAxes: [this.getOtherAxis(t)] };
        },
        dataToPoint: function(e, t) {
          return this.coordToPoint([
            this._radiusAxis.dataToRadius(e[0], t),
            this._angleAxis.dataToAngle(e[1], t)
          ]);
        },
        pointToData: function(e, t) {
          var n = this.pointToCoord(e);
          return [this._radiusAxis.radiusToData(n[0], t), this._angleAxis.angleToData(n[1], t)];
        },
        pointToCoord: function(e) {
          var t = e[0] - this.cx,
            n = e[1] - this.cy,
            i = this.getAngleAxis(),
            a = i.getExtent(),
            o = Math.min(a[0], a[1]),
            r = Math.max(a[0], a[1]);
          i.inverse ? (o = r - 360) : (r = o + 360);
          var s = Math.sqrt(t * t + n * n);
          (t /= s), (n /= s);
          for (var l = (Math.atan2(-n, t) / Math.PI) * 180, u = l < o ? 1 : -1; l < o || l > r; )
            l += 360 * u;
          return [s, l];
        },
        coordToPoint: function(e) {
          var t = e[0],
            n = (e[1] / 180) * Math.PI;
          return [Math.cos(n) * t + this.cx, -Math.sin(n) * t + this.cy];
        },
        getArea: function() {
          var e = this.getAngleAxis(),
            t = this.getRadiusAxis()
              .getExtent()
              .slice();
          t[0] > t[1] && t.reverse();
          var n = e.getExtent(),
            i = Math.PI / 180;
          return {
            cx: this.cx,
            cy: this.cy,
            r0: t[0],
            r: t[1],
            startAngle: -n[0] * i,
            endAngle: -n[1] * i,
            clockwise: e.inverse,
            contain: function(e, t) {
              var n = e - this.cx,
                i = t - this.cy,
                a = n * n + i * i,
                o = this.r,
                r = this.r0;
              return a <= o * o && a >= r * r;
            }
          };
        }
      };
      var r = o;
      e.exports = r;
    },
    function(e, t, n) {
      var i = n(2),
        a = n(87);
      function o(e, t) {
        a.call(this, 'radius', e, t), (this.type = 'category');
      }
      (o.prototype = {
        constructor: o,
        pointToData: function(e, t) {
          return this.polar.pointToData(e, t)['radius' === this.dim ? 0 : 1];
        },
        dataToRadius: a.prototype.dataToCoord,
        radiusToData: a.prototype.coordToData
      }),
        i.inherits(o, a);
      var r = o;
      e.exports = r;
    },
    function(e, t, n) {
      var i = n(2),
        a = n(52),
        o = n(87),
        r = (0, n(18).makeInner)();
      function s(e, t) {
        (t = t || [0, 360]), o.call(this, 'angle', e, t), (this.type = 'category');
      }
      (s.prototype = {
        constructor: s,
        pointToData: function(e, t) {
          return this.polar.pointToData(e, t)['radius' === this.dim ? 0 : 1];
        },
        dataToAngle: o.prototype.dataToCoord,
        angleToData: o.prototype.coordToData,
        calculateCategoryInterval: function() {
          var e = this.getLabelModel(),
            t = this.scale,
            n = t.getExtent(),
            i = t.count();
          if (n[1] - n[0] < 1) return 0;
          var o = n[0],
            s = this.dataToCoord(o + 1) - this.dataToCoord(o),
            l = Math.abs(s),
            u = a.getBoundingRect(o, e.getFont(), 'center', 'top'),
            c = Math.max(u.height, 7) / l;
          isNaN(c) && (c = 1 / 0);
          var h = Math.max(0, Math.floor(c)),
            d = r(this.model),
            p = d.lastAutoInterval,
            g = d.lastTickCount;
          return (
            null != p && null != g && Math.abs(p - h) <= 1 && Math.abs(g - i) <= 1 && p > h
              ? (h = p)
              : ((d.lastTickCount = i), (d.lastAutoInterval = h)),
            h
          );
        }
      }),
        i.inherits(s, o);
      var l = s;
      e.exports = l;
    },
    function(e, t, n) {
      var i = n(4);
      n(950);
      var a = i.extendComponentModel({
        type: 'polar',
        dependencies: ['polarAxis', 'angleAxis'],
        coordinateSystem: null,
        findAxisModel: function(e) {
          var t;
          return (
            this.ecModel.eachComponent(
              e,
              function(e) {
                e.getCoordSysModel() === this && (t = e);
              },
              this
            ),
            t
          );
        },
        defaultOption: { zlevel: 0, z: 0, center: ['50%', '50%'], radius: '80%' }
      });
      e.exports = a;
    },
    function(e, t, n) {
      var i = n(2),
        a = n(37),
        o = n(202),
        r = n(124),
        s = a.extend({
          type: 'polarAxis',
          axis: null,
          getCoordSysModel: function() {
            return this.ecModel.queryComponents({
              mainType: 'polar',
              index: this.option.polarIndex,
              id: this.option.polarId
            })[0];
          }
        });
      i.merge(s.prototype, r);
      var l = { splitNumber: 5 };
      function u(e, t) {
        return t.type || (t.data ? 'category' : 'value');
      }
      o('angle', s, u, {
        startAngle: 90,
        clockwise: !0,
        splitNumber: 12,
        axisLabel: { rotate: !1 }
      }),
        o('radius', s, u, l);
    },
    function(e, t, n) {
      n(308), n(952);
    },
    function(e, t, n) {
      var i = n(2),
        a = n(6),
        o = n(36),
        r = n(104),
        s = n(88),
        l = ['axisLine', 'axisLabel', 'axisTick', 'splitLine', 'splitArea'];
      function u(e, t, n) {
        t[1] > t[0] && (t = t.slice().reverse());
        var i = e.coordToPoint([t[0], n]),
          a = e.coordToPoint([t[1], n]);
        return { x1: i[0], y1: i[1], x2: a[0], y2: a[1] };
      }
      function c(e) {
        return e.getRadiusAxis().inverse ? 0 : 1;
      }
      function h(e) {
        var t = e[0],
          n = e[e.length - 1];
        t && n && Math.abs(Math.abs(t.coord - n.coord) - 360) < 1e-4 && e.pop();
      }
      var d = r.extend({
        type: 'angleAxis',
        axisPointerClass: 'PolarAxisPointer',
        render: function(e, t) {
          if ((this.group.removeAll(), e.get('show'))) {
            var n = e.axis,
              a = n.polar,
              o = a.getRadiusAxis().getExtent(),
              r = n.getTicksCoords(),
              s = i.map(n.getViewLabels(), function(e) {
                return ((e = i.clone(e)).coord = n.dataToCoord(e.tickValue)), e;
              });
            h(s),
              h(r),
              i.each(
                l,
                function(t) {
                  !e.get(t + '.show') ||
                    (n.scale.isBlank() && 'axisLine' !== t) ||
                    this['_' + t](e, a, r, o, s);
                },
                this
              );
          }
        },
        _axisLine: function(e, t, n, i) {
          var o,
            r = e.getModel('axisLine.lineStyle'),
            s = c(t),
            l = s ? 0 : 1;
          ((o =
            0 === i[l]
              ? new a.Circle({
                  shape: { cx: t.cx, cy: t.cy, r: i[s] },
                  style: r.getLineStyle(),
                  z2: 1,
                  silent: !0
                })
              : new a.Ring({
                  shape: { cx: t.cx, cy: t.cy, r: i[s], r0: i[l] },
                  style: r.getLineStyle(),
                  z2: 1,
                  silent: !0
                })).style.fill = null),
            this.group.add(o);
        },
        _axisTick: function(e, t, n, o) {
          var r = e.getModel('axisTick'),
            s = (r.get('inside') ? -1 : 1) * r.get('length'),
            l = o[c(t)],
            h = i.map(n, function(e) {
              return new a.Line({ shape: u(t, [l, l + s], e.coord) });
            });
          this.group.add(
            a.mergePath(h, {
              style: i.defaults(r.getModel('lineStyle').getLineStyle(), {
                stroke: e.get('axisLine.lineStyle.color')
              })
            })
          );
        },
        _axisLabel: function(e, t, n, r, l) {
          var u = e.getCategories(!0),
            h = e.getModel('axisLabel'),
            d = h.get('margin'),
            p = e.get('triggerEvent');
          i.each(
            l,
            function(n, i) {
              var l = h,
                g = n.tickValue,
                f = r[c(t)],
                m = t.coordToPoint([f + d, n.coord]),
                v = t.cx,
                y = t.cy,
                x = Math.abs(m[0] - v) / f < 0.3 ? 'center' : m[0] > v ? 'left' : 'right',
                _ = Math.abs(m[1] - y) / f < 0.3 ? 'middle' : m[1] > y ? 'top' : 'bottom';
              u && u[g] && u[g].textStyle && (l = new o(u[g].textStyle, h, h.ecModel));
              var b = new a.Text({ silent: s.isLabelSilent(e) });
              this.group.add(b),
                a.setTextStyle(b.style, l, {
                  x: m[0],
                  y: m[1],
                  textFill: l.getTextColor() || e.get('axisLine.lineStyle.color'),
                  text: n.formattedLabel,
                  textAlign: x,
                  textVerticalAlign: _
                }),
                p &&
                  ((b.eventData = s.makeAxisEventDataBase(e)),
                  (b.eventData.targetType = 'axisLabel'),
                  (b.eventData.value = n.rawLabel));
            },
            this
          );
        },
        _splitLine: function(e, t, n, o) {
          var r = e.getModel('splitLine').getModel('lineStyle'),
            s = r.get('color'),
            l = 0;
          s = s instanceof Array ? s : [s];
          for (var c = [], h = 0; h < n.length; h++) {
            var d = l++ % s.length;
            (c[d] = c[d] || []), c[d].push(new a.Line({ shape: u(t, o, n[h].coord) }));
          }
          for (h = 0; h < c.length; h++)
            this.group.add(
              a.mergePath(c[h], {
                style: i.defaults({ stroke: s[h % s.length] }, r.getLineStyle()),
                silent: !0,
                z: e.get('z')
              })
            );
        },
        _splitArea: function(e, t, n, o) {
          if (n.length) {
            var r = e.getModel('splitArea').getModel('areaStyle'),
              s = r.get('color'),
              l = 0;
            s = s instanceof Array ? s : [s];
            for (
              var u = [],
                c = Math.PI / 180,
                h = -n[0].coord * c,
                d = Math.min(o[0], o[1]),
                p = Math.max(o[0], o[1]),
                g = e.get('clockwise'),
                f = 1;
              f < n.length;
              f++
            ) {
              var m = l++ % s.length;
              (u[m] = u[m] || []),
                u[m].push(
                  new a.Sector({
                    shape: {
                      cx: t.cx,
                      cy: t.cy,
                      r0: d,
                      r: p,
                      startAngle: h,
                      endAngle: -n[f].coord * c,
                      clockwise: g
                    },
                    silent: !0
                  })
                ),
                (h = -n[f].coord * c);
            }
            for (f = 0; f < u.length; f++)
              this.group.add(
                a.mergePath(u[f], {
                  style: i.defaults({ fill: s[f % s.length] }, r.getAreaStyle()),
                  silent: !0
                })
              );
          }
        }
      });
      e.exports = d;
    },
    function(e, t, n) {
      n(308), n(954);
    },
    function(e, t, n) {
      var i = n(2),
        a = n(6),
        o = n(88),
        r = n(104),
        s = ['axisLine', 'axisTickLabel', 'axisName'],
        l = ['splitLine', 'splitArea'],
        u = r.extend({
          type: 'radiusAxis',
          axisPointerClass: 'PolarAxisPointer',
          render: function(e, t) {
            if ((this.group.removeAll(), e.get('show'))) {
              var n = e.axis,
                a = n.polar,
                r = a.getAngleAxis(),
                u = n.getTicksCoords(),
                c = r.getExtent()[0],
                h = n.getExtent(),
                d = (function(e, t, n) {
                  return {
                    position: [e.cx, e.cy],
                    rotation: (n / 180) * Math.PI,
                    labelDirection: -1,
                    tickDirection: -1,
                    nameDirection: 1,
                    labelRotate: t.getModel('axisLabel').get('rotate'),
                    z2: 1
                  };
                })(a, e, c),
                p = new o(e, d);
              i.each(s, p.add, p),
                this.group.add(p.getGroup()),
                i.each(
                  l,
                  function(t) {
                    e.get(t + '.show') && !n.scale.isBlank() && this['_' + t](e, a, c, h, u);
                  },
                  this
                );
            }
          },
          _splitLine: function(e, t, n, o, r) {
            var s = e.getModel('splitLine').getModel('lineStyle'),
              l = s.get('color'),
              u = 0;
            l = l instanceof Array ? l : [l];
            for (var c = [], h = 0; h < r.length; h++) {
              var d = u++ % l.length;
              (c[d] = c[d] || []),
                c[d].push(
                  new a.Circle({ shape: { cx: t.cx, cy: t.cy, r: r[h].coord }, silent: !0 })
                );
            }
            for (h = 0; h < c.length; h++)
              this.group.add(
                a.mergePath(c[h], {
                  style: i.defaults({ stroke: l[h % l.length], fill: null }, s.getLineStyle()),
                  silent: !0
                })
              );
          },
          _splitArea: function(e, t, n, o, r) {
            if (r.length) {
              var s = e.getModel('splitArea').getModel('areaStyle'),
                l = s.get('color'),
                u = 0;
              l = l instanceof Array ? l : [l];
              for (var c = [], h = r[0].coord, d = 1; d < r.length; d++) {
                var p = u++ % l.length;
                (c[p] = c[p] || []),
                  c[p].push(
                    new a.Sector({
                      shape: {
                        cx: t.cx,
                        cy: t.cy,
                        r0: h,
                        r: r[d].coord,
                        startAngle: 0,
                        endAngle: 2 * Math.PI
                      },
                      silent: !0
                    })
                  ),
                  (h = r[d].coord);
              }
              for (d = 0; d < c.length; d++)
                this.group.add(
                  a.mergePath(c[d], {
                    style: i.defaults({ fill: l[d % l.length] }, s.getAreaStyle()),
                    silent: !0
                  })
                );
            }
          }
        });
      e.exports = u;
    },
    function(e, t, n) {
      var i = n(30),
        a = n(307),
        o = n(6),
        r = n(207),
        s = n(42),
        l = n(88),
        u = n(104),
        c = a.extend({
          makeElOption: function(e, t, n, a, u) {
            var c = n.axis;
            'angle' === c.dim && (this.animationThreshold = Math.PI / 18);
            var d,
              p = c.polar,
              g = p.getOtherAxis(c).getExtent();
            d = c['dataTo' + i.capitalFirst(c.dim)](t);
            var f = a.get('type');
            if (f && 'none' !== f) {
              var m = r.buildElStyle(a),
                v = h[f](c, p, d, g, m);
              (v.style = m), (e.graphicKey = v.type), (e.pointer = v);
            }
            var y = (function(e, t, n, i, a) {
              var r = t.axis,
                u = r.dataToCoord(e),
                c = i.getAngleAxis().getExtent()[0];
              c = (c / 180) * Math.PI;
              var h,
                d,
                p,
                g = i.getRadiusAxis().getExtent();
              if ('radius' === r.dim) {
                var f = s.create();
                s.rotate(f, f, c),
                  s.translate(f, f, [i.cx, i.cy]),
                  (h = o.applyTransform([u, -a], f));
                var m = t.getModel('axisLabel').get('rotate') || 0,
                  v = l.innerTextLayout(c, (m * Math.PI) / 180, -1);
                (d = v.textAlign), (p = v.textVerticalAlign);
              } else {
                var y = g[1];
                h = i.coordToPoint([y + a, u]);
                var x = i.cx,
                  _ = i.cy;
                (d = Math.abs(h[0] - x) / y < 0.3 ? 'center' : h[0] > x ? 'left' : 'right'),
                  (p = Math.abs(h[1] - _) / y < 0.3 ? 'middle' : h[1] > _ ? 'top' : 'bottom');
              }
              return { position: h, align: d, verticalAlign: p };
            })(t, n, 0, p, a.get('label.margin'));
            r.buildLabelElOption(e, n, a, u, y);
          }
        });
      var h = {
        line: function(e, t, n, i, a) {
          return 'angle' === e.dim
            ? {
                type: 'Line',
                shape: r.makeLineShape(t.coordToPoint([i[0], n]), t.coordToPoint([i[1], n]))
              }
            : { type: 'Circle', shape: { cx: t.cx, cy: t.cy, r: n } };
        },
        shadow: function(e, t, n, i, a) {
          var o = Math.max(1, e.getBandWidth()),
            s = Math.PI / 180;
          return 'angle' === e.dim
            ? {
                type: 'Sector',
                shape: r.makeSectorShape(t.cx, t.cy, i[0], i[1], (-n - o / 2) * s, (o / 2 - n) * s)
              }
            : {
                type: 'Sector',
                shape: r.makeSectorShape(t.cx, t.cy, n - o / 2, n + o / 2, 0, 2 * Math.PI)
              };
        }
      };
      u.registerAxisPointerClass('PolarAxisPointer', c);
      var d = c;
      e.exports = d;
    },
    function(e, t, n) {
      var i = n(4),
        a = n(2);
      function o(e, t) {
        (t.update = 'updateView'),
          i.registerAction(t, function(t, n) {
            var i = {};
            return (
              n.eachComponent({ mainType: 'geo', query: t }, function(n) {
                n[e](t.name);
                var o = n.coordinateSystem;
                a.each(o.regions, function(e) {
                  i[e.name] = n.isSelected(e.name) || !1;
                });
              }),
              { selected: i, name: t.name }
            );
          });
      }
      n(957),
        n(300),
        n(958),
        n(436),
        o('toggleSelected', { type: 'geoToggleSelect', event: 'geoselectchanged' }),
        o('select', { type: 'geoSelect', event: 'geoselected' }),
        o('unSelect', { type: 'geoUnSelect', event: 'geounselected' });
    },
    function(e, t, n) {
      var i = n(2),
        a = n(18),
        o = n(37),
        r = n(36),
        s = n(297),
        l = n(300),
        u = o.extend({
          type: 'geo',
          coordinateSystem: null,
          layoutMode: 'box',
          init: function(e) {
            o.prototype.init.apply(this, arguments), a.defaultEmphasis(e, 'label', ['show']);
          },
          optionUpdated: function() {
            var e = this.option,
              t = this;
            (e.regions = l.getFilledRegions(e.regions, e.map, e.nameMap)),
              (this._optionModelMap = i.reduce(
                e.regions || [],
                function(e, n) {
                  return n.name && e.set(n.name, new r(n, t)), e;
                },
                i.createHashMap()
              )),
              this.updateSelectedMap(e.regions);
          },
          defaultOption: {
            zlevel: 0,
            z: 0,
            show: !0,
            left: 'center',
            top: 'center',
            aspectScale: null,
            silent: !1,
            map: '',
            boundingCoords: null,
            center: null,
            zoom: 1,
            scaleLimit: null,
            label: { show: !1, color: '#000' },
            itemStyle: { borderWidth: 0.5, borderColor: '#444', color: '#eee' },
            emphasis: {
              label: { show: !0, color: 'rgb(100,0,0)' },
              itemStyle: { color: 'rgba(255,215,0,0.8)' }
            },
            regions: []
          },
          getRegionModel: function(e) {
            return this._optionModelMap.get(e) || new r(null, this, this.ecModel);
          },
          getFormattedLabel: function(e, t) {
            var n = this.getRegionModel(e).get(
                'label' + ('normal' === t ? '.' : t + '.') + 'formatter'
              ),
              i = { name: e };
            return 'function' === typeof n
              ? ((i.status = t), n(i))
              : 'string' === typeof n
              ? n.replace('{a}', null != e ? e : '')
              : void 0;
          },
          setZoom: function(e) {
            this.option.zoom = e;
          },
          setCenter: function(e) {
            this.option.center = e;
          }
        });
      i.mixin(u, s);
      var c = u;
      e.exports = c;
    },
    function(e, t, n) {
      var i = n(434),
        a = n(4).extendComponentView({
          type: 'geo',
          init: function(e, t) {
            var n = new i(t, !0);
            (this._mapDraw = n), this.group.add(n.group);
          },
          render: function(e, t, n, i) {
            if (!i || 'geoToggleSelect' !== i.type || i.from !== this.uid) {
              var a = this._mapDraw;
              e.get('show') ? a.draw(e, t, n, this, i) : this._mapDraw.group.removeAll(),
                (this.group.silent = e.get('silent'));
            }
          },
          dispose: function() {
            this._mapDraw && this._mapDraw.remove();
          }
        });
      e.exports = a;
    },
    function(e, t, n) {
      n(960), n(961), n(962);
    },
    function(e, t, n) {
      var i = n(2),
        a = n(25),
        o = n(16),
        r = n(63);
      function s(e, t, n) {
        this._model = e;
      }
      function l(e, t, n, i) {
        var a = n.calendarModel,
          o = n.seriesModel,
          r = a ? a.coordinateSystem : o ? o.coordinateSystem : null;
        return r === this ? r[e](i) : null;
      }
      (s.prototype = {
        constructor: s,
        type: 'calendar',
        dimensions: ['time', 'value'],
        getDimensionsInfo: function() {
          return [{ name: 'time', type: 'time' }, 'value'];
        },
        getRangeInfo: function() {
          return this._rangeInfo;
        },
        getModel: function() {
          return this._model;
        },
        getRect: function() {
          return this._rect;
        },
        getCellWidth: function() {
          return this._sw;
        },
        getCellHeight: function() {
          return this._sh;
        },
        getOrient: function() {
          return this._orient;
        },
        getFirstDayOfWeek: function() {
          return this._firstDayOfWeek;
        },
        getDateInfo: function(e) {
          var t = (e = o.parseDate(e)).getFullYear(),
            n = e.getMonth() + 1;
          n = n < 10 ? '0' + n : n;
          var i = e.getDate();
          i = i < 10 ? '0' + i : i;
          var a = e.getDay();
          return {
            y: t,
            m: n,
            d: i,
            day: (a = Math.abs((a + 7 - this.getFirstDayOfWeek()) % 7)),
            time: e.getTime(),
            formatedDate: t + '-' + n + '-' + i,
            date: e
          };
        },
        getNextNDay: function(e, t) {
          return 0 === (t = t || 0)
            ? this.getDateInfo(e)
            : ((e = new Date(this.getDateInfo(e).time)).setDate(e.getDate() + t),
              this.getDateInfo(e));
        },
        update: function(e, t) {
          (this._firstDayOfWeek = +this._model.getModel('dayLabel').get('firstDay')),
            (this._orient = this._model.get('orient')),
            (this._lineWidth = this._model.getModel('itemStyle').getItemStyle().lineWidth || 0),
            (this._rangeInfo = this._getRangeInfo(this._initRangeOption()));
          var n = this._rangeInfo.weeks || 1,
            o = ['width', 'height'],
            r = this._model.get('cellSize').slice(),
            s = this._model.getBoxLayoutParams(),
            l = 'horizontal' === this._orient ? [n, 7] : [7, n];
          i.each([0, 1], function(e) {
            h(r, e) && (s[o[e]] = r[e] * l[e]);
          });
          var u = { width: t.getWidth(), height: t.getHeight() },
            c = (this._rect = a.getLayoutRect(s, u));
          function h(e, t) {
            return null != e[t] && 'auto' !== e[t];
          }
          i.each([0, 1], function(e) {
            h(r, e) || (r[e] = c[o[e]] / l[e]);
          }),
            (this._sw = r[0]),
            (this._sh = r[1]);
        },
        dataToPoint: function(e, t) {
          i.isArray(e) && (e = e[0]), null == t && (t = !0);
          var n = this.getDateInfo(e),
            a = this._rangeInfo,
            o = n.formatedDate;
          if (t && !(n.time >= a.start.time && n.time < a.end.time + 864e5)) return [NaN, NaN];
          var r = n.day,
            s = this._getRangeInfo([a.start.time, o]).nthWeek;
          return 'vertical' === this._orient
            ? [
                this._rect.x + r * this._sw + this._sw / 2,
                this._rect.y + s * this._sh + this._sh / 2
              ]
            : [
                this._rect.x + s * this._sw + this._sw / 2,
                this._rect.y + r * this._sh + this._sh / 2
              ];
        },
        pointToData: function(e) {
          var t = this.pointToDate(e);
          return t && t.time;
        },
        dataToRect: function(e, t) {
          var n = this.dataToPoint(e, t);
          return {
            contentShape: {
              x: n[0] - (this._sw - this._lineWidth) / 2,
              y: n[1] - (this._sh - this._lineWidth) / 2,
              width: this._sw - this._lineWidth,
              height: this._sh - this._lineWidth
            },
            center: n,
            tl: [n[0] - this._sw / 2, n[1] - this._sh / 2],
            tr: [n[0] + this._sw / 2, n[1] - this._sh / 2],
            br: [n[0] + this._sw / 2, n[1] + this._sh / 2],
            bl: [n[0] - this._sw / 2, n[1] + this._sh / 2]
          };
        },
        pointToDate: function(e) {
          var t = Math.floor((e[0] - this._rect.x) / this._sw) + 1,
            n = Math.floor((e[1] - this._rect.y) / this._sh) + 1,
            i = this._rangeInfo.range;
          return 'vertical' === this._orient
            ? this._getDateByWeeksAndDay(n, t - 1, i)
            : this._getDateByWeeksAndDay(t, n - 1, i);
        },
        convertToPixel: i.curry(l, 'dataToPoint'),
        convertFromPixel: i.curry(l, 'pointToData'),
        _initRangeOption: function() {
          var e = this._model.get('range'),
            t = e;
          if (
            (i.isArray(t) && 1 === t.length && (t = t[0]),
            /^\d{4}$/.test(t) && (e = [t + '-01-01', t + '-12-31']),
            /^\d{4}[\/|-]\d{1,2}$/.test(t))
          ) {
            var n = this.getDateInfo(t),
              a = n.date;
            a.setMonth(a.getMonth() + 1);
            var o = this.getNextNDay(a, -1);
            e = [n.formatedDate, o.formatedDate];
          }
          /^\d{4}[\/|-]\d{1,2}[\/|-]\d{1,2}$/.test(t) && (e = [t, t]);
          var r = this._getRangeInfo(e);
          return r.start.time > r.end.time && e.reverse(), e;
        },
        _getRangeInfo: function(e) {
          var t;
          (e = [this.getDateInfo(e[0]), this.getDateInfo(e[1])])[0].time > e[1].time &&
            ((t = !0), e.reverse());
          var n = Math.floor(e[1].time / 864e5) - Math.floor(e[0].time / 864e5) + 1,
            i = new Date(e[0].time),
            a = i.getDate(),
            o = e[1].date.getDate();
          if ((i.setDate(a + n - 1), i.getDate() !== o))
            for (
              var r = i.getTime() - e[1].time > 0 ? 1 : -1;
              i.getDate() !== o && (i.getTime() - e[1].time) * r > 0;

            )
              (n -= r), i.setDate(a + n - 1);
          var s = Math.floor((n + e[0].day + 6) / 7),
            l = t ? 1 - s : s - 1;
          return (
            t && e.reverse(),
            {
              range: [e[0].formatedDate, e[1].formatedDate],
              start: e[0],
              end: e[1],
              allDay: n,
              weeks: s,
              nthWeek: l,
              fweek: e[0].day,
              lweek: e[1].day
            }
          );
        },
        _getDateByWeeksAndDay: function(e, t, n) {
          var i = this._getRangeInfo(n);
          if (e > i.weeks || (0 === e && t < i.fweek) || (e === i.weeks && t > i.lweek)) return !1;
          var a = 7 * (e - 1) - i.fweek + t,
            o = new Date(i.start.time);
          return o.setDate(i.start.d + a), this.getDateInfo(o);
        }
      }),
        (s.dimensions = s.prototype.dimensions),
        (s.getDimensionsInfo = s.prototype.getDimensionsInfo),
        (s.create = function(e, t) {
          var n = [];
          return (
            e.eachComponent('calendar', function(i) {
              var a = new s(i, e, t);
              n.push(a), (i.coordinateSystem = a);
            }),
            e.eachSeries(function(e) {
              'calendar' === e.get('coordinateSystem') &&
                (e.coordinateSystem = n[e.get('calendarIndex') || 0]);
            }),
            n
          );
        }),
        r.register('calendar', s);
      var u = s;
      e.exports = u;
    },
    function(e, t, n) {
      var i = n(2),
        a = n(37),
        o = n(25),
        r = o.getLayoutParams,
        s = o.sizeCalculable,
        l = o.mergeLayoutParam,
        u = a.extend({
          type: 'calendar',
          coordinateSystem: null,
          defaultOption: {
            zlevel: 0,
            z: 2,
            left: 80,
            top: 60,
            cellSize: 20,
            orient: 'horizontal',
            splitLine: { show: !0, lineStyle: { color: '#000', width: 1, type: 'solid' } },
            itemStyle: { color: '#fff', borderWidth: 1, borderColor: '#ccc' },
            dayLabel: {
              show: !0,
              firstDay: 0,
              position: 'start',
              margin: '50%',
              nameMap: 'en',
              color: '#000'
            },
            monthLabel: {
              show: !0,
              position: 'start',
              margin: 5,
              align: 'center',
              nameMap: 'en',
              formatter: null,
              color: '#000'
            },
            yearLabel: {
              show: !0,
              position: null,
              margin: 30,
              formatter: null,
              color: '#ccc',
              fontFamily: 'sans-serif',
              fontWeight: 'bolder',
              fontSize: 20
            }
          },
          init: function(e, t, n, i) {
            var a = r(e);
            u.superApply(this, 'init', arguments), c(e, a);
          },
          mergeOption: function(e, t) {
            u.superApply(this, 'mergeOption', arguments), c(this.option, e);
          }
        });
      function c(e, t) {
        var n = e.cellSize;
        i.isArray(n) ? 1 === n.length && (n[1] = n[0]) : (n = e.cellSize = [n, n]);
        var a = i.map([0, 1], function(e) {
          return s(t, e) && (n[e] = 'auto'), null != n[e] && 'auto' !== n[e];
        });
        l(e, t, { type: 'box', ignoreSize: a });
      }
      var h = u;
      e.exports = h;
    },
    function(e, t, n) {
      var i = n(4),
        a = n(2),
        o = n(6),
        r = n(30),
        s = n(16),
        l = {
          EN: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
          CN: [
            '\u4e00\u6708',
            '\u4e8c\u6708',
            '\u4e09\u6708',
            '\u56db\u6708',
            '\u4e94\u6708',
            '\u516d\u6708',
            '\u4e03\u6708',
            '\u516b\u6708',
            '\u4e5d\u6708',
            '\u5341\u6708',
            '\u5341\u4e00\u6708',
            '\u5341\u4e8c\u6708'
          ]
        },
        u = {
          EN: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
          CN: ['\u65e5', '\u4e00', '\u4e8c', '\u4e09', '\u56db', '\u4e94', '\u516d']
        },
        c = i.extendComponentView({
          type: 'calendar',
          _tlpoints: null,
          _blpoints: null,
          _firstDayOfMonth: null,
          _firstDayPoints: null,
          render: function(e, t, n) {
            var i = this.group;
            i.removeAll();
            var a = e.coordinateSystem,
              o = a.getRangeInfo(),
              r = a.getOrient();
            this._renderDayRect(e, o, i),
              this._renderLines(e, o, r, i),
              this._renderYearText(e, o, r, i),
              this._renderMonthText(e, r, i),
              this._renderWeekText(e, o, r, i);
          },
          _renderDayRect: function(e, t, n) {
            for (
              var i = e.coordinateSystem,
                a = e.getModel('itemStyle').getItemStyle(),
                r = i.getCellWidth(),
                s = i.getCellHeight(),
                l = t.start.time;
              l <= t.end.time;
              l = i.getNextNDay(l, 1).time
            ) {
              var u = i.dataToRect([l], !1).tl,
                c = new o.Rect({
                  shape: { x: u[0], y: u[1], width: r, height: s },
                  cursor: 'default',
                  style: a
                });
              n.add(c);
            }
          },
          _renderLines: function(e, t, n, i) {
            var a = this,
              o = e.coordinateSystem,
              r = e.getModel('splitLine.lineStyle').getLineStyle(),
              s = e.get('splitLine.show'),
              l = r.lineWidth;
            (this._tlpoints = []),
              (this._blpoints = []),
              (this._firstDayOfMonth = []),
              (this._firstDayPoints = []);
            for (var u = t.start, c = 0; u.time <= t.end.time; c++) {
              d(u.formatedDate), 0 === c && (u = o.getDateInfo(t.start.y + '-' + t.start.m));
              var h = u.date;
              h.setMonth(h.getMonth() + 1), (u = o.getDateInfo(h));
            }
            function d(t) {
              a._firstDayOfMonth.push(o.getDateInfo(t)),
                a._firstDayPoints.push(o.dataToRect([t], !1).tl);
              var l = a._getLinePointsOfOneWeek(e, t, n);
              a._tlpoints.push(l[0]),
                a._blpoints.push(l[l.length - 1]),
                s && a._drawSplitline(l, r, i);
            }
            d(o.getNextNDay(t.end.time, 1).formatedDate),
              s && this._drawSplitline(a._getEdgesPoints(a._tlpoints, l, n), r, i),
              s && this._drawSplitline(a._getEdgesPoints(a._blpoints, l, n), r, i);
          },
          _getEdgesPoints: function(e, t, n) {
            var i = [e[0].slice(), e[e.length - 1].slice()],
              a = 'horizontal' === n ? 0 : 1;
            return (i[0][a] = i[0][a] - t / 2), (i[1][a] = i[1][a] + t / 2), i;
          },
          _drawSplitline: function(e, t, n) {
            var i = new o.Polyline({ z2: 20, shape: { points: e }, style: t });
            n.add(i);
          },
          _getLinePointsOfOneWeek: function(e, t, n) {
            var i = e.coordinateSystem;
            t = i.getDateInfo(t);
            for (var a = [], o = 0; o < 7; o++) {
              var r = i.getNextNDay(t.time, o),
                s = i.dataToRect([r.time], !1);
              (a[2 * r.day] = s.tl), (a[2 * r.day + 1] = s['horizontal' === n ? 'bl' : 'tr']);
            }
            return a;
          },
          _formatterLabel: function(e, t) {
            return 'string' === typeof e && e
              ? r.formatTplSimple(e, t)
              : 'function' === typeof e
              ? e(t)
              : t.nameMap;
          },
          _yearTextPositionControl: function(e, t, n, i, a) {
            t = t.slice();
            var o = ['center', 'bottom'];
            'bottom' === i
              ? ((t[1] += a), (o = ['center', 'top']))
              : 'left' === i
              ? (t[0] -= a)
              : 'right' === i
              ? ((t[0] += a), (o = ['center', 'top']))
              : (t[1] -= a);
            var r = 0;
            return (
              ('left' !== i && 'right' !== i) || (r = Math.PI / 2),
              { rotation: r, position: t, style: { textAlign: o[0], textVerticalAlign: o[1] } }
            );
          },
          _renderYearText: function(e, t, n, i) {
            var a = e.getModel('yearLabel');
            if (a.get('show')) {
              var r = a.get('margin'),
                s = a.get('position');
              s || (s = 'horizontal' !== n ? 'top' : 'left');
              var l = [this._tlpoints[this._tlpoints.length - 1], this._blpoints[0]],
                u = (l[0][0] + l[1][0]) / 2,
                c = (l[0][1] + l[1][1]) / 2,
                h = 'horizontal' === n ? 0 : 1,
                d = {
                  top: [u, l[h][1]],
                  bottom: [u, l[1 - h][1]],
                  left: [l[1 - h][0], c],
                  right: [l[h][0], c]
                },
                p = t.start.y;
              +t.end.y > +t.start.y && (p = p + '-' + t.end.y);
              var g = a.get('formatter'),
                f = { start: t.start.y, end: t.end.y, nameMap: p },
                m = this._formatterLabel(g, f),
                v = new o.Text({ z2: 30 });
              o.setTextStyle(v.style, a, { text: m }),
                v.attr(this._yearTextPositionControl(v, d[s], n, s, r)),
                i.add(v);
            }
          },
          _monthTextPositionControl: function(e, t, n, i, a) {
            var o = 'left',
              r = 'top',
              s = e[0],
              l = e[1];
            return (
              'horizontal' === n
                ? ((l += a), t && (o = 'center'), 'start' === i && (r = 'bottom'))
                : ((s += a), t && (r = 'middle'), 'start' === i && (o = 'right')),
              { x: s, y: l, textAlign: o, textVerticalAlign: r }
            );
          },
          _renderMonthText: function(e, t, n) {
            var i = e.getModel('monthLabel');
            if (i.get('show')) {
              var r = i.get('nameMap'),
                s = i.get('margin'),
                u = i.get('position'),
                c = i.get('align'),
                h = [this._tlpoints, this._blpoints];
              a.isString(r) && (r = l[r.toUpperCase()] || []);
              var d = 'start' === u ? 0 : 1,
                p = 'horizontal' === t ? 0 : 1;
              s = 'start' === u ? -s : s;
              for (var g = 'center' === c, f = 0; f < h[d].length - 1; f++) {
                var m = h[d][f].slice(),
                  v = this._firstDayOfMonth[f];
                if (g) {
                  var y = this._firstDayPoints[f];
                  m[p] = (y[p] + h[0][f + 1][p]) / 2;
                }
                var x = i.get('formatter'),
                  _ = r[+v.m - 1],
                  b = { yyyy: v.y, yy: (v.y + '').slice(2), MM: v.m, M: +v.m, nameMap: _ },
                  S = this._formatterLabel(x, b),
                  w = new o.Text({ z2: 30 });
                a.extend(
                  o.setTextStyle(w.style, i, { text: S }),
                  this._monthTextPositionControl(m, g, t, u, s)
                ),
                  n.add(w);
              }
            }
          },
          _weekTextPositionControl: function(e, t, n, i, a) {
            var o = 'center',
              r = 'middle',
              s = e[0],
              l = e[1],
              u = 'start' === n;
            return (
              'horizontal' === t
                ? ((s = s + i + ((u ? 1 : -1) * a[0]) / 2), (o = u ? 'right' : 'left'))
                : ((l = l + i + ((u ? 1 : -1) * a[1]) / 2), (r = u ? 'bottom' : 'top')),
              { x: s, y: l, textAlign: o, textVerticalAlign: r }
            );
          },
          _renderWeekText: function(e, t, n, i) {
            var r = e.getModel('dayLabel');
            if (r.get('show')) {
              var l = e.coordinateSystem,
                c = r.get('position'),
                h = r.get('nameMap'),
                d = r.get('margin'),
                p = l.getFirstDayOfWeek();
              a.isString(h) && (h = u[h.toUpperCase()] || []);
              var g = l.getNextNDay(t.end.time, 7 - t.lweek).time,
                f = [l.getCellWidth(), l.getCellHeight()];
              (d = s.parsePercent(d, f['horizontal' === n ? 0 : 1])),
                'start' === c && ((g = l.getNextNDay(t.start.time, -(7 + t.fweek)).time), (d = -d));
              for (var m = 0; m < 7; m++) {
                var v,
                  y = l.getNextNDay(g, m),
                  x = l.dataToRect([y.time], !1).center;
                v = Math.abs((m + p) % 7);
                var _ = new o.Text({ z2: 30 });
                a.extend(
                  o.setTextStyle(_.style, r, { text: h[v] }),
                  this._weekTextPositionControl(x, n, c, d, f)
                ),
                  i.add(_);
              }
            }
          }
        });
      e.exports = c;
    },
    function(e, t, n) {
      n(23).__DEV__;
      var i = n(4),
        a = n(2),
        o = n(18),
        r = n(6),
        s = n(25),
        l = n(16).parsePercent,
        u = { path: null, compoundPath: null, group: r.Group, image: r.Image, text: r.Text };
      i.registerPreprocessor(function(e) {
        var t = e.graphic;
        a.isArray(t)
          ? t[0] && t[0].elements
            ? (e.graphic = [e.graphic[0]])
            : (e.graphic = [{ elements: t }])
          : t && !t.elements && (e.graphic = [{ elements: [t] }]);
      });
      var c = i.extendComponentModel({
        type: 'graphic',
        defaultOption: { elements: [], parentId: null },
        _elOptionsToUpdate: null,
        mergeOption: function(e) {
          var t = this.option.elements;
          (this.option.elements = null),
            c.superApply(this, 'mergeOption', arguments),
            (this.option.elements = t);
        },
        optionUpdated: function(e, t) {
          var n = this.option,
            i = (t ? n : e).elements,
            r = (n.elements = t ? [] : n.elements),
            l = [];
          this._flatten(i, l);
          var u = o.mappingToExists(r, l);
          o.makeIdAndName(u);
          var c = (this._elOptionsToUpdate = []);
          a.each(
            u,
            function(e, t) {
              var n = e.option;
              n &&
                (c.push(n),
                (function(e, t) {
                  var n = e.exist;
                  if (
                    ((t.id = e.keyInfo.id), !t.type && n && (t.type = n.type), null == t.parentId)
                  ) {
                    var i = t.parentOption;
                    i ? (t.parentId = i.id) : n && (t.parentId = n.parentId);
                  }
                  t.parentOption = null;
                })(e, n),
                (function(e, t, n) {
                  var i = a.extend({}, n),
                    o = e[t],
                    r = n.$action || 'merge';
                  'merge' === r
                    ? o
                      ? (a.merge(o, i, !0),
                        s.mergeLayoutParam(o, i, { ignoreSize: !0 }),
                        s.copyLayoutParams(n, o))
                      : (e[t] = i)
                    : 'replace' === r
                    ? (e[t] = i)
                    : 'remove' === r && o && (e[t] = null);
                })(r, t, n),
                (function(e, t) {
                  if (!e) return;
                  (e.hv = t.hv = [p(t, ['left', 'right']), p(t, ['top', 'bottom'])]),
                    'group' === e.type &&
                      (null == e.width && (e.width = t.width = 0),
                      null == e.height && (e.height = t.height = 0));
                })(r[t], n));
            },
            this
          );
          for (var h = r.length - 1; h >= 0; h--)
            null == r[h] ? r.splice(h, 1) : delete r[h].$action;
        },
        _flatten: function(e, t, n) {
          a.each(
            e,
            function(e) {
              if (e) {
                n && (e.parentOption = n), t.push(e);
                var i = e.children;
                'group' === e.type && i && this._flatten(i, t, e), delete e.children;
              }
            },
            this
          );
        },
        useElOptionsToUpdate: function() {
          var e = this._elOptionsToUpdate;
          return (this._elOptionsToUpdate = null), e;
        }
      });
      function h(e, t, n, i) {
        var a = n.type,
          o = new (u.hasOwnProperty(a) ? u[a] : r.getShapeClass(a))(n);
        t.add(o), i.set(e, o), (o.__ecGraphicId = e);
      }
      function d(e, t) {
        var n = e && e.parent;
        n &&
          ('group' === e.type &&
            e.traverse(function(e) {
              d(e, t);
            }),
          t.removeKey(e.__ecGraphicId),
          n.remove(e));
      }
      function p(e, t) {
        var n;
        return (
          a.each(t, function(t) {
            null != e[t] && 'auto' !== e[t] && (n = !0);
          }),
          n
        );
      }
      i.extendComponentView({
        type: 'graphic',
        init: function(e, t) {
          (this._elMap = a.createHashMap()), this._lastGraphicModel;
        },
        render: function(e, t, n) {
          e !== this._lastGraphicModel && this._clear(),
            (this._lastGraphicModel = e),
            this._updateElements(e),
            this._relocate(e, n);
        },
        _updateElements: function(e) {
          var t = e.useElOptionsToUpdate();
          if (t) {
            var n = this._elMap,
              i = this.group;
            a.each(t, function(t) {
              var o = t.$action,
                r = t.id,
                l = n.get(r),
                u = t.parentId,
                c = null != u ? n.get(u) : i,
                p = t.style;
              'text' === t.type &&
                p &&
                (t.hv && t.hv[1] && (p.textVerticalAlign = p.textBaseline = null),
                !p.hasOwnProperty('textFill') && p.fill && (p.textFill = p.fill),
                !p.hasOwnProperty('textStroke') && p.stroke && (p.textStroke = p.stroke));
              var g = (function(e) {
                return (
                  (e = a.extend({}, e)),
                  a.each(
                    ['id', 'parentId', '$action', 'hv', 'bounding'].concat(s.LOCATION_PARAMS),
                    function(t) {
                      delete e[t];
                    }
                  ),
                  e
                );
              })(t);
              o && 'merge' !== o
                ? 'replace' === o
                  ? (d(l, n), h(r, c, g, n))
                  : 'remove' === o && d(l, n)
                : l
                ? l.attr(g)
                : h(r, c, g, n);
              var f = n.get(r);
              f &&
                ((f.__ecGraphicWidthOption = t.width),
                (f.__ecGraphicHeightOption = t.height),
                (function(e, t, n) {
                  var i = e.eventData;
                  e.silent ||
                    e.ignore ||
                    i ||
                    (i = e.eventData = {
                      componentType: 'graphic',
                      componentIndex: t.componentIndex,
                      name: e.name
                    });
                  i && (i.info = e.info);
                })(f, e));
            });
          }
        },
        _relocate: function(e, t) {
          for (
            var n = e.option.elements,
              i = this.group,
              a = this._elMap,
              o = t.getWidth(),
              r = t.getHeight(),
              u = 0;
            u < n.length;
            u++
          ) {
            var c = n[u];
            if ((d = a.get(c.id)) && d.isGroup) {
              var h = (p = d.parent) === i;
              (d.__ecGraphicWidth = l(d.__ecGraphicWidthOption, h ? o : p.__ecGraphicWidth) || 0),
                (d.__ecGraphicHeight =
                  l(d.__ecGraphicHeightOption, h ? r : p.__ecGraphicHeight) || 0);
            }
          }
          for (u = n.length - 1; u >= 0; u--) {
            var d;
            c = n[u];
            if ((d = a.get(c.id))) {
              var p,
                g =
                  (p = d.parent) === i
                    ? { width: o, height: r }
                    : { width: p.__ecGraphicWidth, height: p.__ecGraphicHeight };
              s.positionElement(d, c, g, null, { hv: c.hv, boundingMode: c.bounding });
            }
          }
        },
        _clear: function() {
          var e = this._elMap;
          e.each(function(t) {
            d(t, e);
          }),
            (this._elMap = a.createHashMap());
        },
        dispose: function() {
          this._clear();
        }
      });
    },
    function(e, t, n) {
      n(965), n(966), n(967), n(968), n(969), n(970), n(975);
    },
    function(e, t, n) {
      var i = n(4),
        a = n(2),
        o = n(89),
        r = i.extendComponentModel({
          type: 'toolbox',
          layoutMode: { type: 'box', ignoreSize: !0 },
          optionUpdated: function() {
            r.superApply(this, 'optionUpdated', arguments),
              a.each(this.option.feature, function(e, t) {
                var n = o.get(t);
                n && a.merge(e, n.defaultOption);
              });
          },
          defaultOption: {
            show: !0,
            z: 6,
            zlevel: 0,
            orient: 'horizontal',
            left: 'right',
            top: 'top',
            backgroundColor: 'transparent',
            borderColor: '#ccc',
            borderRadius: 0,
            borderWidth: 0,
            padding: 5,
            itemSize: 15,
            itemGap: 8,
            showTitle: !0,
            iconStyle: { borderColor: '#666', color: 'none' },
            emphasis: { iconStyle: { borderColor: '#3E98C5' } },
            tooltip: { show: !1 }
          }
        }),
        s = r;
      e.exports = s;
    },
    function(e, t, n) {
      var i = n(4),
        a = n(2),
        o = n(52),
        r = n(89),
        s = n(6),
        l = n(36),
        u = n(102),
        c = n(455),
        h = i.extendComponentView({
          type: 'toolbox',
          render: function(e, t, n, i) {
            var h = this.group;
            if ((h.removeAll(), e.get('show'))) {
              var d = +e.get('itemSize'),
                p = e.get('feature') || {},
                g = this._features || (this._features = {}),
                f = [];
              a.each(p, function(e, t) {
                f.push(t);
              }),
                new u(this._featureNames || [], f)
                  .add(m)
                  .update(m)
                  .remove(a.curry(m, null))
                  .execute(),
                (this._featureNames = f),
                c.layout(h, e, n),
                h.add(c.makeBackground(h.getBoundingRect(), e)),
                h.eachChild(function(e) {
                  var t = e.__title,
                    i = e.hoverStyle;
                  if (i && t) {
                    var a = o.getBoundingRect(t, o.makeFont(i)),
                      r = e.position[0] + h.position[0],
                      s = !1;
                    e.position[1] + h.position[1] + d + a.height > n.getHeight() &&
                      ((i.textPosition = 'top'), (s = !0));
                    var l = s ? -5 - a.height : d + 8;
                    r + a.width / 2 > n.getWidth()
                      ? ((i.textPosition = ['100%', l]), (i.textAlign = 'right'))
                      : r - a.width / 2 < 0 && ((i.textPosition = [0, l]), (i.textAlign = 'left'));
                  }
                });
            }
            function m(o, u) {
              var c,
                m = f[o],
                v = f[u],
                y = p[m],
                x = new l(y, e, e.ecModel);
              if (m && !v) {
                if (
                  (function(e) {
                    return 0 === e.indexOf('my');
                  })(m)
                )
                  c = { model: x, onclick: x.option.onclick, featureName: m };
                else {
                  var _ = r.get(m);
                  if (!_) return;
                  c = new _(x, t, n);
                }
                g[m] = c;
              } else {
                if (!(c = g[v])) return;
                (c.model = x), (c.ecModel = t), (c.api = n);
              }
              m || !v
                ? x.get('show') && !c.unusable
                  ? (!(function(i, o, r) {
                      var l = i.getModel('iconStyle'),
                        u = i.getModel('emphasis.iconStyle'),
                        c = o.getIcons ? o.getIcons() : i.get('icon'),
                        p = i.get('title') || {};
                      if ('string' === typeof c) {
                        var g = c,
                          f = p;
                        (p = {}), ((c = {})[r] = g), (p[r] = f);
                      }
                      var m = (i.iconPaths = {});
                      a.each(c, function(r, c) {
                        var g = s.createIcon(r, {}, { x: -d / 2, y: -d / 2, width: d, height: d });
                        g.setStyle(l.getItemStyle()),
                          (g.hoverStyle = u.getItemStyle()),
                          g.setStyle({
                            text: p[c],
                            textAlign: u.get('textAlign'),
                            textBorderRadius: u.get('textBorderRadius'),
                            textPadding: u.get('textPadding'),
                            textFill: null
                          });
                        var f = e.getModel('tooltip');
                        f &&
                          f.get('show') &&
                          g.attr(
                            'tooltip',
                            a.extend(
                              {
                                content: p[c],
                                formatter:
                                  f.get('formatter', !0) ||
                                  function() {
                                    return p[c];
                                  },
                                formatterParams: {
                                  componentType: 'toolbox',
                                  name: c,
                                  title: p[c],
                                  $vars: ['name', 'title']
                                },
                                position: f.get('position', !0) || 'bottom'
                              },
                              f.option
                            )
                          ),
                          s.setHoverStyle(g),
                          e.get('showTitle') &&
                            ((g.__title = p[c]),
                            g
                              .on('mouseover', function() {
                                var t = u.getItemStyle(),
                                  n =
                                    'vertical' === e.get('orient')
                                      ? null == e.get('right')
                                        ? 'right'
                                        : 'left'
                                      : null == e.get('bottom')
                                      ? 'bottom'
                                      : 'top';
                                g.setStyle({
                                  textFill: u.get('textFill') || t.fill || t.stroke || '#000',
                                  textBackgroundColor: u.get('textBackgroundColor'),
                                  textPosition: u.get('textPosition') || n
                                });
                              })
                              .on('mouseout', function() {
                                g.setStyle({ textFill: null, textBackgroundColor: null });
                              })),
                          g.trigger(i.get('iconStatus.' + c) || 'normal'),
                          h.add(g),
                          g.on('click', a.bind(o.onclick, o, t, n, c)),
                          (m[c] = g);
                      });
                    })(x, c, m),
                    (x.setIconStatus = function(e, t) {
                      var n = this.option,
                        i = this.iconPaths;
                      (n.iconStatus = n.iconStatus || {}),
                        (n.iconStatus[e] = t),
                        i[e] && i[e].trigger(t);
                    }),
                    c.render && c.render(x, t, n, i))
                  : c.remove && c.remove(t, n)
                : c.dispose && c.dispose(t, n);
            }
          },
          updateView: function(e, t, n, i) {
            a.each(this._features, function(e) {
              e.updateView && e.updateView(e.model, t, n, i);
            });
          },
          remove: function(e, t) {
            a.each(this._features, function(n) {
              n.remove && n.remove(e, t);
            }),
              this.group.removeAll();
          },
          dispose: function(e, t) {
            a.each(this._features, function(n) {
              n.dispose && n.dispose(e, t);
            });
          }
        });
      e.exports = h;
    },
    function(e, t, n) {
      var i = n(35),
        a = n(86),
        o = n(89),
        r = a.toolbox.saveAsImage;
      function s(e) {
        this.model = e;
      }
      (s.defaultOption = {
        show: !0,
        icon: 'M4.7,22.9L29.3,45.5L54.7,23.4M4.6,43.6L4.6,58L53.8,58L53.8,43.6M29.2,45.1L29.2,0',
        title: r.title,
        type: 'png',
        connectedBackgroundColor: '#fff',
        name: '',
        excludeComponents: ['toolbox'],
        pixelRatio: 1,
        lang: r.lang.slice()
      }),
        (s.prototype.unusable = !i.canvasSupported),
        (s.prototype.onclick = function(e, t) {
          var n = this.model,
            a = n.get('name') || e.get('title.0.text') || 'echarts',
            o = n.get('type', !0) || 'png',
            r = t.getConnectedDataURL({
              type: o,
              backgroundColor: n.get('backgroundColor', !0) || e.get('backgroundColor') || '#fff',
              connectedBackgroundColor: n.get('connectedBackgroundColor'),
              excludeComponents: n.get('excludeComponents'),
              pixelRatio: n.get('pixelRatio')
            });
          if ('function' !== typeof MouseEvent || i.browser.ie || i.browser.edge)
            if (window.navigator.msSaveOrOpenBlob) {
              for (var s = atob(r.split(',')[1]), l = s.length, u = new Uint8Array(l); l--; )
                u[l] = s.charCodeAt(l);
              var c = new Blob([u]);
              window.navigator.msSaveOrOpenBlob(c, a + '.' + o);
            } else {
              var h = n.get('lang'),
                d =
                  '<body style="margin:0;"><img src="' +
                  r +
                  '" style="max-width:100%;" title="' +
                  ((h && h[0]) || '') +
                  '" /></body>';
              window.open().document.write(d);
            }
          else {
            var p = document.createElement('a');
            (p.download = a + '.' + o), (p.target = '_blank'), (p.href = r);
            var g = new MouseEvent('click', { view: window, bubbles: !0, cancelable: !1 });
            p.dispatchEvent(g);
          }
        }),
        o.register('saveAsImage', s);
      var l = s;
      e.exports = l;
    },
    function(e, t, n) {
      var i = n(4),
        a = n(2),
        o = n(86),
        r = n(89),
        s = o.toolbox.magicType;
      function l(e) {
        this.model = e;
      }
      l.defaultOption = {
        show: !0,
        type: [],
        icon: {
          line: 'M4.1,28.9h7.1l9.3-22l7.4,38l9.7-19.7l3,12.8h14.9M4.1,58h51.4',
          bar: 'M6.7,22.9h10V48h-10V22.9zM24.9,13h10v35h-10V13zM43.2,2h10v46h-10V2zM3.1,58h53.7',
          stack:
            'M8.2,38.4l-8.4,4.1l30.6,15.3L60,42.5l-8.1-4.1l-21.5,11L8.2,38.4z M51.9,30l-8.1,4.2l-13.4,6.9l-13.9-6.9L8.2,30l-8.4,4.2l8.4,4.2l22.2,11l21.5-11l8.1-4.2L51.9,30z M51.9,21.7l-8.1,4.2L35.7,30l-5.3,2.8L24.9,30l-8.4-4.1l-8.3-4.2l-8.4,4.2L8.2,30l8.3,4.2l13.9,6.9l13.4-6.9l8.1-4.2l8.1-4.1L51.9,21.7zM30.4,2.2L-0.2,17.5l8.4,4.1l8.3,4.2l8.4,4.2l5.5,2.7l5.3-2.7l8.1-4.2l8.1-4.2l8.1-4.1L30.4,2.2z',
          tiled:
            'M2.3,2.2h22.8V25H2.3V2.2z M35,2.2h22.8V25H35V2.2zM2.3,35h22.8v22.8H2.3V35z M35,35h22.8v22.8H35V35z'
        },
        title: a.clone(s.title),
        option: {},
        seriesIndex: {}
      };
      var u = l.prototype;
      u.getIcons = function() {
        var e = this.model,
          t = e.get('icon'),
          n = {};
        return (
          a.each(e.get('type'), function(e) {
            t[e] && (n[e] = t[e]);
          }),
          n
        );
      };
      var c = {
          line: function(e, t, n, i) {
            if ('bar' === e)
              return a.merge(
                {
                  id: t,
                  type: 'line',
                  data: n.get('data'),
                  stack: n.get('stack'),
                  markPoint: n.get('markPoint'),
                  markLine: n.get('markLine')
                },
                i.get('option.line') || {},
                !0
              );
          },
          bar: function(e, t, n, i) {
            if ('line' === e)
              return a.merge(
                {
                  id: t,
                  type: 'bar',
                  data: n.get('data'),
                  stack: n.get('stack'),
                  markPoint: n.get('markPoint'),
                  markLine: n.get('markLine')
                },
                i.get('option.bar') || {},
                !0
              );
          },
          stack: function(e, t, n, i) {
            if ('line' === e || 'bar' === e)
              return a.merge(
                { id: t, stack: '__ec_magicType_stack__' },
                i.get('option.stack') || {},
                !0
              );
          },
          tiled: function(e, t, n, i) {
            if ('line' === e || 'bar' === e)
              return a.merge({ id: t, stack: '' }, i.get('option.tiled') || {}, !0);
          }
        },
        h = [
          ['line', 'bar'],
          ['stack', 'tiled']
        ];
      (u.onclick = function(e, t, n) {
        var i = this.model,
          o = i.get('seriesIndex.' + n);
        if (c[n]) {
          var r = { series: [] };
          a.each(h, function(e) {
            a.indexOf(e, n) >= 0 &&
              a.each(e, function(e) {
                i.setIconStatus(e, 'normal');
              });
          }),
            i.setIconStatus(n, 'emphasis'),
            e.eachComponent(
              { mainType: 'series', query: null == o ? null : { seriesIndex: o } },
              function(t) {
                var o = t.subType,
                  s = t.id,
                  l = c[n](o, s, t, i);
                l && (a.defaults(l, t.option), r.series.push(l));
                var u = t.coordinateSystem;
                if (u && 'cartesian2d' === u.type && ('line' === n || 'bar' === n)) {
                  var h = u.getAxesByScale('ordinal')[0];
                  if (h) {
                    var d = h.dim + 'Axis',
                      p = e.queryComponents({
                        mainType: d,
                        index: t.get(name + 'Index'),
                        id: t.get(name + 'Id')
                      })[0].componentIndex;
                    r[d] = r[d] || [];
                    for (var g = 0; g <= p; g++) r[d][p] = r[d][p] || {};
                    r[d][p].boundaryGap = 'bar' === n;
                  }
                }
              }
            ),
            t.dispatchAction({ type: 'changeMagicType', currentType: n, newOption: r });
        }
      }),
        i.registerAction(
          { type: 'changeMagicType', event: 'magicTypeChanged', update: 'prepareAndUpdate' },
          function(e, t) {
            t.mergeOption(e.newOption);
          }
        ),
        r.register('magicType', l);
      var d = l;
      e.exports = d;
    },
    function(e, t, n) {
      var i = n(4),
        a = n(2),
        o = n(69),
        r = n(86),
        s = n(89),
        l = r.toolbox.dataView,
        u = new Array(60).join('-'),
        c = '\t';
      function h(e) {
        var t = [];
        return (
          a.each(e, function(e, n) {
            var i = e.categoryAxis,
              o = e.valueAxis.dim,
              r = [' '].concat(
                a.map(e.series, function(e) {
                  return e.name;
                })
              ),
              s = [i.model.getCategories()];
            a.each(e.series, function(e) {
              s.push(
                e.getRawData().mapArray(o, function(e) {
                  return e;
                })
              );
            });
            for (var l = [r.join(c)], u = 0; u < s[0].length; u++) {
              for (var h = [], d = 0; d < s.length; d++) h.push(s[d][u]);
              l.push(h.join(c));
            }
            t.push(l.join('\n'));
          }),
          t.join('\n\n' + u + '\n\n')
        );
      }
      function d(e) {
        return e.replace(/^\s\s*/, '').replace(/\s\s*$/, '');
      }
      var p = new RegExp('[' + c + ']+', 'g');
      function g(e, t) {
        var n = e.split(new RegExp('\n*' + u + '\n*', 'g')),
          i = { series: [] };
        return (
          a.each(n, function(e, n) {
            if (
              (function(e) {
                if (e.slice(0, e.indexOf('\n')).indexOf(c) >= 0) return !0;
              })(e)
            ) {
              var o = (function(e) {
                  for (
                    var t = e.split(/\n+/g),
                      n = d(t.shift()).split(p),
                      i = [],
                      o = a.map(n, function(e) {
                        return { name: e, data: [] };
                      }),
                      r = 0;
                    r < t.length;
                    r++
                  ) {
                    var s = d(t[r]).split(p);
                    i.push(s.shift());
                    for (var l = 0; l < s.length; l++) o[l] && (o[l].data[r] = s[l]);
                  }
                  return { series: o, categories: i };
                })(e),
                r = t[n],
                s = r.axisDim + 'Axis';
              r &&
                ((i[s] = i[s] || []),
                (i[s][r.axisIndex] = { data: o.categories }),
                (i.series = i.series.concat(o.series)));
            } else {
              o = (function(e) {
                for (var t = e.split(/\n+/g), n = d(t.shift()), i = [], a = 0; a < t.length; a++) {
                  var o,
                    r = d(t[a]).split(p),
                    s = '',
                    l = !1;
                  isNaN(r[0])
                    ? ((l = !0),
                      (s = r[0]),
                      (r = r.slice(1)),
                      (i[a] = { name: s, value: [] }),
                      (o = i[a].value))
                    : (o = i[a] = []);
                  for (var u = 0; u < r.length; u++) o.push(+r[u]);
                  1 === o.length && (l ? (i[a].value = o[0]) : (i[a] = o[0]));
                }
                return { name: n, data: i };
              })(e);
              i.series.push(o);
            }
          }),
          i
        );
      }
      function f(e) {
        (this._dom = null), (this.model = e);
      }
      function m(e, t) {
        return a.map(e, function(e, n) {
          var i = t && t[n];
          return a.isObject(i) && !a.isArray(i)
            ? (a.isObject(e) && !a.isArray(e) && (e = e.value), a.defaults({ value: e }, i))
            : e;
        });
      }
      (f.defaultOption = {
        show: !0,
        readOnly: !1,
        optionToContent: null,
        contentToOption: null,
        icon:
          'M17.5,17.3H33 M17.5,17.3H33 M45.4,29.5h-28 M11.5,2v56H51V14.8L38.4,2H11.5z M38.4,2.2v12.7H51 M45.4,41.7h-28',
        title: a.clone(l.title),
        lang: a.clone(l.lang),
        backgroundColor: '#fff',
        textColor: '#000',
        textareaColor: '#fff',
        textareaBorderColor: '#333',
        buttonColor: '#c23531',
        buttonTextColor: '#fff'
      }),
        (f.prototype.onclick = function(e, t) {
          var n = t.getDom(),
            i = this.model;
          this._dom && n.removeChild(this._dom);
          var r = document.createElement('div');
          (r.style.cssText = 'position:absolute;left:5px;top:5px;bottom:5px;right:5px;'),
            (r.style.backgroundColor = i.get('backgroundColor') || '#fff');
          var s = document.createElement('h4'),
            l = i.get('lang') || [];
          (s.innerHTML = l[0] || i.get('title')),
            (s.style.cssText = 'margin: 10px 20px;'),
            (s.style.color = i.get('textColor'));
          var d = document.createElement('div'),
            p = document.createElement('textarea');
          d.style.cssText = 'display:block;width:100%;overflow:auto;';
          var f = i.get('optionToContent'),
            m = i.get('contentToOption'),
            v = (function(e) {
              var t,
                n = (function(e) {
                  var t = {},
                    n = [],
                    i = [];
                  return (
                    e.eachRawSeries(function(e) {
                      var a = e.coordinateSystem;
                      if (!a || ('cartesian2d' !== a.type && 'polar' !== a.type)) n.push(e);
                      else {
                        var o = a.getBaseAxis();
                        if ('category' === o.type) {
                          var r = o.dim + '_' + o.index;
                          t[r] ||
                            ((t[r] = { categoryAxis: o, valueAxis: a.getOtherAxis(o), series: [] }),
                            i.push({ axisDim: o.dim, axisIndex: o.index })),
                            t[r].series.push(e);
                        } else n.push(e);
                      }
                    }),
                    { seriesGroupByCategoryAxis: t, other: n, meta: i }
                  );
                })(e);
              return {
                value: a
                  .filter(
                    [
                      h(n.seriesGroupByCategoryAxis),
                      ((t = n.other),
                      a
                        .map(t, function(e) {
                          var t = e.getRawData(),
                            n = [e.name],
                            i = [];
                          return (
                            t.each(t.dimensions, function() {
                              for (
                                var e = arguments.length,
                                  a = arguments[e - 1],
                                  o = t.getName(a),
                                  r = 0;
                                r < e - 1;
                                r++
                              )
                                i[r] = arguments[r];
                              n.push((o ? o + c : '') + i.join(c));
                            }),
                            n.join('\n')
                          );
                        })
                        .join('\n\n' + u + '\n\n'))
                    ],
                    function(e) {
                      return e.replace(/[\n\t\s]/g, '');
                    }
                  )
                  .join('\n\n' + u + '\n\n'),
                meta: n.meta
              };
            })(e);
          if ('function' === typeof f) {
            var y = f(t.getOption());
            'string' === typeof y ? (d.innerHTML = y) : a.isDom(y) && d.appendChild(y);
          } else
            d.appendChild(p),
              (p.readOnly = i.get('readOnly')),
              (p.style.cssText =
                'width:100%;height:100%;font-family:monospace;font-size:14px;line-height:1.6rem;'),
              (p.style.color = i.get('textColor')),
              (p.style.borderColor = i.get('textareaBorderColor')),
              (p.style.backgroundColor = i.get('textareaColor')),
              (p.value = v.value);
          var x = v.meta,
            _ = document.createElement('div');
          _.style.cssText = 'position:absolute;bottom:0;left:0;right:0;';
          var b =
              'float:right;margin-right:20px;border:none;cursor:pointer;padding:2px 5px;font-size:12px;border-radius:3px',
            S = document.createElement('div'),
            w = document.createElement('div');
          (b += ';background-color:' + i.get('buttonColor')),
            (b += ';color:' + i.get('buttonTextColor'));
          var M = this;
          function I() {
            n.removeChild(r), (M._dom = null);
          }
          o.addEventListener(S, 'click', I),
            o.addEventListener(w, 'click', function() {
              var e;
              try {
                e = 'function' === typeof m ? m(d, t.getOption()) : g(p.value, x);
              } catch (n) {
                throw (I(), new Error('Data view format error ' + n));
              }
              e && t.dispatchAction({ type: 'changeDataView', newOption: e }), I();
            }),
            (S.innerHTML = l[1]),
            (w.innerHTML = l[2]),
            (w.style.cssText = b),
            (S.style.cssText = b),
            !i.get('readOnly') && _.appendChild(w),
            _.appendChild(S),
            r.appendChild(s),
            r.appendChild(d),
            r.appendChild(_),
            (d.style.height = n.clientHeight - 80 + 'px'),
            n.appendChild(r),
            (this._dom = r);
        }),
        (f.prototype.remove = function(e, t) {
          this._dom && t.getDom().removeChild(this._dom);
        }),
        (f.prototype.dispose = function(e, t) {
          this.remove(e, t);
        }),
        s.register('dataView', f),
        i.registerAction(
          { type: 'changeDataView', event: 'dataViewChanged', update: 'prepareAndUpdate' },
          function(e, t) {
            var n = [];
            a.each(e.newOption.series, function(e) {
              var i = t.getSeriesByName(e.name)[0];
              if (i) {
                var o = i.get('data');
                n.push({ name: e.name, data: m(e.data, o) });
              } else n.push(a.extend({ type: 'scatter' }, e));
            }),
              t.mergeOption(a.defaults({ series: n }, e.newOption));
          }
        );
      var v = f;
      e.exports = v;
    },
    function(e, t, n) {
      var i = n(4),
        a = n(2),
        o = n(306),
        r = n(456),
        s = n(457),
        l = n(126),
        u = n(86),
        c = n(89);
      n(971);
      var h = u.toolbox.dataZoom,
        d = a.each,
        p = '\0_ec_\0toolbox-dataZoom_';
      function g(e, t, n) {
        (this._brushController = new o(n.getZr())).on('brush', a.bind(this._onBrush, this)).mount(),
          this._isZoomActive;
      }
      g.defaultOption = {
        show: !0,
        filterMode: 'filter',
        icon: {
          zoom: 'M0,13.5h26.9 M13.5,26.9V0 M32.1,13.5H58V58H13.5 V32.1',
          back: 'M22,1.4L9.9,13.5l12.3,12.3 M10.3,13.5H54.9v44.6 H10.3v-26'
        },
        title: a.clone(h.title)
      };
      var f = g.prototype;
      (f.render = function(e, t, n, i) {
        (this.model = e),
          (this.ecModel = t),
          (this.api = n),
          (function(e, t, n, i, a) {
            var o = n._isZoomActive;
            i &&
              'takeGlobalCursor' === i.type &&
              (o = 'dataZoomSelect' === i.key && i.dataZoomSelectActive);
            (n._isZoomActive = o), e.setIconStatus('zoom', o ? 'emphasis' : 'normal');
            var s = new r(v(e.option), t, { include: ['grid'] });
            n._brushController
              .setPanels(
                s.makePanelOpts(a, function(e) {
                  return e.xAxisDeclared && !e.yAxisDeclared
                    ? 'lineX'
                    : !e.xAxisDeclared && e.yAxisDeclared
                    ? 'lineY'
                    : 'rect';
                })
              )
              .enableBrush(
                !!o && { brushType: 'auto', brushStyle: { lineWidth: 0, fill: 'rgba(0,0,0,0.2)' } }
              );
          })(e, t, this, i, n),
          (function(e, t) {
            e.setIconStatus('back', s.count(t) > 1 ? 'emphasis' : 'normal');
          })(e, t);
      }),
        (f.onclick = function(e, t, n) {
          m[n].call(this);
        }),
        (f.remove = function(e, t) {
          this._brushController.unmount();
        }),
        (f.dispose = function(e, t) {
          this._brushController.dispose();
        });
      var m = {
        zoom: function() {
          var e = !this._isZoomActive;
          this.api.dispatchAction({
            type: 'takeGlobalCursor',
            key: 'dataZoomSelect',
            dataZoomSelectActive: e
          });
        },
        back: function() {
          this._dispatchZoomAction(s.pop(this.ecModel));
        }
      };
      function v(e) {
        var t = {};
        return (
          a.each(['xAxisIndex', 'yAxisIndex'], function(n) {
            (t[n] = e[n]),
              null == t[n] && (t[n] = 'all'),
              (!1 === t[n] || 'none' === t[n]) && (t[n] = []);
          }),
          t
        );
      }
      (f._onBrush = function(e, t) {
        if (t.isEnd && e.length) {
          var n = {},
            i = this.ecModel;
          this._brushController.updateCovers([]),
            new r(v(this.model.option), i, { include: ['grid'] }).matchOutputRanges(e, i, function(
              e,
              t,
              n
            ) {
              if ('cartesian2d' === n.type) {
                var i = e.brushType;
                'rect' === i
                  ? (a('x', n, t[0]), a('y', n, t[1]))
                  : a({ lineX: 'x', lineY: 'y' }[i], n, t);
              }
            }),
            s.push(i, n),
            this._dispatchZoomAction(n);
        }
        function a(e, t, a) {
          var o = t.getAxis(e),
            r = o.model,
            s = (function(e, t, n) {
              var i;
              return (
                n.eachComponent({ mainType: 'dataZoom', subType: 'select' }, function(n) {
                  n.getAxisModel(e, t.componentIndex) && (i = n);
                }),
                i
              );
            })(e, r, i),
            u = s.findRepresentativeAxisProxy(r).getMinMaxSpan();
          (null == u.minValueSpan && null == u.maxValueSpan) ||
            (a = l(0, a.slice(), o.scale.getExtent(), 0, u.minValueSpan, u.maxValueSpan)),
            s && (n[s.id] = { dataZoomId: s.id, startValue: a[0], endValue: a[1] });
        }
      }),
        (f._dispatchZoomAction = function(e) {
          var t = [];
          d(e, function(e, n) {
            t.push(a.clone(e));
          }),
            t.length && this.api.dispatchAction({ type: 'dataZoom', from: this.uid, batch: t });
        }),
        c.register('dataZoom', g),
        i.registerPreprocessor(function(e) {
          if (e) {
            var t = e.dataZoom || (e.dataZoom = []);
            a.isArray(t) || (e.dataZoom = t = [t]);
            var n = e.toolbox;
            if (n && (a.isArray(n) && (n = n[0]), n && n.feature)) {
              var i = n.feature.dataZoom;
              o('xAxis', i), o('yAxis', i);
            }
          }
          function o(n, i) {
            if (i) {
              var o = n + 'Index',
                r = i[o];
              null == r || 'all' === r || a.isArray(r) || (r = !1 === r || 'none' === r ? [] : [r]),
                (function(t, n) {
                  var i = e[t];
                  a.isArray(i) || (i = i ? [i] : []);
                  d(i, n);
                })(n, function(e, s) {
                  if (null == r || 'all' === r || -1 !== a.indexOf(r, s)) {
                    var l = {
                      type: 'select',
                      $fromToolbox: !0,
                      filterMode: i.filterMode || 'filter',
                      id: p + n + s
                    };
                    (l[o] = s), t.push(l);
                  }
                });
            }
          }
        });
      var y = g;
      e.exports = y;
    },
    function(e, t, n) {
      n(309), n(127), n(128), n(973), n(974), n(311), n(312);
    },
    function(e, t, n) {
      var i = n(2),
        a = n(16),
        o = n(310),
        r = n(126),
        s = i.each,
        l = a.asc,
        u = function(e, t, n, i) {
          (this._dimName = e),
            (this._axisIndex = t),
            this._valueWindow,
            this._percentWindow,
            this._dataExtent,
            this._minMaxSpan,
            (this.ecModel = i),
            (this._dataZoomModel = n);
        };
      function c(e, t) {
        var n = e.getAxisModel(),
          i = e._percentWindow,
          o = e._valueWindow;
        if (i) {
          var r = a.getPixelPrecision(o, [0, 500]);
          r = Math.min(r, 20);
          var s = t || (0 === i[0] && 100 === i[1]);
          n.setRange(s ? null : +o[0].toFixed(r), s ? null : +o[1].toFixed(r));
        }
      }
      u.prototype = {
        constructor: u,
        hostedBy: function(e) {
          return this._dataZoomModel === e;
        },
        getDataValueWindow: function() {
          return this._valueWindow.slice();
        },
        getDataPercentWindow: function() {
          return this._percentWindow.slice();
        },
        getTargetSeriesModels: function() {
          var e = [],
            t = this.ecModel;
          return (
            t.eachSeries(function(n) {
              if (o.isCoordSupported(n.get('coordinateSystem'))) {
                var i = this._dimName,
                  a = t.queryComponents({
                    mainType: i + 'Axis',
                    index: n.get(i + 'AxisIndex'),
                    id: n.get(i + 'AxisId')
                  })[0];
                this._axisIndex === (a && a.componentIndex) && e.push(n);
              }
            }, this),
            e
          );
        },
        getAxisModel: function() {
          return this.ecModel.getComponent(this._dimName + 'Axis', this._axisIndex);
        },
        getOtherAxisModel: function() {
          var e,
            t,
            n,
            i = this._dimName,
            a = this.ecModel,
            o = this.getAxisModel();
          return (
            'x' === i || 'y' === i
              ? ((t = 'gridIndex'), (e = 'x' === i ? 'y' : 'x'))
              : ((t = 'polarIndex'), (e = 'angle' === i ? 'radius' : 'angle')),
            a.eachComponent(e + 'Axis', function(e) {
              (e.get(t) || 0) === (o.get(t) || 0) && (n = e);
            }),
            n
          );
        },
        getMinMaxSpan: function() {
          return i.clone(this._minMaxSpan);
        },
        calculateDataWindow: function(e) {
          var t,
            n = this._dataExtent,
            i = this.getAxisModel().axis.scale,
            o = this._dataZoomModel.getRangePropMode(),
            u = [0, 100],
            c = [],
            h = [];
          s(['start', 'end'], function(r, s) {
            var l = e[r],
              d = e[r + 'Value'];
            'percent' === o[s]
              ? (null == l && (l = u[s]), (d = i.parse(a.linearMap(l, u, n))))
              : ((t = !0), (d = null == d ? n[s] : i.parse(d)), (l = a.linearMap(d, n, u))),
              (h[s] = d),
              (c[s] = l);
          }),
            l(h),
            l(c);
          var d = this._minMaxSpan;
          function p(e, t, n, o, s) {
            var l = s ? 'Span' : 'ValueSpan';
            r(0, e, n, 'all', d['min' + l], d['max' + l]);
            for (var u = 0; u < 2; u++)
              (t[u] = a.linearMap(e[u], n, o, !0)), s && (t[u] = i.parse(t[u]));
          }
          return t ? p(h, c, n, u, !1) : p(c, h, u, n, !0), { valueWindow: h, percentWindow: c };
        },
        reset: function(e) {
          if (e === this._dataZoomModel) {
            var t = this.getTargetSeriesModels();
            (this._dataExtent = (function(e, t, n) {
              var i = [1 / 0, -1 / 0];
              s(n, function(e) {
                var n = e.getData();
                n &&
                  s(n.mapDimension(t, !0), function(e) {
                    var t = n.getApproximateExtent(e);
                    t[0] < i[0] && (i[0] = t[0]), t[1] > i[1] && (i[1] = t[1]);
                  });
              }),
                i[1] < i[0] && (i = [NaN, NaN]);
              return (
                (function(e, t) {
                  var n = e.getAxisModel(),
                    i = n.getMin(!0),
                    a = 'category' === n.get('type'),
                    o = a && n.getCategories().length;
                  null != i && 'dataMin' !== i && 'function' !== typeof i
                    ? (t[0] = i)
                    : a && (t[0] = o > 0 ? 0 : NaN);
                  var r = n.getMax(!0);
                  null != r && 'dataMax' !== r && 'function' !== typeof r
                    ? (t[1] = r)
                    : a && (t[1] = o > 0 ? o - 1 : NaN);
                  n.get('scale', !0) || (t[0] > 0 && (t[0] = 0), t[1] < 0 && (t[1] = 0));
                })(e, i),
                i
              );
            })(this, this._dimName, t)),
              (function(e) {
                var t = (e._minMaxSpan = {}),
                  n = e._dataZoomModel,
                  i = e._dataExtent;
                s(['min', 'max'], function(o) {
                  var r = n.get(o + 'Span'),
                    s = n.get(o + 'ValueSpan');
                  null != s && (s = e.getAxisModel().axis.scale.parse(s)),
                    null != s
                      ? (r = a.linearMap(i[0] + s, i, [0, 100], !0))
                      : null != r && (s = a.linearMap(r, [0, 100], i, !0) - i[0]),
                    (t[o + 'Span'] = r),
                    (t[o + 'ValueSpan'] = s);
                });
              })(this);
            var n = this.calculateDataWindow(e.settledOption);
            (this._valueWindow = n.valueWindow), (this._percentWindow = n.percentWindow), c(this);
          }
        },
        restore: function(e) {
          e === this._dataZoomModel &&
            ((this._valueWindow = this._percentWindow = null), c(this, !0));
        },
        filterData: function(e, t) {
          if (e === this._dataZoomModel) {
            var n = this._dimName,
              i = this.getTargetSeriesModels(),
              a = e.get('filterMode'),
              o = this._valueWindow;
            'none' !== a &&
              s(i, function(e) {
                var t = e.getData(),
                  i = t.mapDimension(n, !0);
                i.length &&
                  ('weakFilter' === a
                    ? t.filterSelf(function(e) {
                        for (var n, a, r, s = 0; s < i.length; s++) {
                          var l = t.get(i[s], e),
                            u = !isNaN(l),
                            c = l < o[0],
                            h = l > o[1];
                          if (u && !c && !h) return !0;
                          u && (r = !0), c && (n = !0), h && (a = !0);
                        }
                        return r && n && a;
                      })
                    : s(i, function(n) {
                        if ('empty' === a)
                          e.setData(
                            (t = t.map(n, function(e) {
                              return (function(e) {
                                return e >= o[0] && e <= o[1];
                              })(e)
                                ? e
                                : NaN;
                            }))
                          );
                        else {
                          var i = {};
                          (i[n] = o), t.selectRange(i);
                        }
                      }),
                  s(i, function(e) {
                    t.setApproximateExtent(o, e);
                  }));
              });
          }
        }
      };
      var h = u;
      e.exports = h;
    },
    function(e, t, n) {
      var i = n(127).extend({ type: 'dataZoom.select' });
      e.exports = i;
    },
    function(e, t, n) {
      var i = n(128).extend({ type: 'dataZoom.select' });
      e.exports = i;
    },
    function(e, t, n) {
      var i = n(4),
        a = n(457),
        o = n(86),
        r = n(89),
        s = o.toolbox.restore;
      function l(e) {
        this.model = e;
      }
      (l.defaultOption = {
        show: !0,
        icon:
          'M3.8,33.4 M47,18.9h9.8V8.7 M56.3,20.1 C52.1,9,40.5,0.6,26.8,2.1C12.6,3.7,1.6,16.2,2.1,30.6 M13,41.1H3.1v10.2 M3.7,39.9c4.2,11.1,15.8,19.5,29.5,18 c14.2-1.6,25.2-14.1,24.7-28.5',
        title: s.title
      }),
        (l.prototype.onclick = function(e, t, n) {
          a.clear(e), t.dispatchAction({ type: 'restore', from: this.uid });
        }),
        r.register('restore', l),
        i.registerAction(
          { type: 'restore', event: 'restore', update: 'prepareAndUpdate' },
          function(e, t) {
            t.resetOption('recreate');
          }
        );
      var u = l;
      e.exports = u;
    },
    function(e, t, n) {
      var i = n(4).extendComponentModel({
        type: 'tooltip',
        dependencies: ['axisPointer'],
        defaultOption: {
          zlevel: 0,
          z: 60,
          show: !0,
          showContent: !0,
          trigger: 'item',
          triggerOn: 'mousemove|click',
          alwaysShowContent: !1,
          displayMode: 'single',
          renderMode: 'auto',
          confine: !1,
          showDelay: 0,
          hideDelay: 100,
          transitionDuration: 0.4,
          enterable: !1,
          backgroundColor: 'rgba(50,50,50,0.7)',
          borderColor: '#333',
          borderRadius: 4,
          borderWidth: 0,
          padding: 5,
          extraCssText: '',
          axisPointer: {
            type: 'line',
            axis: 'auto',
            animation: 'auto',
            animationDurationUpdate: 200,
            animationEasingUpdate: 'exponentialOut',
            crossStyle: { color: '#999', width: 1, type: 'dashed', textStyle: {} }
          },
          textStyle: { color: '#fff', fontSize: 14 }
        }
      });
      e.exports = i;
    },
    function(e, t, n) {
      var i = n(4),
        a = n(2),
        o = n(35),
        r = n(978),
        s = n(979),
        l = n(30),
        u = n(16),
        c = n(6),
        h = n(452),
        d = n(25),
        p = n(36),
        g = n(453),
        f = n(64),
        m = n(207),
        v = n(18).getTooltipRenderMode,
        y = a.bind,
        x = a.each,
        _ = u.parsePercent,
        b = new c.Rect({ shape: { x: -1, y: -1, width: 2, height: 2 } }),
        S = i.extendComponentView({
          type: 'tooltip',
          init: function(e, t) {
            if (!o.node) {
              var n,
                i = e.getComponent('tooltip').get('renderMode');
              (this._renderMode = v(i)),
                'html' === this._renderMode
                  ? ((n = new r(t.getDom(), t)), (this._newLine = '<br/>'))
                  : ((n = new s(t)), (this._newLine = '\n')),
                (this._tooltipContent = n);
            }
          },
          render: function(e, t, n) {
            if (!o.node) {
              this.group.removeAll(),
                (this._tooltipModel = e),
                (this._ecModel = t),
                (this._api = n),
                (this._lastDataByCoordSys = null),
                (this._alwaysShowContent = e.get('alwaysShowContent'));
              var i = this._tooltipContent;
              i.update(),
                i.setEnterable(e.get('enterable')),
                this._initGlobalListener(),
                this._keepShow();
            }
          },
          _initGlobalListener: function() {
            var e = this._tooltipModel.get('triggerOn');
            g.register(
              'itemTooltip',
              this._api,
              y(function(t, n, i) {
                'none' !== e &&
                  (e.indexOf(t) >= 0 ? this._tryShow(n, i) : 'leave' === t && this._hide(i));
              }, this)
            );
          },
          _keepShow: function() {
            var e = this._tooltipModel,
              t = this._ecModel,
              n = this._api;
            if (null != this._lastX && null != this._lastY && 'none' !== e.get('triggerOn')) {
              var i = this;
              clearTimeout(this._refreshUpdateTimeout),
                (this._refreshUpdateTimeout = setTimeout(function() {
                  !n.isDisposed() && i.manuallyShowTip(e, t, n, { x: i._lastX, y: i._lastY });
                }));
            }
          },
          manuallyShowTip: function(e, t, n, i) {
            if (i.from !== this.uid && !o.node) {
              var a = M(i, n);
              this._ticket = '';
              var r = i.dataByCoordSys;
              if (i.tooltip && null != i.x && null != i.y) {
                var s = b;
                (s.position = [i.x, i.y]),
                  s.update(),
                  (s.tooltip = i.tooltip),
                  this._tryShow({ offsetX: i.x, offsetY: i.y, target: s }, a);
              } else if (r)
                this._tryShow(
                  {
                    offsetX: i.x,
                    offsetY: i.y,
                    position: i.position,
                    event: {},
                    dataByCoordSys: i.dataByCoordSys,
                    tooltipOption: i.tooltipOption
                  },
                  a
                );
              else if (null != i.seriesIndex) {
                if (this._manuallyAxisShowTip(e, t, n, i)) return;
                var l = h(i, t),
                  u = l.point[0],
                  c = l.point[1];
                null != u &&
                  null != c &&
                  this._tryShow(
                    { offsetX: u, offsetY: c, position: i.position, target: l.el, event: {} },
                    a
                  );
              } else
                null != i.x &&
                  null != i.y &&
                  (n.dispatchAction({ type: 'updateAxisPointer', x: i.x, y: i.y }),
                  this._tryShow(
                    {
                      offsetX: i.x,
                      offsetY: i.y,
                      position: i.position,
                      target: n.getZr().findHover(i.x, i.y).target,
                      event: {}
                    },
                    a
                  ));
            }
          },
          manuallyHideTip: function(e, t, n, i) {
            var a = this._tooltipContent;
            !this._alwaysShowContent &&
              this._tooltipModel &&
              a.hideLater(this._tooltipModel.get('hideDelay')),
              (this._lastX = this._lastY = null),
              i.from !== this.uid && this._hide(M(i, n));
          },
          _manuallyAxisShowTip: function(e, t, n, i) {
            var a = i.seriesIndex,
              o = i.dataIndex,
              r = t.getComponent('axisPointer').coordSysAxesInfo;
            if (null != a && null != o && null != r) {
              var s = t.getSeriesByIndex(a);
              if (s)
                if (
                  'axis' ===
                  (e = w([
                    s.getData().getItemModel(o),
                    s,
                    (s.coordinateSystem || {}).model,
                    e
                  ])).get('trigger')
                )
                  return (
                    n.dispatchAction({
                      type: 'updateAxisPointer',
                      seriesIndex: a,
                      dataIndex: o,
                      position: i.position
                    }),
                    !0
                  );
            }
          },
          _tryShow: function(e, t) {
            var n = e.target;
            if (this._tooltipModel) {
              (this._lastX = e.offsetX), (this._lastY = e.offsetY);
              var i = e.dataByCoordSys;
              i && i.length
                ? this._showAxisTooltip(i, e)
                : n && null != n.dataIndex
                ? ((this._lastDataByCoordSys = null), this._showSeriesItemTooltip(e, n, t))
                : n && n.tooltip
                ? ((this._lastDataByCoordSys = null), this._showComponentItemTooltip(e, n, t))
                : ((this._lastDataByCoordSys = null), this._hide(t));
            }
          },
          _showOrMove: function(e, t) {
            var n = e.get('showDelay');
            (t = a.bind(t, this)),
              clearTimeout(this._showTimout),
              n > 0 ? (this._showTimout = setTimeout(t, n)) : t();
          },
          _showAxisTooltip: function(e, t) {
            var n = this._ecModel,
              i = this._tooltipModel,
              o = [t.offsetX, t.offsetY],
              r = [],
              s = [],
              u = w([t.tooltipOption, i]),
              c = this._renderMode,
              h = this._newLine,
              d = {};
            x(
              e,
              function(e) {
                x(e.dataByAxis, function(e) {
                  var t = n.getComponent(e.axisDim + 'Axis', e.axisIndex),
                    i = e.value,
                    o = [];
                  if (t && null != i) {
                    var u = m.getValueLabel(i, t.axis, n, e.seriesDataIndices, e.valueLabelOpt);
                    a.each(e.seriesDataIndices, function(r) {
                      var l = n.getSeriesByIndex(r.seriesIndex),
                        h = r.dataIndexInside,
                        p = l && l.getDataParams(h);
                      if (
                        ((p.axisDim = e.axisDim),
                        (p.axisIndex = e.axisIndex),
                        (p.axisType = e.axisType),
                        (p.axisId = e.axisId),
                        (p.axisValue = f.getAxisRawValue(t.axis, i)),
                        (p.axisValueLabel = u),
                        p)
                      ) {
                        s.push(p);
                        var g,
                          m = l.formatTooltip(h, !0, null, c);
                        if (a.isObject(m)) {
                          g = m.html;
                          var v = m.markers;
                          a.merge(d, v);
                        } else g = m;
                        o.push(g);
                      }
                    });
                    var p = u;
                    'html' !== c
                      ? r.push(o.join(h))
                      : r.push((p ? l.encodeHTML(p) + h : '') + o.join(h));
                  }
                });
              },
              this
            ),
              r.reverse(),
              (r = r.join(this._newLine + this._newLine));
            var p = t.position;
            this._showOrMove(u, function() {
              this._updateContentNotChangedOnAxis(e)
                ? this._updatePosition(u, p, o[0], o[1], this._tooltipContent, s)
                : this._showTooltipContent(u, r, s, Math.random(), o[0], o[1], p, void 0, d);
            });
          },
          _showSeriesItemTooltip: function(e, t, n) {
            var i = this._ecModel,
              o = t.seriesIndex,
              r = i.getSeriesByIndex(o),
              s = t.dataModel || r,
              l = t.dataIndex,
              u = t.dataType,
              c = s.getData(),
              h = w([
                c.getItemModel(l),
                s,
                r && (r.coordinateSystem || {}).model,
                this._tooltipModel
              ]),
              d = h.get('trigger');
            if (null == d || 'item' === d) {
              var p,
                g,
                f = s.getDataParams(l, u),
                m = s.formatTooltip(l, !1, u, this._renderMode);
              a.isObject(m) ? ((p = m.html), (g = m.markers)) : ((p = m), (g = null));
              var v = 'item_' + s.name + '_' + l;
              this._showOrMove(h, function() {
                this._showTooltipContent(h, p, f, v, e.offsetX, e.offsetY, e.position, e.target, g);
              }),
                n({
                  type: 'showTip',
                  dataIndexInside: l,
                  dataIndex: c.getRawIndex(l),
                  seriesIndex: o,
                  from: this.uid
                });
            }
          },
          _showComponentItemTooltip: function(e, t, n) {
            var i = t.tooltip;
            if ('string' === typeof i) {
              i = { content: i, formatter: i };
            }
            var a = new p(i, this._tooltipModel, this._ecModel),
              o = a.get('content'),
              r = Math.random();
            this._showOrMove(a, function() {
              this._showTooltipContent(
                a,
                o,
                a.get('formatterParams') || {},
                r,
                e.offsetX,
                e.offsetY,
                e.position,
                t
              );
            }),
              n({ type: 'showTip', from: this.uid });
          },
          _showTooltipContent: function(e, t, n, i, a, o, r, s, u) {
            if (((this._ticket = ''), e.get('showContent') && e.get('show'))) {
              var c = this._tooltipContent,
                h = e.get('formatter');
              r = r || e.get('position');
              var d = t;
              if (h && 'string' === typeof h) d = l.formatTpl(h, n, !0);
              else if ('function' === typeof h) {
                var p = y(function(t, i) {
                  t === this._ticket &&
                    (c.setContent(i, u, e), this._updatePosition(e, r, a, o, c, n, s));
                }, this);
                (this._ticket = i), (d = h(n, i, p));
              }
              c.setContent(d, u, e), c.show(e), this._updatePosition(e, r, a, o, c, n, s);
            }
          },
          _updatePosition: function(e, t, n, i, o, r, s) {
            var l = this._api.getWidth(),
              u = this._api.getHeight();
            t = t || e.get('position');
            var c = o.getSize(),
              h = e.get('align'),
              p = e.get('verticalAlign'),
              g = s && s.getBoundingRect().clone();
            if (
              (s && g.applyTransform(s.transform),
              'function' === typeof t &&
                (t = t([n, i], r, o.el, g, { viewSize: [l, u], contentSize: c.slice() })),
              a.isArray(t))
            )
              (n = _(t[0], l)), (i = _(t[1], u));
            else if (a.isObject(t)) {
              (t.width = c[0]), (t.height = c[1]);
              var f = d.getLayoutRect(t, { width: l, height: u });
              (n = f.x), (i = f.y), (h = null), (p = null);
            } else if ('string' === typeof t && s) {
              var m = (function(e, t, n) {
                var i = n[0],
                  a = n[1],
                  o = 0,
                  r = 0,
                  s = t.width,
                  l = t.height;
                switch (e) {
                  case 'inside':
                    (o = t.x + s / 2 - i / 2), (r = t.y + l / 2 - a / 2);
                    break;
                  case 'top':
                    (o = t.x + s / 2 - i / 2), (r = t.y - a - 5);
                    break;
                  case 'bottom':
                    (o = t.x + s / 2 - i / 2), (r = t.y + l + 5);
                    break;
                  case 'left':
                    (o = t.x - i - 5), (r = t.y + l / 2 - a / 2);
                    break;
                  case 'right':
                    (o = t.x + s + 5), (r = t.y + l / 2 - a / 2);
                }
                return [o, r];
              })(t, g, c);
              (n = m[0]), (i = m[1]);
            } else {
              m = (function(e, t, n, i, a, o, r) {
                var s = n.getOuterSize(),
                  l = s.width,
                  u = s.height;
                null != o && (e + l + o > i ? (e -= l + o) : (e += o));
                null != r && (t + u + r > a ? (t -= u + r) : (t += r));
                return [e, t];
              })(n, i, o, l, u, h ? null : 20, p ? null : 20);
              (n = m[0]), (i = m[1]);
            }
            if (
              (h && (n -= I(h) ? c[0] / 2 : 'right' === h ? c[0] : 0),
              p && (i -= I(p) ? c[1] / 2 : 'bottom' === p ? c[1] : 0),
              e.get('confine'))
            ) {
              m = (function(e, t, n, i, a) {
                var o = n.getOuterSize(),
                  r = o.width,
                  s = o.height;
                return (
                  (e = Math.min(e + r, i) - r),
                  (t = Math.min(t + s, a) - s),
                  (e = Math.max(e, 0)),
                  (t = Math.max(t, 0)),
                  [e, t]
                );
              })(n, i, o, l, u);
              (n = m[0]), (i = m[1]);
            }
            o.moveTo(n, i);
          },
          _updateContentNotChangedOnAxis: function(e) {
            var t = this._lastDataByCoordSys,
              n = !!t && t.length === e.length;
            return (
              n &&
                x(t, function(t, i) {
                  var a = t.dataByAxis || {},
                    o = (e[i] || {}).dataByAxis || [];
                  (n &= a.length === o.length) &&
                    x(a, function(e, t) {
                      var i = o[t] || {},
                        a = e.seriesDataIndices || [],
                        r = i.seriesDataIndices || [];
                      (n &=
                        e.value === i.value &&
                        e.axisType === i.axisType &&
                        e.axisId === i.axisId &&
                        a.length === r.length) &&
                        x(a, function(e, t) {
                          var i = r[t];
                          n &= e.seriesIndex === i.seriesIndex && e.dataIndex === i.dataIndex;
                        });
                    });
                }),
              (this._lastDataByCoordSys = e),
              !!n
            );
          },
          _hide: function(e) {
            (this._lastDataByCoordSys = null), e({ type: 'hideTip', from: this.uid });
          },
          dispose: function(e, t) {
            o.node || (this._tooltipContent.hide(), g.unregister('itemTooltip', t));
          }
        });
      function w(e) {
        for (var t = e.pop(); e.length; ) {
          var n = e.pop();
          n &&
            (p.isInstance(n) && (n = n.get('tooltip', !0)),
            'string' === typeof n && (n = { formatter: n }),
            (t = new p(n, t, t.ecModel)));
        }
        return t;
      }
      function M(e, t) {
        return e.dispatchAction || a.bind(t.dispatchAction, t);
      }
      function I(e) {
        return 'center' === e || 'middle' === e;
      }
      e.exports = S;
    },
    function(e, t, n) {
      var i = n(2),
        a = n(70),
        o = n(69),
        r = n(35),
        s = n(30),
        l = i.each,
        u = s.toCamelCase,
        c = ['', '-webkit-', '-moz-', '-o-'];
      function h(e) {
        var t = [],
          n = e.get('transitionDuration'),
          o = e.get('backgroundColor'),
          h = e.getModel('textStyle'),
          d = e.get('padding');
        return (
          n &&
            t.push(
              (function(e) {
                var t =
                  'left ' +
                  e +
                  's cubic-bezier(0.23, 1, 0.32, 1),top ' +
                  e +
                  's cubic-bezier(0.23, 1, 0.32, 1)';
                return i
                  .map(c, function(e) {
                    return e + 'transition:' + t;
                  })
                  .join(';');
              })(n)
            ),
          o &&
            (r.canvasSupported
              ? t.push('background-Color:' + o)
              : (t.push('background-Color:#' + a.toHex(o)), t.push('filter:alpha(opacity=70)'))),
          l(['width', 'color', 'radius'], function(n) {
            var i = 'border-' + n,
              a = u(i),
              o = e.get(a);
            null != o && t.push(i + ':' + o + ('color' === n ? '' : 'px'));
          }),
          t.push(
            (function(e) {
              var t = [],
                n = e.get('fontSize'),
                i = e.getTextColor();
              return (
                i && t.push('color:' + i),
                t.push('font:' + e.getFont()),
                n && t.push('line-height:' + Math.round((3 * n) / 2) + 'px'),
                l(['decoration', 'align'], function(n) {
                  var i = e.get(n);
                  i && t.push('text-' + n + ':' + i);
                }),
                t.join(';')
              );
            })(h)
          ),
          null != d && t.push('padding:' + s.normalizeCssArray(d).join('px ') + 'px'),
          t.join(';') + ';'
        );
      }
      function d(e, t) {
        if (r.wxa) return null;
        var n = document.createElement('div'),
          i = (this._zr = t.getZr());
        (this.el = n),
          (this._x = t.getWidth() / 2),
          (this._y = t.getHeight() / 2),
          e.appendChild(n),
          (this._container = e),
          (this._show = !1),
          this._hideTimeout;
        var a = this;
        (n.onmouseenter = function() {
          a._enterable && (clearTimeout(a._hideTimeout), (a._show = !0)), (a._inContent = !0);
        }),
          (n.onmousemove = function(t) {
            if (((t = t || window.event), !a._enterable)) {
              var n = i.handler;
              o.normalizeEvent(e, t, !0), n.dispatch('mousemove', t);
            }
          }),
          (n.onmouseleave = function() {
            a._enterable && a._show && a.hideLater(a._hideDelay), (a._inContent = !1);
          });
      }
      d.prototype = {
        constructor: d,
        _enterable: !0,
        update: function() {
          var e = this._container,
            t = e.currentStyle || document.defaultView.getComputedStyle(e),
            n = e.style;
          'absolute' !== n.position && 'absolute' !== t.position && (n.position = 'relative');
        },
        show: function(e) {
          clearTimeout(this._hideTimeout);
          var t = this.el;
          (t.style.cssText =
            'position:absolute;display:block;border-style:solid;white-space:nowrap;z-index:9999999;' +
            h(e) +
            ';left:' +
            this._x +
            'px;top:' +
            this._y +
            'px;' +
            (e.get('extraCssText') || '')),
            (t.style.display = t.innerHTML ? 'block' : 'none'),
            (t.style.pointerEvents = this._enterable ? 'auto' : 'none'),
            (this._show = !0);
        },
        setContent: function(e) {
          this.el.innerHTML = null == e ? '' : e;
        },
        setEnterable: function(e) {
          this._enterable = e;
        },
        getSize: function() {
          var e = this.el;
          return [e.clientWidth, e.clientHeight];
        },
        moveTo: function(e, t) {
          var n,
            i = this._zr;
          i &&
            i.painter &&
            (n = i.painter.getViewportRootOffset()) &&
            ((e += n.offsetLeft), (t += n.offsetTop));
          var a = this.el.style;
          (a.left = e + 'px'), (a.top = t + 'px'), (this._x = e), (this._y = t);
        },
        hide: function() {
          (this.el.style.display = 'none'), (this._show = !1);
        },
        hideLater: function(e) {
          !this._show ||
            (this._inContent && this._enterable) ||
            (e
              ? ((this._hideDelay = e),
                (this._show = !1),
                (this._hideTimeout = setTimeout(i.bind(this.hide, this), e)))
              : this.hide());
        },
        isShow: function() {
          return this._show;
        },
        getOuterSize: function() {
          var e = this.el.clientWidth,
            t = this.el.clientHeight;
          if (document.defaultView && document.defaultView.getComputedStyle) {
            var n = document.defaultView.getComputedStyle(this.el);
            n &&
              ((e += parseInt(n.borderLeftWidth, 10) + parseInt(n.borderRightWidth, 10)),
              (t += parseInt(n.borderTopWidth, 10) + parseInt(n.borderBottomWidth, 10)));
          }
          return { width: e, height: t };
        }
      };
      var p = d;
      e.exports = p;
    },
    function(e, t, n) {
      var i = n(2),
        a = n(100);
      function o(e) {
        (this._zr = e.getZr()), (this._show = !1), this._hideTimeout;
      }
      o.prototype = {
        constructor: o,
        _enterable: !0,
        update: function() {},
        show: function(e) {
          this._hideTimeout && clearTimeout(this._hideTimeout),
            this.el.attr('show', !0),
            (this._show = !0);
        },
        setContent: function(e, t, n) {
          this.el && this._zr.remove(this.el);
          for (var i = {}, o = e, r = o.indexOf('{marker'); r >= 0; ) {
            var s = o.indexOf('|}'),
              l = o.substr(r + '{marker'.length, s - r - '{marker'.length);
            l.indexOf('sub') > -1
              ? (i['marker' + l] = {
                  textWidth: 4,
                  textHeight: 4,
                  textBorderRadius: 2,
                  textBackgroundColor: t[l],
                  textOffset: [3, 0]
                })
              : (i['marker' + l] = {
                  textWidth: 10,
                  textHeight: 10,
                  textBorderRadius: 5,
                  textBackgroundColor: t[l]
                }),
              (r = (o = o.substr(s + 1)).indexOf('{marker'));
          }
          (this.el = new a({
            style: {
              rich: i,
              text: e,
              textLineHeight: 20,
              textBackgroundColor: n.get('backgroundColor'),
              textBorderRadius: n.get('borderRadius'),
              textFill: n.get('textStyle.color'),
              textPadding: n.get('padding')
            },
            z: n.get('z')
          })),
            this._zr.add(this.el);
          var u = this;
          this.el.on('mouseover', function() {
            u._enterable && (clearTimeout(u._hideTimeout), (u._show = !0)), (u._inContent = !0);
          }),
            this.el.on('mouseout', function() {
              u._enterable && u._show && u.hideLater(u._hideDelay), (u._inContent = !1);
            });
        },
        setEnterable: function(e) {
          this._enterable = e;
        },
        getSize: function() {
          var e = this.el.getBoundingRect();
          return [e.width, e.height];
        },
        moveTo: function(e, t) {
          this.el && this.el.attr('position', [e, t]);
        },
        hide: function() {
          this.el && this.el.hide(), (this._show = !1);
        },
        hideLater: function(e) {
          !this._show ||
            (this._inContent && this._enterable) ||
            (e
              ? ((this._hideDelay = e),
                (this._show = !1),
                (this._hideTimeout = setTimeout(i.bind(this.hide, this), e)))
              : this.hide());
        },
        isShow: function() {
          return this._show;
        },
        getOuterSize: function() {
          var e = this.getSize();
          return { width: e[0], height: e[1] };
        }
      };
      var r = o;
      e.exports = r;
    },
    function(e, t, n) {
      var i = n(4),
        a = n(981);
      n(982), n(984), n(985), n(986), n(987), i.registerPreprocessor(a);
    },
    function(e, t, n) {
      var i = n(2),
        a = ['rect', 'polygon', 'keep', 'clear'];
      e.exports = function(e, t) {
        var n = e && e.brush;
        if ((i.isArray(n) || (n = n ? [n] : []), n.length)) {
          var o = [];
          i.each(n, function(e) {
            var t = e.hasOwnProperty('toolbox') ? e.toolbox : [];
            t instanceof Array && (o = o.concat(t));
          });
          var r = e && e.toolbox;
          i.isArray(r) && (r = r[0]), r || ((r = { feature: {} }), (e.toolbox = [r]));
          var s = r.feature || (r.feature = {}),
            l = s.brush || (s.brush = {}),
            u = l.type || (l.type = []);
          u.push.apply(u, o),
            (function(e) {
              var t = {};
              i.each(e, function(e) {
                t[e] = 1;
              }),
                (e.length = 0),
                i.each(t, function(t, n) {
                  e.push(n);
                });
            })(u),
            t && !u.length && u.push.apply(u, a);
        }
      };
    },
    function(e, t, n) {
      var i = n(4),
        a = n(2),
        o = n(29),
        r = n(208),
        s = n(983),
        l = n(85),
        u = n(456),
        c = ['inBrush', 'outOfBrush'],
        h = '__ecBrushSelect',
        d = '__ecInBrushSelectEvent',
        p = i.PRIORITY.VISUAL.BRUSH;
      function g(e, t) {
        if (!e.isDisposed()) {
          var n = e.getZr();
          (n[d] = !0), e.dispatchAction({ type: 'brushSelect', batch: t }), (n[d] = !1);
        }
      }
      function f(e, t, n, i) {
        for (var a = 0, o = t.length; a < o; a++) {
          var r = t[a];
          if (e[r.brushType](i, n, r.selectors, r)) return !0;
        }
      }
      function m(e) {
        var t = e.brushSelector;
        if (a.isString(t)) {
          var n = [];
          return (
            a.each(s, function(e, i) {
              n[i] = function(n, i, a, o) {
                var r = i.getItemLayout(n);
                return e[t](r, a, o);
              };
            }),
            n
          );
        }
        if (a.isFunction(t)) {
          var i = {};
          return (
            a.each(s, function(e, n) {
              i[n] = t;
            }),
            i
          );
        }
        return t;
      }
      i.registerLayout(p, function(e, t, n) {
        e.eachComponent({ mainType: 'brush' }, function(t) {
          n &&
            'takeGlobalCursor' === n.type &&
            t.setBrushOption('brush' === n.key ? n.brushOption : { brushType: !1 }),
            (t.brushTargetManager = new u(t.option, e)).setInputRanges(t.areas, e);
        });
      }),
        i.registerVisual(p, function(e, t, n) {
          var i,
            o,
            u = [];
          e.eachComponent({ mainType: 'brush' }, function(t, n) {
            var l = {
              brushId: t.id,
              brushIndex: n,
              brushName: t.name,
              areas: a.clone(t.areas),
              selected: []
            };
            u.push(l);
            var h = t.option,
              d = h.brushLink,
              p = [],
              g = [],
              y = [],
              x = 0;
            n || ((i = h.throttleType), (o = h.throttleDelay));
            var _ = a.map(t.areas, function(e) {
                return (function(e) {
                  var t = (e.selectors = {});
                  return (
                    a.each(s[e.brushType], function(n, i) {
                      t[i] = function(i) {
                        return n(i, t, e);
                      };
                    }),
                    e
                  );
                })(a.defaults({ boundingRect: v[e.brushType](e) }, e));
              }),
              b = r.createVisualMappings(t.option, c, function(e) {
                e.mappingMethod = 'fixed';
              });
            function S(e) {
              return 'all' === d || p[e];
            }
            function w(e) {
              return !!e.length;
            }
            a.isArray(d) &&
              a.each(d, function(e) {
                p[e] = 1;
              }),
              e.eachSeries(function(n, i) {
                var o = (y[i] = []);
                'parallel' === n.subType
                  ? (function(e, t) {
                      var n = e.coordinateSystem;
                      (x |= n.hasAxisBrushed()),
                        S(t) &&
                          n.eachActiveState(e.getData(), function(e, t) {
                            'active' === e && (g[t] = 1);
                          });
                    })(n, i)
                  : (function(n, i, o) {
                      var r = m(n);
                      if (
                        !r ||
                        (function(e, t) {
                          var n = e.option.seriesIndex;
                          return (
                            null != n &&
                            'all' !== n &&
                            (a.isArray(n) ? a.indexOf(n, t) < 0 : t !== n)
                          );
                        })(t, i)
                      )
                        return;
                      if (
                        (a.each(_, function(i) {
                          r[i.brushType] &&
                            t.brushTargetManager.controlSeries(i, n, e) &&
                            o.push(i),
                            (x |= w(o));
                        }),
                        S(i) && w(o))
                      ) {
                        var s = n.getData();
                        s.each(function(e) {
                          f(r, o, s, e) && (g[e] = 1);
                        });
                      }
                    })(n, i, o);
              }),
              e.eachSeries(function(e, t) {
                var n = { seriesId: e.id, seriesIndex: t, seriesName: e.name, dataIndex: [] };
                l.selected.push(n);
                var i = m(e),
                  a = y[t],
                  o = e.getData(),
                  s = S(t)
                    ? function(e) {
                        return g[e]
                          ? (n.dataIndex.push(o.getRawIndex(e)), 'inBrush')
                          : 'outOfBrush';
                      }
                    : function(e) {
                        return f(i, a, o, e)
                          ? (n.dataIndex.push(o.getRawIndex(e)), 'inBrush')
                          : 'outOfBrush';
                      };
                (S(t) ? x : w(a)) && r.applyVisual(c, b, o, s);
              });
          }),
            (function(e, t, n, i, a) {
              if (!a) return;
              var o = e.getZr();
              if (o[d]) return;
              o[h] || (o[h] = g);
              l.createOrUpdate(o, h, n, t)(e, i);
            })(t, i, o, u, n);
        });
      var v = {
        lineX: a.noop,
        lineY: a.noop,
        rect: function(e) {
          return y(e.range);
        },
        polygon: function(e) {
          for (var t, n = e.range, i = 0, a = n.length; i < a; i++) {
            t = t || [
              [1 / 0, -1 / 0],
              [1 / 0, -1 / 0]
            ];
            var o = n[i];
            o[0] < t[0][0] && (t[0][0] = o[0]),
              o[0] > t[0][1] && (t[0][1] = o[0]),
              o[1] < t[1][0] && (t[1][0] = o[1]),
              o[1] > t[1][1] && (t[1][1] = o[1]);
          }
          return t && y(t);
        }
      };
      function y(e) {
        return new o(e[0][0], e[1][0], e[0][1] - e[0][0], e[1][1] - e[1][0]);
      }
    },
    function(e, t, n) {
      var i = n(425),
        a = n(29),
        o = n(6).linePolygonIntersect;
      function r(e) {
        var t = ['x', 'y'],
          n = ['width', 'height'];
        return {
          point: function(t, n, i) {
            if (t) {
              var a = i.range;
              return s(t[e], a);
            }
          },
          rect: function(i, a, o) {
            if (i) {
              var r = o.range,
                l = [i[t[e]], i[t[e]] + i[n[e]]];
              return (
                l[1] < l[0] && l.reverse(), s(l[0], r) || s(l[1], r) || s(r[0], l) || s(r[1], l)
              );
            }
          }
        };
      }
      function s(e, t) {
        return t[0] <= e && e <= t[1];
      }
      var l = {
        lineX: r(0),
        lineY: r(1),
        rect: {
          point: function(e, t, n) {
            return e && n.boundingRect.contain(e[0], e[1]);
          },
          rect: function(e, t, n) {
            return e && n.boundingRect.intersect(e);
          }
        },
        polygon: {
          point: function(e, t, n) {
            return e && n.boundingRect.contain(e[0], e[1]) && i.contain(n.range, e[0], e[1]);
          },
          rect: function(e, t, n) {
            var r = n.range;
            if (!e || r.length <= 1) return !1;
            var s = e.x,
              l = e.y,
              u = e.width,
              c = e.height,
              h = r[0];
            return (
              !!(
                i.contain(r, s, l) ||
                i.contain(r, s + u, l) ||
                i.contain(r, s, l + c) ||
                i.contain(r, s + u, l + c) ||
                a.create(e).contain(h[0], h[1]) ||
                o(s, l, s + u, l, r) ||
                o(s, l, s, l + c, r) ||
                o(s + u, l, s + u, l + c, r) ||
                o(s, l + c, s + u, l + c, r)
              ) || void 0
            );
          }
        }
      };
      e.exports = l;
    },
    function(e, t, n) {
      n(23).__DEV__;
      var i = n(4),
        a = n(2),
        o = n(208),
        r = n(36),
        s = ['#ddd'];
      function l(e, t) {
        return a.merge(
          {
            brushType: e.brushType,
            brushMode: e.brushMode,
            transformable: e.transformable,
            brushStyle: new r(e.brushStyle).getItemStyle(),
            removeOnClick: e.removeOnClick,
            z: e.z
          },
          t,
          !0
        );
      }
      var u = i.extendComponentModel({
        type: 'brush',
        dependencies: ['geo', 'grid', 'xAxis', 'yAxis', 'parallel', 'series'],
        defaultOption: {
          toolbox: null,
          brushLink: null,
          seriesIndex: 'all',
          geoIndex: null,
          xAxisIndex: null,
          yAxisIndex: null,
          brushType: 'rect',
          brushMode: 'single',
          transformable: !0,
          brushStyle: {
            borderWidth: 1,
            color: 'rgba(120,140,180,0.3)',
            borderColor: 'rgba(120,140,180,0.8)'
          },
          throttleType: 'fixRate',
          throttleDelay: 0,
          removeOnClick: !0,
          z: 1e4
        },
        areas: [],
        brushType: null,
        brushOption: {},
        coordInfoList: [],
        optionUpdated: function(e, t) {
          var n = this.option;
          !t && o.replaceVisualOption(n, e, ['inBrush', 'outOfBrush']);
          var i = (n.inBrush = n.inBrush || {});
          (n.outOfBrush = n.outOfBrush || { color: s }), i.hasOwnProperty('liftZ') || (i.liftZ = 5);
        },
        setAreas: function(e) {
          e &&
            (this.areas = a.map(
              e,
              function(e) {
                return l(this.option, e);
              },
              this
            ));
        },
        setBrushOption: function(e) {
          (this.brushOption = l(this.option, e)), (this.brushType = this.brushOption.brushType);
        }
      });
      e.exports = u;
    },
    function(e, t, n) {
      var i = n(4),
        a = n(2),
        o = n(306),
        r = i.extendComponentView({
          type: 'brush',
          init: function(e, t) {
            (this.ecModel = e),
              (this.api = t),
              this.model,
              (this._brushController = new o(t.getZr()))
                .on('brush', a.bind(this._onBrush, this))
                .mount();
          },
          render: function(e) {
            return (this.model = e), s.apply(this, arguments);
          },
          updateTransform: s,
          updateView: s,
          dispose: function() {
            this._brushController.dispose();
          },
          _onBrush: function(e, t) {
            var n = this.model.id;
            this.model.brushTargetManager.setOutputRanges(e, this.ecModel),
              (!t.isEnd || t.removeOnClick) &&
                this.api.dispatchAction({ type: 'brush', brushId: n, areas: a.clone(e), $from: n }),
              t.isEnd &&
                this.api.dispatchAction({
                  type: 'brushEnd',
                  brushId: n,
                  areas: a.clone(e),
                  $from: n
                });
          }
        });
      function s(e, t, n, i) {
        (!i || i.$from !== e.id) &&
          this._brushController
            .setPanels(e.brushTargetManager.makePanelOpts(n))
            .enableBrush(e.brushOption)
            .updateCovers(e.areas.slice());
      }
      e.exports = r;
    },
    function(e, t, n) {
      var i = n(4);
      i.registerAction({ type: 'brush', event: 'brush' }, function(e, t) {
        t.eachComponent({ mainType: 'brush', query: e }, function(t) {
          t.setAreas(e.areas);
        });
      }),
        i.registerAction(
          { type: 'brushSelect', event: 'brushSelected', update: 'none' },
          function() {}
        ),
        i.registerAction({ type: 'brushEnd', event: 'brushEnd', update: 'none' }, function() {});
    },
    function(e, t, n) {
      var i = n(2),
        a = n(89),
        o = n(86).toolbox.brush;
      function r(e, t, n) {
        (this.model = e), (this.ecModel = t), (this.api = n), this._brushType, this._brushMode;
      }
      r.defaultOption = {
        show: !0,
        type: ['rect', 'polygon', 'lineX', 'lineY', 'keep', 'clear'],
        icon: {
          rect:
            'M7.3,34.7 M0.4,10V-0.2h9.8 M89.6,10V-0.2h-9.8 M0.4,60v10.2h9.8 M89.6,60v10.2h-9.8 M12.3,22.4V10.5h13.1 M33.6,10.5h7.8 M49.1,10.5h7.8 M77.5,22.4V10.5h-13 M12.3,31.1v8.2 M77.7,31.1v8.2 M12.3,47.6v11.9h13.1 M33.6,59.5h7.6 M49.1,59.5 h7.7 M77.5,47.6v11.9h-13',
          polygon:
            'M55.2,34.9c1.7,0,3.1,1.4,3.1,3.1s-1.4,3.1-3.1,3.1 s-3.1-1.4-3.1-3.1S53.5,34.9,55.2,34.9z M50.4,51c1.7,0,3.1,1.4,3.1,3.1c0,1.7-1.4,3.1-3.1,3.1c-1.7,0-3.1-1.4-3.1-3.1 C47.3,52.4,48.7,51,50.4,51z M55.6,37.1l1.5-7.8 M60.1,13.5l1.6-8.7l-7.8,4 M59,19l-1,5.3 M24,16.1l6.4,4.9l6.4-3.3 M48.5,11.6 l-5.9,3.1 M19.1,12.8L9.7,5.1l1.1,7.7 M13.4,29.8l1,7.3l6.6,1.6 M11.6,18.4l1,6.1 M32.8,41.9 M26.6,40.4 M27.3,40.2l6.1,1.6 M49.9,52.1l-5.6-7.6l-4.9-1.2',
          lineX:
            'M15.2,30 M19.7,15.6V1.9H29 M34.8,1.9H40.4 M55.3,15.6V1.9H45.9 M19.7,44.4V58.1H29 M34.8,58.1H40.4 M55.3,44.4 V58.1H45.9 M12.5,20.3l-9.4,9.6l9.6,9.8 M3.1,29.9h16.5 M62.5,20.3l9.4,9.6L62.3,39.7 M71.9,29.9H55.4',
          lineY:
            'M38.8,7.7 M52.7,12h13.2v9 M65.9,26.6V32 M52.7,46.3h13.2v-9 M24.9,12H11.8v9 M11.8,26.6V32 M24.9,46.3H11.8v-9 M48.2,5.1l-9.3-9l-9.4,9.2 M38.9-3.9V12 M48.2,53.3l-9.3,9l-9.4-9.2 M38.9,62.3V46.4',
          keep:
            'M4,10.5V1h10.3 M20.7,1h6.1 M33,1h6.1 M55.4,10.5V1H45.2 M4,17.3v6.6 M55.6,17.3v6.6 M4,30.5V40h10.3 M20.7,40 h6.1 M33,40h6.1 M55.4,30.5V40H45.2 M21,18.9h62.9v48.6H21V18.9z',
          clear:
            'M22,14.7l30.9,31 M52.9,14.7L22,45.7 M4.7,16.8V4.2h13.1 M26,4.2h7.8 M41.6,4.2h7.8 M70.3,16.8V4.2H57.2 M4.7,25.9v8.6 M70.3,25.9v8.6 M4.7,43.2v12.6h13.1 M26,55.8h7.8 M41.6,55.8h7.8 M70.3,43.2v12.6H57.2'
        },
        title: i.clone(o.title)
      };
      var s = r.prototype;
      (s.render = s.updateView = function(e, t, n) {
        var a, o, r;
        t.eachComponent({ mainType: 'brush' }, function(e) {
          (a = e.brushType), (o = e.brushOption.brushMode || 'single'), (r |= e.areas.length);
        }),
          (this._brushType = a),
          (this._brushMode = o),
          i.each(e.get('type', !0), function(t) {
            e.setIconStatus(
              t,
              ('keep' === t
              ? 'multiple' === o
              : 'clear' === t
              ? r
              : t === a)
                ? 'emphasis'
                : 'normal'
            );
          });
      }),
        (s.getIcons = function() {
          var e = this.model,
            t = e.get('icon', !0),
            n = {};
          return (
            i.each(e.get('type', !0), function(e) {
              t[e] && (n[e] = t[e]);
            }),
            n
          );
        }),
        (s.onclick = function(e, t, n) {
          var i = this._brushType,
            a = this._brushMode;
          'clear' === n
            ? (t.dispatchAction({ type: 'axisAreaSelect', intervals: [] }),
              t.dispatchAction({ type: 'brush', command: 'clear', areas: [] }))
            : t.dispatchAction({
                type: 'takeGlobalCursor',
                key: 'brush',
                brushOption: {
                  brushType: 'keep' === n ? i : i !== n && n,
                  brushMode: 'keep' === n ? ('multiple' === a ? 'single' : 'multiple') : a
                }
              });
        }),
        a.register('brush', r);
      var l = r;
      e.exports = l;
    },
    function(e, t, n) {
      var i = n(4),
        a = n(989);
      n(990), n(991), n(992), n(994), i.registerPreprocessor(a);
    },
    function(e, t, n) {
      var i = n(2);
      function a(e) {
        var t = e.itemStyle || (e.itemStyle = {}),
          n = t.emphasis || (t.emphasis = {}),
          a = e.label || e.label || {},
          r = a.normal || (a.normal = {}),
          s = { normal: 1, emphasis: 1 };
        i.each(a, function(e, t) {
          s[t] || o(r, t) || (r[t] = e);
        }),
          n.label && !o(a, 'emphasis') && ((a.emphasis = n.label), delete n.label);
      }
      function o(e, t) {
        return e.hasOwnProperty(t);
      }
      e.exports = function(e) {
        var t = e && e.timeline;
        i.isArray(t) || (t = t ? [t] : []),
          i.each(t, function(e) {
            e &&
              (function(e) {
                var t = e.type,
                  n = { number: 'value', time: 'time' };
                n[t] && ((e.axisType = n[t]), delete e.type);
                if ((a(e), o(e, 'controlPosition'))) {
                  var r = e.controlStyle || (e.controlStyle = {});
                  o(r, 'position') || (r.position = e.controlPosition),
                    'none' !== r.position || o(r, 'show') || ((r.show = !1), delete r.position),
                    delete e.controlPosition;
                }
                i.each(e.data || [], function(e) {
                  i.isObject(e) &&
                    !i.isArray(e) &&
                    (!o(e, 'value') && o(e, 'name') && (e.value = e.name), a(e));
                });
              })(e);
          });
      };
    },
    function(e, t, n) {
      n(37).registerSubTypeDefaulter('timeline', function() {
        return 'slider';
      });
    },
    function(e, t, n) {
      var i = n(4),
        a = n(2);
      i.registerAction(
        { type: 'timelineChange', event: 'timelineChanged', update: 'prepareAndUpdate' },
        function(e, t) {
          var n = t.getComponent('timeline');
          return (
            n &&
              null != e.currentIndex &&
              (n.setCurrentIndex(e.currentIndex),
              !n.get('loop', !0) && n.isIndexMax() && n.setPlayState(!1)),
            t.resetOption('timeline'),
            a.defaults({ currentIndex: n.option.currentIndex }, e)
          );
        }
      ),
        i.registerAction(
          { type: 'timelinePlayChange', event: 'timelinePlayChanged', update: 'update' },
          function(e, t) {
            var n = t.getComponent('timeline');
            n && null != e.playState && n.setPlayState(e.playState);
          }
        );
    },
    function(e, t, n) {
      var i = n(2),
        a = n(993),
        o = n(291),
        r = a.extend({
          type: 'timeline.slider',
          defaultOption: {
            backgroundColor: 'rgba(0,0,0,0)',
            borderColor: '#ccc',
            borderWidth: 0,
            orient: 'horizontal',
            inverse: !1,
            tooltip: { trigger: 'item' },
            symbol: 'emptyCircle',
            symbolSize: 10,
            lineStyle: { show: !0, width: 2, color: '#304654' },
            label: { position: 'auto', show: !0, interval: 'auto', rotate: 0, color: '#304654' },
            itemStyle: { color: '#304654', borderWidth: 1 },
            checkpointStyle: {
              symbol: 'circle',
              symbolSize: 13,
              color: '#c23531',
              borderWidth: 5,
              borderColor: 'rgba(194,53,49, 0.5)',
              animation: !0,
              animationDuration: 300,
              animationEasing: 'quinticInOut'
            },
            controlStyle: {
              show: !0,
              showPlayBtn: !0,
              showPrevBtn: !0,
              showNextBtn: !0,
              itemSize: 22,
              itemGap: 12,
              position: 'left',
              playIcon:
                'path://M31.6,53C17.5,53,6,41.5,6,27.4S17.5,1.8,31.6,1.8C45.7,1.8,57.2,13.3,57.2,27.4S45.7,53,31.6,53z M31.6,3.3 C18.4,3.3,7.5,14.1,7.5,27.4c0,13.3,10.8,24.1,24.1,24.1C44.9,51.5,55.7,40.7,55.7,27.4C55.7,14.1,44.9,3.3,31.6,3.3z M24.9,21.3 c0-2.2,1.6-3.1,3.5-2l10.5,6.1c1.899,1.1,1.899,2.9,0,4l-10.5,6.1c-1.9,1.1-3.5,0.2-3.5-2V21.3z',
              stopIcon:
                'path://M30.9,53.2C16.8,53.2,5.3,41.7,5.3,27.6S16.8,2,30.9,2C45,2,56.4,13.5,56.4,27.6S45,53.2,30.9,53.2z M30.9,3.5C17.6,3.5,6.8,14.4,6.8,27.6c0,13.3,10.8,24.1,24.101,24.1C44.2,51.7,55,40.9,55,27.6C54.9,14.4,44.1,3.5,30.9,3.5z M36.9,35.8c0,0.601-0.4,1-0.9,1h-1.3c-0.5,0-0.9-0.399-0.9-1V19.5c0-0.6,0.4-1,0.9-1H36c0.5,0,0.9,0.4,0.9,1V35.8z M27.8,35.8 c0,0.601-0.4,1-0.9,1h-1.3c-0.5,0-0.9-0.399-0.9-1V19.5c0-0.6,0.4-1,0.9-1H27c0.5,0,0.9,0.4,0.9,1L27.8,35.8L27.8,35.8z',
              nextIcon:
                'path://M18.6,50.8l22.5-22.5c0.2-0.2,0.3-0.4,0.3-0.7c0-0.3-0.1-0.5-0.3-0.7L18.7,4.4c-0.1-0.1-0.2-0.3-0.2-0.5 c0-0.4,0.3-0.8,0.8-0.8c0.2,0,0.5,0.1,0.6,0.3l23.5,23.5l0,0c0.2,0.2,0.3,0.4,0.3,0.7c0,0.3-0.1,0.5-0.3,0.7l-0.1,0.1L19.7,52 c-0.1,0.1-0.3,0.2-0.5,0.2c-0.4,0-0.8-0.3-0.8-0.8C18.4,51.2,18.5,51,18.6,50.8z',
              prevIcon:
                'path://M43,52.8L20.4,30.3c-0.2-0.2-0.3-0.4-0.3-0.7c0-0.3,0.1-0.5,0.3-0.7L42.9,6.4c0.1-0.1,0.2-0.3,0.2-0.5 c0-0.4-0.3-0.8-0.8-0.8c-0.2,0-0.5,0.1-0.6,0.3L18.3,28.8l0,0c-0.2,0.2-0.3,0.4-0.3,0.7c0,0.3,0.1,0.5,0.3,0.7l0.1,0.1L41.9,54 c0.1,0.1,0.3,0.2,0.5,0.2c0.4,0,0.8-0.3,0.8-0.8C43.2,53.2,43.1,53,43,52.8z',
              color: '#304654',
              borderColor: '#304654',
              borderWidth: 1
            },
            emphasis: {
              label: { show: !0, color: '#c23531' },
              itemStyle: { color: '#c23531' },
              controlStyle: { color: '#c23531', borderColor: '#c23531', borderWidth: 2 }
            },
            data: []
          }
        });
      i.mixin(r, o);
      var s = r;
      e.exports = s;
    },
    function(e, t, n) {
      var i = n(2),
        a = n(37),
        o = n(53),
        r = n(18),
        s = a.extend({
          type: 'timeline',
          layoutMode: 'box',
          defaultOption: {
            zlevel: 0,
            z: 4,
            show: !0,
            axisType: 'time',
            realtime: !0,
            left: '20%',
            top: null,
            right: '20%',
            bottom: 0,
            width: null,
            height: 40,
            padding: 5,
            controlPosition: 'left',
            autoPlay: !1,
            rewind: !1,
            loop: !0,
            playInterval: 2e3,
            currentIndex: 0,
            itemStyle: {},
            label: { color: '#000' },
            data: []
          },
          init: function(e, t, n) {
            this._data, this._names, this.mergeDefaultAndTheme(e, n), this._initData();
          },
          mergeOption: function(e) {
            s.superApply(this, 'mergeOption', arguments), this._initData();
          },
          setCurrentIndex: function(e) {
            null == e && (e = this.option.currentIndex);
            var t = this._data.count();
            this.option.loop ? (e = ((e % t) + t) % t) : (e >= t && (e = t - 1), e < 0 && (e = 0)),
              (this.option.currentIndex = e);
          },
          getCurrentIndex: function() {
            return this.option.currentIndex;
          },
          isIndexMax: function() {
            return this.getCurrentIndex() >= this._data.count() - 1;
          },
          setPlayState: function(e) {
            this.option.autoPlay = !!e;
          },
          getPlayState: function() {
            return !!this.option.autoPlay;
          },
          _initData: function() {
            var e = this.option,
              t = e.data || [],
              n = e.axisType,
              a = (this._names = []);
            if ('category' === n) {
              var s = [];
              i.each(t, function(e, t) {
                var n,
                  o = r.getDataItemValue(e);
                i.isObject(e) ? ((n = i.clone(e)).value = t) : (n = t),
                  s.push(n),
                  i.isString(o) || (null != o && !isNaN(o)) || (o = ''),
                  a.push(o + '');
              }),
                (t = s);
            }
            var l = { category: 'ordinal', time: 'time' }[n] || 'number';
            (this._data = new o([{ name: 'value', type: l }], this)).initData(t, a);
          },
          getData: function() {
            return this._data;
          },
          getCategories: function() {
            if ('category' === this.get('axisType')) return this._names.slice();
          }
        }),
        l = s;
      e.exports = l;
    },
    function(e, t, n) {
      var i = n(2),
        a = n(29),
        o = n(42),
        r = n(6),
        s = n(25),
        l = n(995),
        u = n(996),
        c = n(54).createSymbol,
        h = n(64),
        d = n(16),
        p = n(30).encodeHTML,
        g = i.bind,
        f = i.each,
        m = Math.PI,
        v = l.extend({
          type: 'timeline.slider',
          init: function(e, t) {
            (this.api = t),
              this._axis,
              this._viewRect,
              this._timer,
              this._currentPointer,
              this._mainGroup,
              this._labelGroup;
          },
          render: function(e, t, n, i) {
            if (
              ((this.model = e),
              (this.api = n),
              (this.ecModel = t),
              this.group.removeAll(),
              e.get('show', !0))
            ) {
              var a = this._layout(e, n),
                o = this._createGroup('mainGroup'),
                r = this._createGroup('labelGroup'),
                s = (this._axis = this._createAxis(a, e));
              (e.formatTooltip = function(e) {
                return p(s.scale.getLabel(e));
              }),
                f(
                  ['AxisLine', 'AxisTick', 'Control', 'CurrentPointer'],
                  function(t) {
                    this['_render' + t](a, o, s, e);
                  },
                  this
                ),
                this._renderAxisLabel(a, r, s, e),
                this._position(a, e);
            }
            this._doPlayStop();
          },
          remove: function() {
            this._clearTimer(), this.group.removeAll();
          },
          dispose: function() {
            this._clearTimer();
          },
          _layout: function(e, t) {
            var n = e.get('label.position'),
              i = e.get('orient'),
              a = (function(e, t) {
                return s.getLayoutRect(
                  e.getBoxLayoutParams(),
                  { width: t.getWidth(), height: t.getHeight() },
                  e.get('padding')
                );
              })(e, t);
            null == n || 'auto' === n
              ? (n =
                  'horizontal' === i
                    ? a.y + a.height / 2 < t.getHeight() / 2
                      ? '-'
                      : '+'
                    : a.x + a.width / 2 < t.getWidth() / 2
                    ? '+'
                    : '-')
              : isNaN(n) &&
                (n = { horizontal: { top: '-', bottom: '+' }, vertical: { left: '-', right: '+' } }[
                  i
                ][n]);
            var o,
              r,
              l,
              u,
              c = { horizontal: 'center', vertical: n >= 0 || '+' === n ? 'left' : 'right' },
              h = { horizontal: n >= 0 || '+' === n ? 'top' : 'bottom', vertical: 'middle' },
              d = { horizontal: 0, vertical: m / 2 },
              p = 'vertical' === i ? a.height : a.width,
              g = e.getModel('controlStyle'),
              f = g.get('show', !0),
              v = f ? g.get('itemSize') : 0,
              y = f ? g.get('itemGap') : 0,
              x = v + y,
              _ = e.get('label.rotate') || 0;
            _ = (_ * m) / 180;
            var b = g.get('position', !0),
              S = f && g.get('showPlayBtn', !0),
              w = f && g.get('showPrevBtn', !0),
              M = f && g.get('showNextBtn', !0),
              I = 0,
              A = p;
            return (
              'left' === b || 'bottom' === b
                ? (S && ((o = [0, 0]), (I += x)),
                  w && ((r = [I, 0]), (I += x)),
                  M && ((l = [A - v, 0]), (A -= x)))
                : (S && ((o = [A - v, 0]), (A -= x)),
                  w && ((r = [0, 0]), (I += x)),
                  M && ((l = [A - v, 0]), (A -= x))),
              (u = [I, A]),
              e.get('inverse') && u.reverse(),
              {
                viewRect: a,
                mainLength: p,
                orient: i,
                rotation: d[i],
                labelRotation: _,
                labelPosOpt: n,
                labelAlign: e.get('label.align') || c[i],
                labelBaseline: e.get('label.verticalAlign') || e.get('label.baseline') || h[i],
                playPosition: o,
                prevBtnPosition: r,
                nextBtnPosition: l,
                axisExtent: u,
                controlSize: v,
                controlGap: y
              }
            );
          },
          _position: function(e, t) {
            var n = this._mainGroup,
              i = this._labelGroup,
              a = e.viewRect;
            if ('vertical' === e.orient) {
              var r = o.create(),
                s = a.x,
                l = a.y + a.height;
              o.translate(r, r, [-s, -l]),
                o.rotate(r, r, -m / 2),
                o.translate(r, r, [s, l]),
                (a = a.clone()).applyTransform(r);
            }
            var u = y(a),
              c = y(n.getBoundingRect()),
              h = y(i.getBoundingRect()),
              d = n.position,
              p = i.position;
            p[0] = d[0] = u[0][0];
            var g,
              f = e.labelPosOpt;
            isNaN(f)
              ? (x(d, c, u, 1, (g = '+' === f ? 0 : 1)), x(p, h, u, 1, 1 - g))
              : (x(d, c, u, 1, (g = f >= 0 ? 0 : 1)), (p[1] = d[1] + f));
            function v(e) {
              var t = e.position;
              e.origin = [u[0][0] - t[0], u[1][0] - t[1]];
            }
            function y(e) {
              return [
                [e.x, e.x + e.width],
                [e.y, e.y + e.height]
              ];
            }
            function x(e, t, n, i, a) {
              e[i] += n[i][a] - t[i][a];
            }
            n.attr('position', d),
              i.attr('position', p),
              (n.rotation = i.rotation = e.rotation),
              v(n),
              v(i);
          },
          _createAxis: function(e, t) {
            var n = t.getData(),
              i = t.get('axisType'),
              a = h.createScaleByModel(t, i);
            a.getTicks = function() {
              return n.mapArray(['value'], function(e) {
                return e;
              });
            };
            var o = n.getDataExtent('value');
            a.setExtent(o[0], o[1]), a.niceTicks();
            var r = new u('value', a, e.axisExtent, i);
            return (r.model = t), r;
          },
          _createGroup: function(e) {
            var t = (this['_' + e] = new r.Group());
            return this.group.add(t), t;
          },
          _renderAxisLine: function(e, t, n, a) {
            var o = n.getExtent();
            a.get('lineStyle.show') &&
              t.add(
                new r.Line({
                  shape: { x1: o[0], y1: 0, x2: o[1], y2: 0 },
                  style: i.extend({ lineCap: 'round' }, a.getModel('lineStyle').getLineStyle()),
                  silent: !0,
                  z2: 1
                })
              );
          },
          _renderAxisTick: function(e, t, n, i) {
            var a = i.getData(),
              o = n.scale.getTicks();
            f(
              o,
              function(e) {
                var o = n.dataToCoord(e),
                  s = a.getItemModel(e),
                  l = s.getModel('itemStyle'),
                  u = s.getModel('emphasis.itemStyle'),
                  c = { position: [o, 0], onclick: g(this._changeTimeline, this, e) },
                  h = y(s, l, t, c);
                r.setHoverStyle(h, u.getItemStyle()),
                  s.get('tooltip')
                    ? ((h.dataIndex = e), (h.dataModel = i))
                    : (h.dataIndex = h.dataModel = null);
              },
              this
            );
          },
          _renderAxisLabel: function(e, t, n, i) {
            if (n.getLabelModel().get('show')) {
              var a = i.getData(),
                o = n.getViewLabels();
              f(
                o,
                function(i) {
                  var o = i.tickValue,
                    s = a.getItemModel(o),
                    l = s.getModel('label'),
                    u = s.getModel('emphasis.label'),
                    c = n.dataToCoord(i.tickValue),
                    h = new r.Text({
                      position: [c, 0],
                      rotation: e.labelRotation - e.rotation,
                      onclick: g(this._changeTimeline, this, o),
                      silent: !1
                    });
                  r.setTextStyle(h.style, l, {
                    text: i.formattedLabel,
                    textAlign: e.labelAlign,
                    textVerticalAlign: e.labelBaseline
                  }),
                    t.add(h),
                    r.setHoverStyle(h, r.setTextStyle({}, u));
                },
                this
              );
            }
          },
          _renderControl: function(e, t, n, o) {
            var s = e.controlSize,
              l = e.rotation,
              u = o.getModel('controlStyle').getItemStyle(),
              c = o.getModel('emphasis.controlStyle').getItemStyle(),
              h = [0, -s / 2, s, s],
              d = o.getPlayState(),
              p = o.get('inverse', !0);
            function f(e, n, d, p) {
              if (e) {
                var g = (function(e, t, n, o) {
                  return r.makePath(
                    e.get(t).replace(/^path:\/\//, ''),
                    i.clone(o || {}),
                    new a(n[0], n[1], n[2], n[3]),
                    'center'
                  );
                })(o, n, h, {
                  position: e,
                  origin: [s / 2, 0],
                  rotation: p ? -l : 0,
                  rectHover: !0,
                  style: u,
                  onclick: d
                });
                t.add(g), r.setHoverStyle(g, c);
              }
            }
            f(
              e.nextBtnPosition,
              'controlStyle.nextIcon',
              g(this._changeTimeline, this, p ? '-' : '+')
            ),
              f(
                e.prevBtnPosition,
                'controlStyle.prevIcon',
                g(this._changeTimeline, this, p ? '+' : '-')
              ),
              f(
                e.playPosition,
                'controlStyle.' + (d ? 'stopIcon' : 'playIcon'),
                g(this._handlePlayClick, this, !d),
                !0
              );
          },
          _renderCurrentPointer: function(e, t, n, i) {
            var a = i.getData(),
              o = i.getCurrentIndex(),
              r = a.getItemModel(o).getModel('checkpointStyle'),
              s = this,
              l = {
                onCreate: function(e) {
                  (e.draggable = !0),
                    (e.drift = g(s._handlePointerDrag, s)),
                    (e.ondragend = g(s._handlePointerDragend, s)),
                    x(e, o, n, i, !0);
                },
                onUpdate: function(e) {
                  x(e, o, n, i);
                }
              };
            this._currentPointer = y(r, r, this._mainGroup, {}, this._currentPointer, l);
          },
          _handlePlayClick: function(e) {
            this._clearTimer(),
              this.api.dispatchAction({ type: 'timelinePlayChange', playState: e, from: this.uid });
          },
          _handlePointerDrag: function(e, t, n) {
            this._clearTimer(), this._pointerChangeTimeline([n.offsetX, n.offsetY]);
          },
          _handlePointerDragend: function(e) {
            this._pointerChangeTimeline([e.offsetX, e.offsetY], !0);
          },
          _pointerChangeTimeline: function(e, t) {
            var n = this._toAxisCoord(e)[0],
              i = this._axis,
              a = d.asc(i.getExtent().slice());
            n > a[1] && (n = a[1]),
              n < a[0] && (n = a[0]),
              (this._currentPointer.position[0] = n),
              this._currentPointer.dirty();
            var o = this._findNearestTick(n),
              r = this.model;
            (t || (o !== r.getCurrentIndex() && r.get('realtime'))) && this._changeTimeline(o);
          },
          _doPlayStop: function() {
            this._clearTimer(),
              this.model.getPlayState() &&
                (this._timer = setTimeout(
                  g(function() {
                    var e = this.model;
                    this._changeTimeline(e.getCurrentIndex() + (e.get('rewind', !0) ? -1 : 1));
                  }, this),
                  this.model.get('playInterval')
                ));
          },
          _toAxisCoord: function(e) {
            var t = this._mainGroup.getLocalTransform();
            return r.applyTransform(e, t, !0);
          },
          _findNearestTick: function(e) {
            var t,
              n = this.model.getData(),
              i = 1 / 0,
              a = this._axis;
            return (
              n.each(['value'], function(n, o) {
                var r = a.dataToCoord(n),
                  s = Math.abs(r - e);
                s < i && ((i = s), (t = o));
              }),
              t
            );
          },
          _clearTimer: function() {
            this._timer && (clearTimeout(this._timer), (this._timer = null));
          },
          _changeTimeline: function(e) {
            var t = this.model.getCurrentIndex();
            '+' === e ? (e = t + 1) : '-' === e && (e = t - 1),
              this.api.dispatchAction({ type: 'timelineChange', currentIndex: e, from: this.uid });
          }
        });
      function y(e, t, n, a, o, r) {
        var s = t.get('color');
        if (o) o.setColor(s), n.add(o), r && r.onUpdate(o);
        else {
          var l = e.get('symbol');
          (o = c(l, -1, -1, 2, 2, s)).setStyle('strokeNoScale', !0), n.add(o), r && r.onCreate(o);
        }
        var u = t.getItemStyle(['color', 'symbol', 'symbolSize']);
        o.setStyle(u), (a = i.merge({ rectHover: !0, z2: 100 }, a, !0));
        var h = e.get('symbolSize');
        ((h = h instanceof Array ? h.slice() : [+h, +h])[0] /= 2), (h[1] /= 2), (a.scale = h);
        var p = e.get('symbolOffset');
        if (p) {
          var g = (a.position = a.position || [0, 0]);
          (g[0] += d.parsePercent(p[0], h[0])), (g[1] += d.parsePercent(p[1], h[1]));
        }
        var f = e.get('symbolRotate');
        return (a.rotation = ((f || 0) * Math.PI) / 180 || 0), o.attr(a), o.updateTransform(), o;
      }
      function x(e, t, n, i, a) {
        if (!e.dragging) {
          var o = i.getModel('checkpointStyle'),
            r = n.dataToCoord(i.getData().get(['value'], t));
          a || !o.get('animation', !0)
            ? e.attr({ position: [r, 0] })
            : (e.stopAnimation(!0),
              e.animateTo(
                { position: [r, 0] },
                o.get('animationDuration', !0),
                o.get('animationEasing', !0)
              ));
        }
      }
      e.exports = v;
    },
    function(e, t, n) {
      var i = n(197).extend({ type: 'timeline' });
      e.exports = i;
    },
    function(e, t, n) {
      var i = n(2),
        a = n(87),
        o = function(e, t, n, i) {
          a.call(this, e, t, n), (this.type = i || 'value'), (this.model = null);
        };
      (o.prototype = {
        constructor: o,
        getLabelModel: function() {
          return this.model.getModel('label');
        },
        isHorizontal: function() {
          return 'horizontal' === this.model.get('orient');
        }
      }),
        i.inherits(o, a);
      var r = o;
      e.exports = r;
    },
    function(e, t, n) {
      var i = n(4);
      n(998),
        n(999),
        i.registerPreprocessor(function(e) {
          e.markPoint = e.markPoint || {};
        });
    },
    function(e, t, n) {
      var i = n(313).extend({
        type: 'markPoint',
        defaultOption: {
          zlevel: 0,
          z: 5,
          symbol: 'pin',
          symbolSize: 50,
          tooltip: { trigger: 'item' },
          label: { show: !0, position: 'inside' },
          itemStyle: { borderWidth: 2 },
          emphasis: { label: { show: !0 } }
        }
      });
      e.exports = i;
    },
    function(e, t, n) {
      var i = n(2),
        a = n(153),
        o = n(16),
        r = n(53),
        s = n(314);
      function l(e, t, n) {
        var i = t.coordinateSystem;
        e.each(function(a) {
          var r,
            s = e.getItemModel(a),
            l = o.parsePercent(s.get('x'), n.getWidth()),
            u = o.parsePercent(s.get('y'), n.getHeight());
          if (isNaN(l) || isNaN(u)) {
            if (t.getMarkerPosition) r = t.getMarkerPosition(e.getValues(e.dimensions, a));
            else if (i) {
              var c = e.get(i.dimensions[0], a),
                h = e.get(i.dimensions[1], a);
              r = i.dataToPoint([c, h]);
            }
          } else r = [l, u];
          isNaN(l) || (r[0] = l), isNaN(u) || (r[1] = u), e.setItemLayout(a, r);
        });
      }
      var u = n(315).extend({
        type: 'markPoint',
        updateTransform: function(e, t, n) {
          t.eachSeries(function(e) {
            var t = e.markPointModel;
            t && (l(t.getData(), e, n), this.markerGroupMap.get(e.id).updateLayout(t));
          }, this);
        },
        renderSeries: function(e, t, n, o) {
          var u = e.coordinateSystem,
            c = e.id,
            h = e.getData(),
            d = this.markerGroupMap,
            p = d.get(c) || d.set(c, new a()),
            g = (function(e, t, n) {
              var a;
              a = e
                ? i.map(e && e.dimensions, function(e) {
                    var n = t.getData().getDimensionInfo(t.getData().mapDimension(e)) || {};
                    return i.defaults({ name: e }, n);
                  })
                : [{ name: 'value', type: 'float' }];
              var o = new r(a, n),
                l = i.map(n.get('data'), i.curry(s.dataTransform, t));
              e && (l = i.filter(l, i.curry(s.dataFilter, e)));
              return (
                o.initData(
                  l,
                  null,
                  e
                    ? s.dimValueGetter
                    : function(e) {
                        return e.value;
                      }
                ),
                o
              );
            })(u, e, t);
          t.setData(g),
            l(t.getData(), e, o),
            g.each(function(e) {
              var n = g.getItemModel(e),
                a = n.getShallow('symbol'),
                o = n.getShallow('symbolSize'),
                r = i.isFunction(a),
                s = i.isFunction(o);
              if (r || s) {
                var l = t.getRawValue(e),
                  u = t.getDataParams(e);
                r && (a = a(l, u)), s && (o = o(l, u));
              }
              g.setItemVisual(e, {
                symbol: a,
                symbolSize: o,
                color: n.get('itemStyle.color') || h.getVisual('color')
              });
            }),
            p.updateData(g),
            this.group.add(p.group),
            g.eachItemGraphicEl(function(e) {
              e.traverse(function(e) {
                e.dataModel = t;
              });
            }),
            (p.__keep = !0),
            (p.group.silent = t.get('silent') || e.get('silent'));
        }
      });
      e.exports = u;
    },
    function(e, t, n) {
      var i = n(4);
      n(1001),
        n(1002),
        i.registerPreprocessor(function(e) {
          e.markLine = e.markLine || {};
        });
    },
    function(e, t, n) {
      var i = n(313).extend({
        type: 'markLine',
        defaultOption: {
          zlevel: 0,
          z: 5,
          symbol: ['circle', 'arrow'],
          symbolSize: [8, 16],
          precision: 2,
          tooltip: { trigger: 'item' },
          label: { show: !0, position: 'end' },
          lineStyle: { type: 'dashed' },
          emphasis: { label: { show: !0 }, lineStyle: { width: 3 } },
          animationEasing: 'linear'
        }
      });
      e.exports = i;
    },
    function(e, t, n) {
      var i = n(2),
        a = n(53),
        o = n(16),
        r = n(314),
        s = n(303),
        l = n(315),
        u = n(72).getStackedDimension,
        c = function(e, t, n, a) {
          var o = e.getData(),
            s = a.type;
          if (
            !i.isArray(a) &&
            ('min' === s ||
              'max' === s ||
              'average' === s ||
              'median' === s ||
              null != a.xAxis ||
              null != a.yAxis)
          ) {
            var l, c;
            if (null != a.yAxis || null != a.xAxis)
              (l = t.getAxis(null != a.yAxis ? 'y' : 'x')), (c = i.retrieve(a.yAxis, a.xAxis));
            else {
              var h = r.getAxisInfo(a, o, t, e);
              l = h.valueAxis;
              var d = u(o, h.valueDataDim);
              c = r.numCalculate(o, d, s);
            }
            var p = 'x' === l.dim ? 0 : 1,
              g = 1 - p,
              f = i.clone(a),
              m = {};
            (f.type = null),
              (f.coord = []),
              (m.coord = []),
              (f.coord[g] = -1 / 0),
              (m.coord[g] = 1 / 0);
            var v = n.get('precision');
            v >= 0 && 'number' === typeof c && (c = +c.toFixed(Math.min(v, 20))),
              (f.coord[p] = m.coord[p] = c),
              (a = [f, m, { type: s, valueIndex: a.valueIndex, value: c }]);
          }
          return (
            ((a = [
              r.dataTransform(e, a[0]),
              r.dataTransform(e, a[1]),
              i.extend({}, a[2])
            ])[2].type = a[2].type || ''),
            i.merge(a[2], a[0]),
            i.merge(a[2], a[1]),
            a
          );
        };
      function h(e) {
        return !isNaN(e) && !isFinite(e);
      }
      function d(e, t, n, i) {
        var a = 1 - e,
          o = i.dimensions[e];
        return h(t[a]) && h(n[a]) && t[e] === n[e] && i.getAxis(o).containData(t[e]);
      }
      function p(e, t) {
        if ('cartesian2d' === e.type) {
          var n = t[0].coord,
            i = t[1].coord;
          if (n && i && (d(1, n, i, e) || d(0, n, i, e))) return !0;
        }
        return r.dataFilter(e, t[0]) && r.dataFilter(e, t[1]);
      }
      function g(e, t, n, i, a) {
        var r,
          s = i.coordinateSystem,
          l = e.getItemModel(t),
          u = o.parsePercent(l.get('x'), a.getWidth()),
          c = o.parsePercent(l.get('y'), a.getHeight());
        if (isNaN(u) || isNaN(c)) {
          if (i.getMarkerPosition) r = i.getMarkerPosition(e.getValues(e.dimensions, t));
          else {
            var d = s.dimensions,
              p = e.get(d[0], t),
              g = e.get(d[1], t);
            r = s.dataToPoint([p, g]);
          }
          if ('cartesian2d' === s.type) {
            var f = s.getAxis('x'),
              m = s.getAxis('y');
            d = s.dimensions;
            h(e.get(d[0], t))
              ? (r[0] = f.toGlobalCoord(f.getExtent()[n ? 0 : 1]))
              : h(e.get(d[1], t)) && (r[1] = m.toGlobalCoord(m.getExtent()[n ? 0 : 1]));
          }
          isNaN(u) || (r[0] = u), isNaN(c) || (r[1] = c);
        } else r = [u, c];
        e.setItemLayout(t, r);
      }
      var f = l.extend({
        type: 'markLine',
        updateTransform: function(e, t, n) {
          t.eachSeries(function(e) {
            var t = e.markLineModel;
            if (t) {
              var i = t.getData(),
                a = t.__from,
                o = t.__to;
              a.each(function(t) {
                g(a, t, !0, e, n), g(o, t, !1, e, n);
              }),
                i.each(function(e) {
                  i.setItemLayout(e, [a.getItemLayout(e), o.getItemLayout(e)]);
                }),
                this.markerGroupMap.get(e.id).updateLayout();
            }
          }, this);
        },
        renderSeries: function(e, t, n, o) {
          var l = e.coordinateSystem,
            u = e.id,
            h = e.getData(),
            d = this.markerGroupMap,
            f = d.get(u) || d.set(u, new s());
          this.group.add(f.group);
          var m = (function(e, t, n) {
              var o;
              o = e
                ? i.map(e && e.dimensions, function(e) {
                    var n = t.getData().getDimensionInfo(t.getData().mapDimension(e)) || {};
                    return i.defaults({ name: e }, n);
                  })
                : [{ name: 'value', type: 'float' }];
              var s = new a(o, n),
                l = new a(o, n),
                u = new a([], n),
                h = i.map(n.get('data'), i.curry(c, t, e, n));
              e && (h = i.filter(h, i.curry(p, e)));
              var d = e
                ? r.dimValueGetter
                : function(e) {
                    return e.value;
                  };
              return (
                s.initData(
                  i.map(h, function(e) {
                    return e[0];
                  }),
                  null,
                  d
                ),
                l.initData(
                  i.map(h, function(e) {
                    return e[1];
                  }),
                  null,
                  d
                ),
                u.initData(
                  i.map(h, function(e) {
                    return e[2];
                  })
                ),
                (u.hasItemOption = !0),
                { from: s, to: l, line: u }
              );
            })(l, e, t),
            v = m.from,
            y = m.to,
            x = m.line;
          (t.__from = v), (t.__to = y), t.setData(x);
          var _ = t.get('symbol'),
            b = t.get('symbolSize');
          function S(t, n, i) {
            var a = t.getItemModel(n);
            g(t, n, i, e, o),
              t.setItemVisual(n, {
                symbolSize: a.get('symbolSize') || b[i ? 0 : 1],
                symbol: a.get('symbol', !0) || _[i ? 0 : 1],
                color: a.get('itemStyle.color') || h.getVisual('color')
              });
          }
          i.isArray(_) || (_ = [_, _]),
            'number' === typeof b && (b = [b, b]),
            m.from.each(function(e) {
              S(v, e, !0), S(y, e, !1);
            }),
            x.each(function(e) {
              var t = x.getItemModel(e).get('lineStyle.color');
              x.setItemVisual(e, { color: t || v.getItemVisual(e, 'color') }),
                x.setItemLayout(e, [v.getItemLayout(e), y.getItemLayout(e)]),
                x.setItemVisual(e, {
                  fromSymbolSize: v.getItemVisual(e, 'symbolSize'),
                  fromSymbol: v.getItemVisual(e, 'symbol'),
                  toSymbolSize: y.getItemVisual(e, 'symbolSize'),
                  toSymbol: y.getItemVisual(e, 'symbol')
                });
            }),
            f.updateData(x),
            m.line.eachItemGraphicEl(function(e, n) {
              e.traverse(function(e) {
                e.dataModel = t;
              });
            }),
            (f.__keep = !0),
            (f.group.silent = t.get('silent') || e.get('silent'));
        }
      });
      e.exports = f;
    },
    function(e, t, n) {
      var i = n(4);
      n(1004),
        n(1005),
        i.registerPreprocessor(function(e) {
          e.markArea = e.markArea || {};
        });
    },
    function(e, t, n) {
      var i = n(313).extend({
        type: 'markArea',
        defaultOption: {
          zlevel: 0,
          z: 1,
          tooltip: { trigger: 'item' },
          animation: !1,
          label: { show: !0, position: 'top' },
          itemStyle: { borderWidth: 0 },
          emphasis: { label: { show: !0, position: 'top' } }
        }
      });
      e.exports = i;
    },
    function(e, t, n) {
      var i = n(2),
        a = n(70),
        o = n(53),
        r = n(16),
        s = n(6),
        l = n(314),
        u = n(315),
        c = function(e, t, n, a) {
          var o = l.dataTransform(e, a[0]),
            r = l.dataTransform(e, a[1]),
            s = i.retrieve,
            u = o.coord,
            c = r.coord;
          (u[0] = s(u[0], -1 / 0)),
            (u[1] = s(u[1], -1 / 0)),
            (c[0] = s(c[0], 1 / 0)),
            (c[1] = s(c[1], 1 / 0));
          var h = i.mergeAll([{}, o, r]);
          return (
            (h.coord = [o.coord, r.coord]),
            (h.x0 = o.x),
            (h.y0 = o.y),
            (h.x1 = r.x),
            (h.y1 = r.y),
            h
          );
        };
      function h(e) {
        return !isNaN(e) && !isFinite(e);
      }
      function d(e, t, n, i) {
        var a = 1 - e;
        return h(t[a]) && h(n[a]);
      }
      function p(e, t) {
        var n = t.coord[0],
          i = t.coord[1];
        return (
          !('cartesian2d' !== e.type || !n || !i || (!d(1, n, i) && !d(0, n, i))) ||
          l.dataFilter(e, { coord: n, x: t.x0, y: t.y0 }) ||
            l.dataFilter(e, { coord: i, x: t.x1, y: t.y1 })
        );
      }
      function g(e, t, n, i, a) {
        var o,
          s = i.coordinateSystem,
          l = e.getItemModel(t),
          u = r.parsePercent(l.get(n[0]), a.getWidth()),
          c = r.parsePercent(l.get(n[1]), a.getHeight());
        if (isNaN(u) || isNaN(c)) {
          if (i.getMarkerPosition) o = i.getMarkerPosition(e.getValues(n, t));
          else {
            var d = [(f = e.get(n[0], t)), (m = e.get(n[1], t))];
            s.clampData && s.clampData(d, d), (o = s.dataToPoint(d, !0));
          }
          if ('cartesian2d' === s.type) {
            var p = s.getAxis('x'),
              g = s.getAxis('y'),
              f = e.get(n[0], t),
              m = e.get(n[1], t);
            h(f)
              ? (o[0] = p.toGlobalCoord(p.getExtent()['x0' === n[0] ? 0 : 1]))
              : h(m) && (o[1] = g.toGlobalCoord(g.getExtent()['y0' === n[1] ? 0 : 1]));
          }
          isNaN(u) || (o[0] = u), isNaN(c) || (o[1] = c);
        } else o = [u, c];
        return o;
      }
      var f = [
        ['x0', 'y0'],
        ['x1', 'y0'],
        ['x1', 'y1'],
        ['x0', 'y1']
      ];
      u.extend({
        type: 'markArea',
        updateTransform: function(e, t, n) {
          t.eachSeries(function(e) {
            var t = e.markAreaModel;
            if (t) {
              var a = t.getData();
              a.each(function(t) {
                var o = i.map(f, function(i) {
                  return g(a, t, i, e, n);
                });
                a.setItemLayout(t, o), a.getItemGraphicEl(t).setShape('points', o);
              });
            }
          }, this);
        },
        renderSeries: function(e, t, n, r) {
          var l = e.coordinateSystem,
            u = e.id,
            h = e.getData(),
            d = this.markerGroupMap,
            m = d.get(u) || d.set(u, { group: new s.Group() });
          this.group.add(m.group), (m.__keep = !0);
          var v = (function(e, t, n) {
            var a, r;
            e
              ? ((a = i.map(e && e.dimensions, function(e) {
                  var n = t.getData(),
                    a = n.getDimensionInfo(n.mapDimension(e)) || {};
                  return i.defaults({ name: e }, a);
                })),
                (r = new o(
                  i.map(['x0', 'y0', 'x1', 'y1'], function(e, t) {
                    return { name: e, type: a[t % 2].type };
                  }),
                  n
                )))
              : (r = new o((a = [{ name: 'value', type: 'float' }]), n));
            var s = i.map(n.get('data'), i.curry(c, t, e, n));
            e && (s = i.filter(s, i.curry(p, e)));
            var l = e
              ? function(e, t, n, i) {
                  return e.coord[Math.floor(i / 2)][i % 2];
                }
              : function(e) {
                  return e.value;
                };
            return r.initData(s, null, l), (r.hasItemOption = !0), r;
          })(l, e, t);
          t.setData(v),
            v.each(function(t) {
              v.setItemLayout(
                t,
                i.map(f, function(n) {
                  return g(v, t, n, e, r);
                })
              ),
                v.setItemVisual(t, { color: h.getVisual('color') });
            }),
            v
              .diff(m.__data)
              .add(function(e) {
                var t = new s.Polygon({ shape: { points: v.getItemLayout(e) } });
                v.setItemGraphicEl(e, t), m.group.add(t);
              })
              .update(function(e, n) {
                var i = m.__data.getItemGraphicEl(n);
                s.updateProps(i, { shape: { points: v.getItemLayout(e) } }, t, e),
                  m.group.add(i),
                  v.setItemGraphicEl(e, i);
              })
              .remove(function(e) {
                var t = m.__data.getItemGraphicEl(e);
                m.group.remove(t);
              })
              .execute(),
            v.eachItemGraphicEl(function(e, n) {
              var o = v.getItemModel(n),
                r = o.getModel('label'),
                l = o.getModel('emphasis.label'),
                u = v.getItemVisual(n, 'color');
              e.useStyle(
                i.defaults(o.getModel('itemStyle').getItemStyle(), {
                  fill: a.modifyAlpha(u, 0.4),
                  stroke: u
                })
              ),
                (e.hoverStyle = o.getModel('emphasis.itemStyle').getItemStyle()),
                s.setLabelStyle(e.style, e.hoverStyle, r, l, {
                  labelFetcher: t,
                  labelDataIndex: n,
                  defaultText: v.getName(n) || '',
                  isRectText: !0,
                  autoColor: u
                }),
                s.setHoverStyle(e, {}),
                (e.dataModel = t);
            }),
            (m.__data = v),
            (m.group.silent = t.get('silent') || e.get('silent'));
        }
      });
    },
    function(e, t, n) {
      n(374), n(1009), n(1010), n(1011);
    },
    function(e, t, n) {
      var i = n(4),
        a = n(2);
      function o(e, t, n) {
        var i,
          o = {},
          r = 'toggleSelected' === e;
        return (
          n.eachComponent('legend', function(n) {
            r && null != i
              ? n[i ? 'select' : 'unSelect'](t.name)
              : 'allSelect' === e || 'inverseSelect' === e
              ? n[e]()
              : (n[e](t.name), (i = n.isSelected(t.name)));
            var s = n.getData();
            a.each(s, function(e) {
              var t = e.get('name');
              if ('\n' !== t && '' !== t) {
                var i = n.isSelected(t);
                o.hasOwnProperty(t) ? (o[t] = o[t] && i) : (o[t] = i);
              }
            });
          }),
          'allSelect' === e || 'inverseSelect' === e
            ? { selected: o }
            : { name: t.name, selected: o }
        );
      }
      i.registerAction('legendToggleSelect', 'legendselectchanged', a.curry(o, 'toggleSelected')),
        i.registerAction('legendAllSelect', 'legendselectall', a.curry(o, 'allSelect')),
        i.registerAction('legendInverseSelect', 'legendinverseselect', a.curry(o, 'inverseSelect')),
        i.registerAction('legendSelect', 'legendselected', a.curry(o, 'select')),
        i.registerAction('legendUnSelect', 'legendunselected', a.curry(o, 'unSelect'));
    },
    function(e, t) {
      e.exports = function(e) {
        var t = e.findComponents({ mainType: 'legend' });
        t &&
          t.length &&
          e.filterSeries(function(e) {
            for (var n = 0; n < t.length; n++) if (!t[n].isSelected(e.name)) return !1;
            return !0;
          });
      };
    },
    function(e, t, n) {
      var i = n(458),
        a = n(25),
        o = a.mergeLayoutParam,
        r = a.getLayoutParams,
        s = i.extend({
          type: 'legend.scroll',
          setScrollDataIndex: function(e) {
            this.option.scrollDataIndex = e;
          },
          defaultOption: {
            scrollDataIndex: 0,
            pageButtonItemGap: 5,
            pageButtonGap: null,
            pageButtonPosition: 'end',
            pageFormatter: '{current}/{total}',
            pageIcons: {
              horizontal: ['M0,0L12,-10L12,10z', 'M0,0L-12,-10L-12,10z'],
              vertical: ['M0,0L20,0L10,-20z', 'M0,0L20,0L10,20z']
            },
            pageIconColor: '#2f4554',
            pageIconInactiveColor: '#aaa',
            pageIconSize: 15,
            pageTextStyle: { color: '#333' },
            animationDurationUpdate: 800
          },
          init: function(e, t, n, i) {
            var a = r(e);
            s.superCall(this, 'init', e, t, n, i), l(this, e, a);
          },
          mergeOption: function(e, t) {
            s.superCall(this, 'mergeOption', e, t), l(this, this.option, e);
          }
        });
      function l(e, t, n) {
        var i = [1, 1];
        (i[e.getOrient().index] = 0), o(t, n, { type: 'box', ignoreSize: i });
      }
      var u = s;
      e.exports = u;
    },
    function(e, t, n) {
      var i = n(2),
        a = n(6),
        o = n(25),
        r = n(459),
        s = a.Group,
        l = ['width', 'height'],
        u = ['x', 'y'],
        c = r.extend({
          type: 'legend.scroll',
          newlineDisabled: !0,
          init: function() {
            c.superCall(this, 'init'),
              (this._currentIndex = 0),
              this.group.add((this._containerGroup = new s())),
              this._containerGroup.add(this.getContentGroup()),
              this.group.add((this._controllerGroup = new s())),
              this._showController;
          },
          resetInner: function() {
            c.superCall(this, 'resetInner'),
              this._controllerGroup.removeAll(),
              this._containerGroup.removeClipPath(),
              (this._containerGroup.__rectSize = null);
          },
          renderInner: function(e, t, n, o, r, s, l) {
            var u = this;
            c.superCall(this, 'renderInner', e, t, n, o, r, s, l);
            var h = this._controllerGroup,
              d = t.get('pageIconSize', !0);
            i.isArray(d) || (d = [d, d]), g('pagePrev', 0);
            var p = t.getModel('pageTextStyle');
            function g(e, n) {
              var r = e + 'DataIndex',
                s = a.createIcon(
                  t.get('pageIcons', !0)[t.getOrient().name][n],
                  { onclick: i.bind(u._pageGo, u, r, t, o) },
                  { x: -d[0] / 2, y: -d[1] / 2, width: d[0], height: d[1] }
                );
              (s.name = e), h.add(s);
            }
            h.add(
              new a.Text({
                name: 'pageText',
                style: {
                  textFill: p.getTextColor(),
                  font: p.getFont(),
                  textVerticalAlign: 'middle',
                  textAlign: 'center'
                },
                silent: !0
              })
            ),
              g('pageNext', 1);
          },
          layoutInner: function(e, t, n, a, r, s) {
            var c = this.getSelectorGroup(),
              h = e.getOrient().index,
              d = l[h],
              p = u[h],
              g = l[1 - h],
              f = u[1 - h];
            r && o.box('horizontal', c, e.get('selectorItemGap', !0));
            var m = e.get('selectorButtonGap', !0),
              v = c.getBoundingRect(),
              y = [-v.x, -v.y],
              x = i.clone(n);
            r && (x[d] = n[d] - v[d] - m);
            var _ = this._layoutContentAndController(e, a, x, h, d, g, f);
            if (r) {
              if ('end' === s) y[h] += _[d] + m;
              else {
                var b = v[d] + m;
                (y[h] -= b), (_[p] -= b);
              }
              (_[d] += v[d] + m),
                (y[1 - h] += _[f] + _[g] / 2 - v[g] / 2),
                (_[g] = Math.max(_[g], v[g])),
                (_[f] = Math.min(_[f], v[f] + y[1 - h])),
                c.attr('position', y);
            }
            return _;
          },
          _layoutContentAndController: function(e, t, n, r, s, l, u) {
            var c = this.getContentGroup(),
              h = this._containerGroup,
              d = this._controllerGroup;
            o.box(e.get('orient'), c, e.get('itemGap'), r ? n.width : null, r ? null : n.height),
              o.box('horizontal', d, e.get('pageButtonItemGap', !0));
            var p = c.getBoundingRect(),
              g = d.getBoundingRect(),
              f = (this._showController = p[s] > n[s]),
              m = [-p.x, -p.y];
            t || (m[r] = c.position[r]);
            var v = [0, 0],
              y = [-g.x, -g.y],
              x = i.retrieve2(e.get('pageButtonGap', !0), e.get('itemGap', !0));
            f &&
              ('end' === e.get('pageButtonPosition', !0)
                ? (y[r] += n[s] - g[s])
                : (v[r] += g[s] + x));
            (y[1 - r] += p[l] / 2 - g[l] / 2),
              c.attr('position', m),
              h.attr('position', v),
              d.attr('position', y);
            var _ = { x: 0, y: 0 };
            if (
              ((_[s] = f ? n[s] : p[s]),
              (_[l] = Math.max(p[l], g[l])),
              (_[u] = Math.min(0, g[u] + y[1 - r])),
              (h.__rectSize = n[s]),
              f)
            ) {
              var b = { x: 0, y: 0 };
              (b[s] = Math.max(n[s] - g[s] - x, 0)),
                (b[l] = _[l]),
                h.setClipPath(new a.Rect({ shape: b })),
                (h.__rectSize = b[s]);
            } else
              d.eachChild(function(e) {
                e.attr({ invisible: !0, silent: !0 });
              });
            var S = this._getPageInfo(e);
            return (
              null != S.pageIndex && a.updateProps(c, { position: S.contentPosition }, !!f && e),
              this._updatePageInfoView(e, S),
              _
            );
          },
          _pageGo: function(e, t, n) {
            var i = this._getPageInfo(t)[e];
            null != i &&
              n.dispatchAction({ type: 'legendScroll', scrollDataIndex: i, legendId: t.id });
          },
          _updatePageInfoView: function(e, t) {
            var n = this._controllerGroup;
            i.each(['pagePrev', 'pageNext'], function(i) {
              var a = null != t[i + 'DataIndex'],
                o = n.childOfName(i);
              o &&
                (o.setStyle(
                  'fill',
                  a ? e.get('pageIconColor', !0) : e.get('pageIconInactiveColor', !0)
                ),
                (o.cursor = a ? 'pointer' : 'default'));
            });
            var a = n.childOfName('pageText'),
              o = e.get('pageFormatter'),
              r = t.pageIndex,
              s = null != r ? r + 1 : 0,
              l = t.pageCount;
            a &&
              o &&
              a.setStyle(
                'text',
                i.isString(o)
                  ? o.replace('{current}', s).replace('{total}', l)
                  : o({ current: s, total: l })
              );
          },
          _getPageInfo: function(e) {
            var t = e.get('scrollDataIndex', !0),
              n = this.getContentGroup(),
              i = this._containerGroup.__rectSize,
              a = e.getOrient().index,
              o = l[a],
              r = u[a],
              s = this._findTargetItemIndex(t),
              c = n.children(),
              h = c[s],
              d = c.length,
              p = d ? 1 : 0,
              g = {
                contentPosition: n.position.slice(),
                pageCount: p,
                pageIndex: p - 1,
                pagePrevDataIndex: null,
                pageNextDataIndex: null
              };
            if (!h) return g;
            var f = _(h);
            g.contentPosition[a] = -f.s;
            for (var m = s + 1, v = f, y = f, x = null; m <= d; ++m)
              ((!(x = _(c[m])) && y.e > v.s + i) || (x && !b(x, v.s))) &&
                (v = y.i > v.i ? y : x) &&
                (null == g.pageNextDataIndex && (g.pageNextDataIndex = v.i), ++g.pageCount),
                (y = x);
            for (m = s - 1, v = f, y = f, x = null; m >= -1; --m)
              ((x = _(c[m])) && b(y, x.s)) ||
                !(v.i < y.i) ||
                ((y = v),
                null == g.pagePrevDataIndex && (g.pagePrevDataIndex = v.i),
                ++g.pageCount,
                ++g.pageIndex),
                (v = x);
            return g;
            function _(e) {
              if (e) {
                var t = e.getBoundingRect(),
                  n = t[r] + e.position[a];
                return { s: n, e: n + t[o], i: e.__legendDataIndex };
              }
            }
            function b(e, t) {
              return e.e >= t && e.s <= t + i;
            }
          },
          _findTargetItemIndex: function(e) {
            var t,
              n,
              i = this.getContentGroup();
            return (
              this._showController &&
                i.eachChild(function(i, a) {
                  var o = i.__legendDataIndex;
                  null == n && null != o && (n = a), o === e && (t = a);
                }),
              null != t ? t : n
            );
          }
        }),
        h = c;
      e.exports = h;
    },
    function(e, t, n) {
      n(4).registerAction('legendScroll', 'legendscroll', function(e, t) {
        var n = e.scrollDataIndex;
        null != n &&
          t.eachComponent({ mainType: 'legend', subType: 'scroll', query: e }, function(e) {
            e.setScrollDataIndex(n);
          });
      });
    },
    function(e, t, n) {
      n(460), n(461);
    },
    function(e, t, n) {
      var i = n(127).extend({
        type: 'dataZoom.slider',
        layoutMode: 'box',
        defaultOption: {
          show: !0,
          right: 'ph',
          top: 'ph',
          width: 'ph',
          height: 'ph',
          left: null,
          bottom: null,
          backgroundColor: 'rgba(47,69,84,0)',
          dataBackground: {
            lineStyle: { color: '#2f4554', width: 0.5, opacity: 0.3 },
            areaStyle: { color: 'rgba(47,69,84,0.3)', opacity: 0.3 }
          },
          borderColor: '#ddd',
          fillerColor: 'rgba(167,183,204,0.4)',
          handleIcon:
            'M8.2,13.6V3.9H6.3v9.7H3.1v14.9h3.3v9.7h1.8v-9.7h3.3V13.6H8.2z M9.7,24.4H4.8v-1.4h4.9V24.4z M9.7,19.1H4.8v-1.4h4.9V19.1z',
          handleSize: '100%',
          handleStyle: { color: '#a7b7cc' },
          labelPrecision: null,
          labelFormatter: null,
          showDetail: !0,
          showDataShadow: 'auto',
          realtime: !0,
          zoomLock: !1,
          textStyle: { color: '#333' }
        }
      });
      e.exports = i;
    },
    function(e, t, n) {
      var i = n(2),
        a = n(69),
        o = n(6),
        r = n(85),
        s = n(128),
        l = n(16),
        u = n(25),
        c = n(126),
        h = o.Rect,
        d = l.linearMap,
        p = l.asc,
        g = i.bind,
        f = i.each,
        m = 'horizontal',
        v = 5,
        y = ['line', 'bar', 'candlestick', 'scatter'],
        x = s.extend({
          type: 'dataZoom.slider',
          init: function(e, t) {
            (this._displayables = {}),
              this._orient,
              this._range,
              this._handleEnds,
              this._size,
              this._handleWidth,
              this._handleHeight,
              this._location,
              this._dragging,
              this._dataShadowInfo,
              (this.api = t);
          },
          render: function(e, t, n, i) {
            x.superApply(this, 'render', arguments),
              r.createOrUpdate(
                this,
                '_dispatchZoomAction',
                this.dataZoomModel.get('throttle'),
                'fixRate'
              ),
              (this._orient = e.get('orient')),
              !1 !== this.dataZoomModel.get('show')
                ? ((i && 'dataZoom' === i.type && i.from === this.uid) || this._buildView(),
                  this._updateView())
                : this.group.removeAll();
          },
          remove: function() {
            x.superApply(this, 'remove', arguments), r.clear(this, '_dispatchZoomAction');
          },
          dispose: function() {
            x.superApply(this, 'dispose', arguments), r.clear(this, '_dispatchZoomAction');
          },
          _buildView: function() {
            var e = this.group;
            e.removeAll(), this._resetLocation(), this._resetInterval();
            var t = (this._displayables.barGroup = new o.Group());
            this._renderBackground(),
              this._renderHandle(),
              this._renderDataShadow(),
              e.add(t),
              this._positionGroup();
          },
          _resetLocation: function() {
            var e = this.dataZoomModel,
              t = this.api,
              n = this._findCoordRect(),
              a = { width: t.getWidth(), height: t.getHeight() },
              o =
                this._orient === m
                  ? {
                      right: a.width - n.x - n.width,
                      top: a.height - 30 - 7,
                      width: n.width,
                      height: 30
                    }
                  : { right: 7, top: n.y, width: 30, height: n.height },
              r = u.getLayoutParams(e.option);
            i.each(['right', 'top', 'width', 'height'], function(e) {
              'ph' === r[e] && (r[e] = o[e]);
            });
            var s = u.getLayoutRect(r, a, e.padding);
            (this._location = { x: s.x, y: s.y }),
              (this._size = [s.width, s.height]),
              'vertical' === this._orient && this._size.reverse();
          },
          _positionGroup: function() {
            var e = this.group,
              t = this._location,
              n = this._orient,
              i = this.dataZoomModel.getFirstTargetAxisModel(),
              a = i && i.get('inverse'),
              o = this._displayables.barGroup,
              r = (this._dataShadowInfo || {}).otherAxisInverse;
            o.attr(
              n !== m || a
                ? n === m && a
                  ? { scale: r ? [-1, 1] : [-1, -1] }
                  : 'vertical' !== n || a
                  ? { scale: r ? [-1, -1] : [-1, 1], rotation: Math.PI / 2 }
                  : { scale: r ? [1, -1] : [1, 1], rotation: Math.PI / 2 }
                : { scale: r ? [1, 1] : [1, -1] }
            );
            var s = e.getBoundingRect([o]);
            e.attr('position', [t.x - s.x, t.y - s.y]);
          },
          _getViewExtent: function() {
            return [0, this._size[0]];
          },
          _renderBackground: function() {
            var e = this.dataZoomModel,
              t = this._size,
              n = this._displayables.barGroup;
            n.add(
              new h({
                silent: !0,
                shape: { x: 0, y: 0, width: t[0], height: t[1] },
                style: { fill: e.get('backgroundColor') },
                z2: -40
              })
            ),
              n.add(
                new h({
                  shape: { x: 0, y: 0, width: t[0], height: t[1] },
                  style: { fill: 'transparent' },
                  z2: 0,
                  onclick: i.bind(this._onClickPanelClick, this)
                })
              );
          },
          _renderDataShadow: function() {
            var e = (this._dataShadowInfo = this._prepareDataShadowInfo());
            if (e) {
              var t = this._size,
                n = e.series,
                a = n.getRawData(),
                r = n.getShadowDim ? n.getShadowDim() : e.otherDim;
              if (null != r) {
                var s = a.getDataExtent(r),
                  l = 0.3 * (s[1] - s[0]);
                s = [s[0] - l, s[1] + l];
                var u,
                  c = [0, t[1]],
                  h = [0, t[0]],
                  p = [
                    [t[0], 0],
                    [0, 0]
                  ],
                  g = [],
                  f = h[1] / (a.count() - 1),
                  m = 0,
                  v = Math.round(a.count() / t[0]);
                a.each([r], function(e, t) {
                  if (v > 0 && t % v) m += f;
                  else {
                    var n = null == e || isNaN(e) || '' === e,
                      i = n ? 0 : d(e, s, c, !0);
                    n && !u && t
                      ? (p.push([p[p.length - 1][0], 0]), g.push([g[g.length - 1][0], 0]))
                      : !n && u && (p.push([m, 0]), g.push([m, 0])),
                      p.push([m, i]),
                      g.push([m, i]),
                      (m += f),
                      (u = n);
                  }
                });
                var y = this.dataZoomModel;
                this._displayables.barGroup.add(
                  new o.Polygon({
                    shape: { points: p },
                    style: i.defaults(
                      { fill: y.get('dataBackgroundColor') },
                      y.getModel('dataBackground.areaStyle').getAreaStyle()
                    ),
                    silent: !0,
                    z2: -20
                  })
                ),
                  this._displayables.barGroup.add(
                    new o.Polyline({
                      shape: { points: g },
                      style: y.getModel('dataBackground.lineStyle').getLineStyle(),
                      silent: !0,
                      z2: -19
                    })
                  );
              }
            }
          },
          _prepareDataShadowInfo: function() {
            var e = this.dataZoomModel,
              t = e.get('showDataShadow');
            if (!1 !== t) {
              var n,
                a = this.ecModel;
              return (
                e.eachTargetAxis(function(o, r) {
                  var s = e.getAxisProxy(o.name, r).getTargetSeriesModels();
                  i.each(
                    s,
                    function(e) {
                      if (!n && !(!0 !== t && i.indexOf(y, e.get('type')) < 0)) {
                        var s,
                          l = a.getComponent(o.axis, r).axis,
                          u = { x: 'y', y: 'x', radius: 'angle', angle: 'radius' }[o.name],
                          c = e.coordinateSystem;
                        null != u && c.getOtherAxis && (s = c.getOtherAxis(l).inverse),
                          (u = e.getData().mapDimension(u)),
                          (n = {
                            thisAxis: l,
                            series: e,
                            thisDim: o.name,
                            otherDim: u,
                            otherAxisInverse: s
                          });
                      }
                    },
                    this
                  );
                }, this),
                n
              );
            }
          },
          _renderHandle: function() {
            var e = this._displayables,
              t = (e.handles = []),
              n = (e.handleLabels = []),
              i = this._displayables.barGroup,
              r = this._size,
              s = this.dataZoomModel;
            i.add(
              (e.filler = new h({
                draggable: !0,
                cursor: _(this._orient),
                drift: g(this._onDragMove, this, 'all'),
                onmousemove: function(e) {
                  a.stop(e.event);
                },
                ondragstart: g(this._showDataInfo, this, !0),
                ondragend: g(this._onDragEnd, this),
                onmouseover: g(this._showDataInfo, this, !0),
                onmouseout: g(this._showDataInfo, this, !1),
                style: { fill: s.get('fillerColor'), textPosition: 'inside' }
              }))
            ),
              i.add(
                new h({
                  silent: !0,
                  subPixelOptimize: !0,
                  shape: { x: 0, y: 0, width: r[0], height: r[1] },
                  style: {
                    stroke: s.get('dataBackgroundColor') || s.get('borderColor'),
                    lineWidth: 1,
                    fill: 'rgba(0,0,0,0)'
                  }
                })
              ),
              f(
                [0, 1],
                function(e) {
                  var r = o.createIcon(
                      s.get('handleIcon'),
                      {
                        cursor: _(this._orient),
                        draggable: !0,
                        drift: g(this._onDragMove, this, e),
                        onmousemove: function(e) {
                          a.stop(e.event);
                        },
                        ondragend: g(this._onDragEnd, this),
                        onmouseover: g(this._showDataInfo, this, !0),
                        onmouseout: g(this._showDataInfo, this, !1)
                      },
                      { x: -1, y: 0, width: 2, height: 2 }
                    ),
                    u = r.getBoundingRect();
                  (this._handleHeight = l.parsePercent(s.get('handleSize'), this._size[1])),
                    (this._handleWidth = (u.width / u.height) * this._handleHeight),
                    r.setStyle(s.getModel('handleStyle').getItemStyle());
                  var c = s.get('handleColor');
                  null != c && (r.style.fill = c), i.add((t[e] = r));
                  var h = s.textStyleModel;
                  this.group.add(
                    (n[e] = new o.Text({
                      silent: !0,
                      invisible: !0,
                      style: {
                        x: 0,
                        y: 0,
                        text: '',
                        textVerticalAlign: 'middle',
                        textAlign: 'center',
                        textFill: h.getTextColor(),
                        textFont: h.getFont()
                      },
                      z2: 10
                    }))
                  );
                },
                this
              );
          },
          _resetInterval: function() {
            var e = (this._range = this.dataZoomModel.getPercentRange()),
              t = this._getViewExtent();
            this._handleEnds = [d(e[0], [0, 100], t, !0), d(e[1], [0, 100], t, !0)];
          },
          _updateInterval: function(e, t) {
            var n = this.dataZoomModel,
              i = this._handleEnds,
              a = this._getViewExtent(),
              o = n.findRepresentativeAxisProxy().getMinMaxSpan(),
              r = [0, 100];
            c(
              t,
              i,
              a,
              n.get('zoomLock') ? 'all' : e,
              null != o.minSpan ? d(o.minSpan, r, a, !0) : null,
              null != o.maxSpan ? d(o.maxSpan, r, a, !0) : null
            );
            var s = this._range,
              l = (this._range = p([d(i[0], a, r, !0), d(i[1], a, r, !0)]));
            return !s || s[0] !== l[0] || s[1] !== l[1];
          },
          _updateView: function(e) {
            var t = this._displayables,
              n = this._handleEnds,
              i = p(n.slice()),
              a = this._size;
            f(
              [0, 1],
              function(e) {
                var i = t.handles[e],
                  o = this._handleHeight;
                i.attr({ scale: [o / 2, o / 2], position: [n[e], a[1] / 2 - o / 2] });
              },
              this
            ),
              t.filler.setShape({ x: i[0], y: 0, width: i[1] - i[0], height: a[1] }),
              this._updateDataInfo(e);
          },
          _updateDataInfo: function(e) {
            var t = this.dataZoomModel,
              n = this._displayables,
              i = n.handleLabels,
              a = this._orient,
              r = ['', ''];
            if (t.get('showDetail')) {
              var s = t.findRepresentativeAxisProxy();
              if (s) {
                var l = s.getAxisModel().axis,
                  u = this._range,
                  c = e
                    ? s.calculateDataWindow({ start: u[0], end: u[1] }).valueWindow
                    : s.getDataValueWindow();
                r = [this._formatLabel(c[0], l), this._formatLabel(c[1], l)];
              }
            }
            var h = p(this._handleEnds.slice());
            function d(e) {
              var t = o.getTransform(n.handles[e].parent, this.group),
                s = o.transformDirection(0 === e ? 'right' : 'left', t),
                l = this._handleWidth / 2 + v,
                u = o.applyTransform([h[e] + (0 === e ? -l : l), this._size[1] / 2], t);
              i[e].setStyle({
                x: u[0],
                y: u[1],
                textVerticalAlign: a === m ? 'middle' : s,
                textAlign: a === m ? s : 'center',
                text: r[e]
              });
            }
            d.call(this, 0), d.call(this, 1);
          },
          _formatLabel: function(e, t) {
            var n = this.dataZoomModel,
              a = n.get('labelFormatter'),
              o = n.get('labelPrecision');
            (null != o && 'auto' !== o) || (o = t.getPixelPrecision());
            var r =
              null == e || isNaN(e)
                ? ''
                : 'category' === t.type || 'time' === t.type
                ? t.scale.getLabel(Math.round(e))
                : e.toFixed(Math.min(o, 20));
            return i.isFunction(a) ? a(e, r) : i.isString(a) ? a.replace('{value}', r) : r;
          },
          _showDataInfo: function(e) {
            e = this._dragging || e;
            var t = this._displayables.handleLabels;
            t[0].attr('invisible', !e), t[1].attr('invisible', !e);
          },
          _onDragMove: function(e, t, n) {
            this._dragging = !0;
            var i = this._displayables.barGroup.getLocalTransform(),
              a = o.applyTransform([t, n], i, !0),
              r = this._updateInterval(e, a[0]),
              s = this.dataZoomModel.get('realtime');
            this._updateView(!s), r && s && this._dispatchZoomAction();
          },
          _onDragEnd: function() {
            (this._dragging = !1),
              this._showDataInfo(!1),
              !this.dataZoomModel.get('realtime') && this._dispatchZoomAction();
          },
          _onClickPanelClick: function(e) {
            var t = this._size,
              n = this._displayables.barGroup.transformCoordToLocal(e.offsetX, e.offsetY);
            if (!(n[0] < 0 || n[0] > t[0] || n[1] < 0 || n[1] > t[1])) {
              var i = this._handleEnds,
                a = (i[0] + i[1]) / 2,
                o = this._updateInterval('all', n[0] - a);
              this._updateView(), o && this._dispatchZoomAction();
            }
          },
          _dispatchZoomAction: function() {
            var e = this._range;
            this.api.dispatchAction({
              type: 'dataZoom',
              from: this.uid,
              dataZoomId: this.dataZoomModel.id,
              start: e[0],
              end: e[1]
            });
          },
          _findCoordRect: function() {
            var e;
            if (
              (f(this.getTargetCoordInfo(), function(t) {
                if (!e && t.length) {
                  var n = t[0].model.coordinateSystem;
                  e = n.getRect && n.getRect();
                }
              }),
              !e)
            ) {
              var t = this.api.getWidth(),
                n = this.api.getHeight();
              e = { x: 0.2 * t, y: 0.2 * n, width: 0.6 * t, height: 0.6 * n };
            }
            return e;
          }
        });
      function _(e) {
        return 'vertical' === e ? 'ns-resize' : 'ew-resize';
      }
      var b = x;
      e.exports = b;
    },
    function(e, t, n) {
      var i = n(127).extend({
        type: 'dataZoom.inside',
        defaultOption: {
          disabled: !1,
          zoomLock: !1,
          zoomOnMouseWheel: !0,
          moveOnMouseMove: !0,
          moveOnMouseWheel: !1,
          preventDefaultMouseMove: !0
        }
      });
      e.exports = i;
    },
    function(e, t, n) {
      var i = n(2),
        a = n(128),
        o = n(126),
        r = n(1017),
        s = i.bind,
        l = a.extend({
          type: 'dataZoom.inside',
          init: function(e, t) {
            this._range;
          },
          render: function(e, t, n, a) {
            l.superApply(this, 'render', arguments),
              (this._range = e.getPercentRange()),
              i.each(
                this.getTargetCoordInfo(),
                function(t, a) {
                  var o = i.map(t, function(e) {
                    return r.generateCoordId(e.model);
                  });
                  i.each(
                    t,
                    function(t) {
                      var l = t.model,
                        c = {};
                      i.each(
                        ['pan', 'zoom', 'scrollMove'],
                        function(e) {
                          c[e] = s(u[e], this, t, a);
                        },
                        this
                      ),
                        r.register(n, {
                          coordId: r.generateCoordId(l),
                          allCoordIds: o,
                          containsPoint: function(e, t, n) {
                            return l.coordinateSystem.containPoint([t, n]);
                          },
                          dataZoomId: e.id,
                          dataZoomModel: e,
                          getRange: c
                        });
                    },
                    this
                  );
                },
                this
              );
          },
          dispose: function() {
            r.unregister(this.api, this.dataZoomModel.id),
              l.superApply(this, 'dispose', arguments),
              (this._range = null);
          }
        }),
        u = {
          zoom: function(e, t, n, i) {
            var a = this._range,
              r = a.slice(),
              s = e.axisModels[0];
            if (s) {
              var l = h[t](null, [i.originX, i.originY], s, n, e),
                u =
                  ((l.signal > 0
                    ? l.pixelStart + l.pixelLength - l.pixel
                    : l.pixel - l.pixelStart) /
                    l.pixelLength) *
                    (r[1] - r[0]) +
                  r[0],
                c = Math.max(1 / i.scale, 0);
              (r[0] = (r[0] - u) * c + u), (r[1] = (r[1] - u) * c + u);
              var d = this.dataZoomModel.findRepresentativeAxisProxy().getMinMaxSpan();
              return (
                o(0, r, [0, 100], 0, d.minSpan, d.maxSpan),
                (this._range = r),
                a[0] !== r[0] || a[1] !== r[1] ? r : void 0
              );
            }
          },
          pan: c(function(e, t, n, i, a, o) {
            var r = h[i]([o.oldX, o.oldY], [o.newX, o.newY], t, a, n);
            return (r.signal * (e[1] - e[0]) * r.pixel) / r.pixelLength;
          }),
          scrollMove: c(function(e, t, n, i, a, o) {
            return (
              h[i]([0, 0], [o.scrollDelta, o.scrollDelta], t, a, n).signal *
              (e[1] - e[0]) *
              o.scrollDelta
            );
          })
        };
      function c(e) {
        return function(t, n, i, a) {
          var r = this._range,
            s = r.slice(),
            l = t.axisModels[0];
          if (l) {
            var u = e(s, l, t, n, i, a);
            return (
              o(u, s, [0, 100], 'all'),
              (this._range = s),
              r[0] !== s[0] || r[1] !== s[1] ? s : void 0
            );
          }
        };
      }
      var h = {
          grid: function(e, t, n, i, a) {
            var o = n.axis,
              r = {},
              s = a.model.coordinateSystem.getRect();
            return (
              (e = e || [0, 0]),
              'x' === o.dim
                ? ((r.pixel = t[0] - e[0]),
                  (r.pixelLength = s.width),
                  (r.pixelStart = s.x),
                  (r.signal = o.inverse ? 1 : -1))
                : ((r.pixel = t[1] - e[1]),
                  (r.pixelLength = s.height),
                  (r.pixelStart = s.y),
                  (r.signal = o.inverse ? -1 : 1)),
              r
            );
          },
          polar: function(e, t, n, i, a) {
            var o = n.axis,
              r = {},
              s = a.model.coordinateSystem,
              l = s.getRadiusAxis().getExtent(),
              u = s.getAngleAxis().getExtent();
            return (
              (e = e ? s.pointToCoord(e) : [0, 0]),
              (t = s.pointToCoord(t)),
              'radiusAxis' === n.mainType
                ? ((r.pixel = t[0] - e[0]),
                  (r.pixelLength = l[1] - l[0]),
                  (r.pixelStart = l[0]),
                  (r.signal = o.inverse ? 1 : -1))
                : ((r.pixel = t[1] - e[1]),
                  (r.pixelLength = u[1] - u[0]),
                  (r.pixelStart = u[0]),
                  (r.signal = o.inverse ? -1 : 1)),
              r
            );
          },
          singleAxis: function(e, t, n, i, a) {
            var o = n.axis,
              r = a.model.coordinateSystem.getRect(),
              s = {};
            return (
              (e = e || [0, 0]),
              'horizontal' === o.orient
                ? ((s.pixel = t[0] - e[0]),
                  (s.pixelLength = r.width),
                  (s.pixelStart = r.x),
                  (s.signal = o.inverse ? 1 : -1))
                : ((s.pixel = t[1] - e[1]),
                  (s.pixelLength = r.height),
                  (s.pixelStart = r.y),
                  (s.signal = o.inverse ? -1 : 1)),
              s
            );
          }
        },
        d = l;
      e.exports = d;
    },
    function(e, t, n) {
      var i = n(2),
        a = n(158),
        o = n(85),
        r = '\0_ec_dataZoom_roams';
      function s(e) {
        var t = e.getZr();
        return t[r] || (t[r] = {});
      }
      function l(e) {
        i.each(e, function(t, n) {
          t.count || (t.controller.dispose(), delete e[n]);
        });
      }
      function u(e, t) {
        e.dispatchAction({ type: 'dataZoom', batch: t });
      }
      (t.register = function(e, t) {
        var n = s(e),
          r = t.dataZoomId,
          c = t.coordId;
        i.each(n, function(e, n) {
          var a = e.dataZoomInfos;
          a[r] && i.indexOf(t.allCoordIds, c) < 0 && (delete a[r], e.count--);
        }),
          l(n);
        var h = n[c];
        h ||
          (((h = n[c] = { coordId: c, dataZoomInfos: {}, count: 0 }).controller = (function(e, t) {
            var n = new a(e.getZr());
            return (
              i.each(['pan', 'zoom', 'scrollMove'], function(e) {
                n.on(e, function(n) {
                  var a = [];
                  i.each(t.dataZoomInfos, function(i) {
                    if (n.isAvailableBehavior(i.dataZoomModel.option)) {
                      var o = (i.getRange || {})[e],
                        r = o && o(t.controller, n);
                      !i.dataZoomModel.get('disabled', !0) &&
                        r &&
                        a.push({ dataZoomId: i.dataZoomId, start: r[0], end: r[1] });
                    }
                  }),
                    a.length && t.dispatchAction(a);
                });
              }),
              n
            );
          })(e, h)),
          (h.dispatchAction = i.curry(u, e))),
          !h.dataZoomInfos[r] && h.count++,
          (h.dataZoomInfos[r] = t);
        var d = (function(e) {
          var t,
            n = { type_true: 2, type_move: 1, type_false: 0, type_undefined: -1 },
            a = !0;
          return (
            i.each(e, function(e) {
              var i = e.dataZoomModel,
                o = !i.get('disabled', !0) && (!i.get('zoomLock', !0) || 'move');
              n['type_' + o] > n['type_' + t] && (t = o),
                (a &= i.get('preventDefaultMouseMove', !0));
            }),
            {
              controlType: t,
              opt: {
                zoomOnMouseWheel: !0,
                moveOnMouseMove: !0,
                moveOnMouseWheel: !0,
                preventDefaultMouseMove: !!a
              }
            }
          );
        })(h.dataZoomInfos);
        h.controller.enable(d.controlType, d.opt),
          h.controller.setPointerChecker(t.containsPoint),
          o.createOrUpdate(h, 'dispatchAction', t.dataZoomModel.get('throttle', !0), 'fixRate');
      }),
        (t.unregister = function(e, t) {
          var n = s(e);
          i.each(n, function(e) {
            e.controller.dispose();
            var n = e.dataZoomInfos;
            n[t] && (delete n[t], e.count--);
          }),
            l(n);
        }),
        (t.generateCoordId = function(e) {
          return e.type + '\0_' + e.id;
        });
    },
    function(e, t, n) {
      n(462), n(471);
    },
    function(e, t, n) {
      var i = n(2),
        a = n(466),
        o = n(16),
        r = [20, 140],
        s = a.extend({
          type: 'visualMap.continuous',
          defaultOption: {
            align: 'auto',
            calculable: !1,
            range: null,
            realtime: !0,
            itemHeight: null,
            itemWidth: null,
            hoverLink: !0,
            hoverLinkDataSize: null,
            hoverLinkOnHandle: null
          },
          optionUpdated: function(e, t) {
            s.superApply(this, 'optionUpdated', arguments),
              this.resetExtent(),
              this.resetVisual(function(e) {
                (e.mappingMethod = 'linear'), (e.dataExtent = this.getExtent());
              }),
              this._resetRange();
          },
          resetItemSize: function() {
            s.superApply(this, 'resetItemSize', arguments);
            var e = this.itemSize;
            'horizontal' === this._orient && e.reverse(),
              (null == e[0] || isNaN(e[0])) && (e[0] = r[0]),
              (null == e[1] || isNaN(e[1])) && (e[1] = r[1]);
          },
          _resetRange: function() {
            var e = this.getExtent(),
              t = this.option.range;
            !t || t.auto
              ? ((e.auto = 1), (this.option.range = e))
              : i.isArray(t) &&
                (t[0] > t[1] && t.reverse(),
                (t[0] = Math.max(t[0], e[0])),
                (t[1] = Math.min(t[1], e[1])));
          },
          completeVisualOption: function() {
            a.prototype.completeVisualOption.apply(this, arguments),
              i.each(
                this.stateList,
                function(e) {
                  var t = this.option.controller[e].symbolSize;
                  t && t[0] !== t[1] && (t[0] = 0);
                },
                this
              );
          },
          setSelected: function(e) {
            (this.option.range = e.slice()), this._resetRange();
          },
          getSelected: function() {
            var e = this.getExtent(),
              t = o.asc((this.get('range') || []).slice());
            return (
              t[0] > e[1] && (t[0] = e[1]),
              t[1] > e[1] && (t[1] = e[1]),
              t[0] < e[0] && (t[0] = e[0]),
              t[1] < e[0] && (t[1] = e[0]),
              t
            );
          },
          getValueState: function(e) {
            var t = this.option.range,
              n = this.getExtent();
            return (t[0] <= n[0] || t[0] <= e) && (t[1] >= n[1] || e <= t[1])
              ? 'inRange'
              : 'outOfRange';
          },
          findTargetDataIndices: function(e) {
            var t = [];
            return (
              this.eachTargetSeries(function(n) {
                var i = [],
                  a = n.getData();
                a.each(
                  this.getDataDimension(a),
                  function(t, n) {
                    e[0] <= t && t <= e[1] && i.push(n);
                  },
                  this
                ),
                  t.push({ seriesId: n.id, dataIndex: i });
              }, this),
              t
            );
          },
          getVisualMeta: function(e) {
            var t = l(this, 'outOfRange', this.getExtent()),
              n = l(this, 'inRange', this.option.range.slice()),
              i = [];
            function a(t, n) {
              i.push({ value: t, color: e(t, n) });
            }
            for (
              var o = 0, r = 0, s = n.length, u = t.length;
              r < u && (!n.length || t[r] <= n[0]);
              r++
            )
              t[r] < n[o] && a(t[r], 'outOfRange');
            for (var c = 1; o < s; o++, c = 0)
              c && i.length && a(n[o], 'outOfRange'), a(n[o], 'inRange');
            for (c = 1; r < u; r++)
              (!n.length || n[n.length - 1] < t[r]) &&
                (c && (i.length && a(i[i.length - 1].value, 'outOfRange'), (c = 0)),
                a(t[r], 'outOfRange'));
            var h = i.length;
            return {
              stops: i,
              outerColors: [h ? i[0].color : 'transparent', h ? i[h - 1].color : 'transparent']
            };
          }
        });
      function l(e, t, n) {
        if (n[0] === n[1]) return n.slice();
        for (var i = (n[1] - n[0]) / 200, a = n[0], o = [], r = 0; r <= 200 && a < n[1]; r++)
          o.push(a), (a += i);
        return o.push(n[1]), o;
      }
      var u = s;
      e.exports = u;
    },
    function(e, t, n) {
      var i = n(2),
        a = n(289),
        o = n(69),
        r = n(468),
        s = n(6),
        l = n(16),
        u = n(126),
        c = n(469),
        h = n(18),
        d = l.linearMap,
        p = i.each,
        g = Math.min,
        f = Math.max,
        m = 12,
        v = 6,
        y = r.extend({
          type: 'visualMap.continuous',
          init: function() {
            y.superApply(this, 'init', arguments),
              (this._shapes = {}),
              (this._dataInterval = []),
              (this._handleEnds = []),
              this._orient,
              this._useHandle,
              (this._hoverLinkDataIndices = []),
              this._dragging,
              this._hovering;
          },
          doRender: function(e, t, n, i) {
            (i && 'selectDataRange' === i.type && i.from === this.uid) || this._buildView();
          },
          _buildView: function() {
            this.group.removeAll();
            var e = this.visualMapModel,
              t = this.group;
            (this._orient = e.get('orient')),
              (this._useHandle = e.get('calculable')),
              this._resetInterval(),
              this._renderBar(t);
            var n = e.get('text');
            this._renderEndsText(t, n, 0),
              this._renderEndsText(t, n, 1),
              this._updateView(!0),
              this.renderBackground(t),
              this._updateView(),
              this._enableHoverLinkToSeries(),
              this._enableHoverLinkFromSeries(),
              this.positionGroup(t);
          },
          _renderEndsText: function(e, t, n) {
            if (t) {
              var i = t[1 - n];
              i = null != i ? i + '' : '';
              var a = this.visualMapModel,
                o = a.get('textGap'),
                r = a.itemSize,
                l = this._shapes.barGroup,
                u = this._applyTransform([r[0] / 2, 0 === n ? -o : r[1] + o], l),
                c = this._applyTransform(0 === n ? 'bottom' : 'top', l),
                h = this._orient,
                d = this.visualMapModel.textStyleModel;
              this.group.add(
                new s.Text({
                  style: {
                    x: u[0],
                    y: u[1],
                    textVerticalAlign: 'horizontal' === h ? 'middle' : c,
                    textAlign: 'horizontal' === h ? c : 'center',
                    text: i,
                    textFont: d.getFont(),
                    textFill: d.getTextColor()
                  }
                })
              );
            }
          },
          _renderBar: function(e) {
            var t = this.visualMapModel,
              n = this._shapes,
              a = t.itemSize,
              o = this._orient,
              r = this._useHandle,
              s = c.getItemAlign(t, this.api, a),
              l = (n.barGroup = this._createBarGroup(s));
            l.add((n.outOfRange = x())),
              l.add(
                (n.inRange = x(
                  null,
                  r ? b(this._orient) : null,
                  i.bind(this._dragHandle, this, 'all', !1),
                  i.bind(this._dragHandle, this, 'all', !0)
                ))
              );
            var u = t.textStyleModel.getTextRect('\u56fd'),
              h = f(u.width, u.height);
            r &&
              ((n.handleThumbs = []),
              (n.handleLabels = []),
              (n.handleLabelPoints = []),
              this._createHandle(l, 0, a, h, o, s),
              this._createHandle(l, 1, a, h, o, s)),
              this._createIndicator(l, a, h, o),
              e.add(l);
          },
          _createHandle: function(e, t, n, a, r) {
            var l = i.bind(this._dragHandle, this, t, !1),
              u = i.bind(this._dragHandle, this, t, !0),
              c = x(
                (function(e, t) {
                  return 0 === e
                    ? [
                        [0, 0],
                        [t, 0],
                        [t, -t]
                      ]
                    : [
                        [0, 0],
                        [t, 0],
                        [t, t]
                      ];
                })(t, a),
                b(this._orient),
                l,
                u
              );
            (c.position[0] = n[0]), e.add(c);
            var h = this.visualMapModel.textStyleModel,
              d = new s.Text({
                draggable: !0,
                drift: l,
                onmousemove: function(e) {
                  o.stop(e.event);
                },
                ondragend: u,
                style: { x: 0, y: 0, text: '', textFont: h.getFont(), textFill: h.getTextColor() }
              });
            this.group.add(d);
            var p = [
                'horizontal' === r ? a / 2 : 1.5 * a,
                'horizontal' === r ? (0 === t ? -1.5 * a : 1.5 * a) : 0 === t ? -a / 2 : a / 2
              ],
              g = this._shapes;
            (g.handleThumbs[t] = c), (g.handleLabelPoints[t] = p), (g.handleLabels[t] = d);
          },
          _createIndicator: function(e, t, n, i) {
            var a = x([[0, 0]], 'move');
            (a.position[0] = t[0]), a.attr({ invisible: !0, silent: !0 }), e.add(a);
            var o = this.visualMapModel.textStyleModel,
              r = new s.Text({
                silent: !0,
                invisible: !0,
                style: { x: 0, y: 0, text: '', textFont: o.getFont(), textFill: o.getTextColor() }
              });
            this.group.add(r);
            var l = ['horizontal' === i ? n / 2 : v + 3, 0],
              u = this._shapes;
            (u.indicator = a), (u.indicatorLabel = r), (u.indicatorLabelPoint = l);
          },
          _dragHandle: function(e, t, n, i) {
            if (this._useHandle) {
              if (((this._dragging = !t), !t)) {
                var a = this._applyTransform([n, i], this._shapes.barGroup, !0);
                this._updateInterval(e, a[1]), this._updateView();
              }
              t === !this.visualMapModel.get('realtime') &&
                this.api.dispatchAction({
                  type: 'selectDataRange',
                  from: this.uid,
                  visualMapId: this.visualMapModel.id,
                  selected: this._dataInterval.slice()
                }),
                t
                  ? !this._hovering && this._clearHoverLinkToSeries()
                  : _(this.visualMapModel) && this._doHoverLinkToSeries(this._handleEnds[e], !1);
            }
          },
          _resetInterval: function() {
            var e = this.visualMapModel,
              t = (this._dataInterval = e.getSelected()),
              n = e.getExtent(),
              i = [0, e.itemSize[1]];
            this._handleEnds = [d(t[0], n, i, !0), d(t[1], n, i, !0)];
          },
          _updateInterval: function(e, t) {
            t = t || 0;
            var n = this.visualMapModel,
              i = this._handleEnds,
              a = [0, n.itemSize[1]];
            u(t, i, a, e, 0);
            var o = n.getExtent();
            this._dataInterval = [d(i[0], a, o, !0), d(i[1], a, o, !0)];
          },
          _updateView: function(e) {
            var t = this.visualMapModel,
              n = t.getExtent(),
              i = this._shapes,
              a = [0, t.itemSize[1]],
              o = e ? a : this._handleEnds,
              r = this._createBarVisual(this._dataInterval, n, o, 'inRange'),
              s = this._createBarVisual(n, n, a, 'outOfRange');
            i.inRange
              .setStyle({ fill: r.barColor, opacity: r.opacity })
              .setShape('points', r.barPoints),
              i.outOfRange
                .setStyle({ fill: s.barColor, opacity: s.opacity })
                .setShape('points', s.barPoints),
              this._updateHandle(o, r);
          },
          _createBarVisual: function(e, t, n, i) {
            var o = { forceState: i, convertOpacityToAlpha: !0 },
              r = this._makeColorGradient(e, o),
              s = [
                this.getControllerVisual(e[0], 'symbolSize', o),
                this.getControllerVisual(e[1], 'symbolSize', o)
              ],
              l = this._createBarPoints(n, s);
            return {
              barColor: new a(0, 0, 0, 1, r),
              barPoints: l,
              handlesColor: [r[0].color, r[r.length - 1].color]
            };
          },
          _makeColorGradient: function(e, t) {
            var n = [],
              i = (e[1] - e[0]) / 100;
            n.push({ color: this.getControllerVisual(e[0], 'color', t), offset: 0 });
            for (var a = 1; a < 100; a++) {
              var o = e[0] + i * a;
              if (o > e[1]) break;
              n.push({ color: this.getControllerVisual(o, 'color', t), offset: a / 100 });
            }
            return n.push({ color: this.getControllerVisual(e[1], 'color', t), offset: 1 }), n;
          },
          _createBarPoints: function(e, t) {
            var n = this.visualMapModel.itemSize;
            return [
              [n[0] - t[0], e[0]],
              [n[0], e[0]],
              [n[0], e[1]],
              [n[0] - t[1], e[1]]
            ];
          },
          _createBarGroup: function(e) {
            var t = this._orient,
              n = this.visualMapModel.get('inverse');
            return new s.Group(
              'horizontal' !== t || n
                ? 'horizontal' === t && n
                  ? { scale: 'bottom' === e ? [-1, 1] : [1, 1], rotation: -Math.PI / 2 }
                  : 'vertical' !== t || n
                  ? { scale: 'left' === e ? [1, 1] : [-1, 1] }
                  : { scale: 'left' === e ? [1, -1] : [-1, -1] }
                : { scale: 'bottom' === e ? [1, 1] : [-1, 1], rotation: Math.PI / 2 }
            );
          },
          _updateHandle: function(e, t) {
            if (this._useHandle) {
              var n = this._shapes,
                i = this.visualMapModel,
                a = n.handleThumbs,
                o = n.handleLabels;
              p(
                [0, 1],
                function(r) {
                  var l = a[r];
                  l.setStyle('fill', t.handlesColor[r]), (l.position[1] = e[r]);
                  var u = s.applyTransform(n.handleLabelPoints[r], s.getTransform(l, this.group));
                  o[r].setStyle({
                    x: u[0],
                    y: u[1],
                    text: i.formatValueText(this._dataInterval[r]),
                    textVerticalAlign: 'middle',
                    textAlign: this._applyTransform(
                      'horizontal' === this._orient ? (0 === r ? 'bottom' : 'top') : 'left',
                      n.barGroup
                    )
                  });
                },
                this
              );
            }
          },
          _showIndicator: function(e, t, n, i) {
            var a = this.visualMapModel,
              o = a.getExtent(),
              r = a.itemSize,
              l = [0, r[1]],
              u = d(e, o, l, !0),
              c = this._shapes,
              h = c.indicator;
            if (h) {
              (h.position[1] = u),
                h.attr('invisible', !1),
                h.setShape(
                  'points',
                  (function(e, t, n, i) {
                    return e
                      ? [
                          [0, -g(t, f(n, 0))],
                          [v, 0],
                          [0, g(t, f(i - n, 0))]
                        ]
                      : [
                          [0, 0],
                          [5, -5],
                          [5, 5]
                        ];
                  })(!!n, i, u, r[1])
                );
              var p = this.getControllerVisual(e, 'color', { convertOpacityToAlpha: !0 });
              h.setStyle('fill', p);
              var m = s.applyTransform(c.indicatorLabelPoint, s.getTransform(h, this.group)),
                y = c.indicatorLabel;
              y.attr('invisible', !1);
              var x = this._applyTransform('left', c.barGroup),
                _ = this._orient;
              y.setStyle({
                text: (n || '') + a.formatValueText(t),
                textVerticalAlign: 'horizontal' === _ ? x : 'middle',
                textAlign: 'horizontal' === _ ? 'center' : x,
                x: m[0],
                y: m[1]
              });
            }
          },
          _enableHoverLinkToSeries: function() {
            var e = this;
            this._shapes.barGroup
              .on('mousemove', function(t) {
                if (((e._hovering = !0), !e._dragging)) {
                  var n = e.visualMapModel.itemSize,
                    i = e._applyTransform([t.offsetX, t.offsetY], e._shapes.barGroup, !0, !0);
                  (i[1] = g(f(0, i[1]), n[1])),
                    e._doHoverLinkToSeries(i[1], 0 <= i[0] && i[0] <= n[0]);
                }
              })
              .on('mouseout', function() {
                (e._hovering = !1), !e._dragging && e._clearHoverLinkToSeries();
              });
          },
          _enableHoverLinkFromSeries: function() {
            var e = this.api.getZr();
            this.visualMapModel.option.hoverLink
              ? (e.on('mouseover', this._hoverLinkFromSeriesMouseOver, this),
                e.on('mouseout', this._hideIndicator, this))
              : this._clearHoverLinkFromSeries();
          },
          _doHoverLinkToSeries: function(e, t) {
            var n = this.visualMapModel,
              i = n.itemSize;
            if (n.option.hoverLink) {
              var a = [0, i[1]],
                o = n.getExtent();
              e = g(f(a[0], e), a[1]);
              var r = (function(e, t, n) {
                  var i = m / 2,
                    a = e.get('hoverLinkDataSize');
                  a && (i = d(a, t, n, !0) / 2);
                  return i;
                })(n, o, a),
                s = [e - r, e + r],
                l = d(e, a, o, !0),
                u = [d(s[0], a, o, !0), d(s[1], a, o, !0)];
              s[0] < a[0] && (u[0] = -1 / 0),
                s[1] > a[1] && (u[1] = 1 / 0),
                t &&
                  (u[0] === -1 / 0
                    ? this._showIndicator(l, u[1], '< ', r)
                    : u[1] === 1 / 0
                    ? this._showIndicator(l, u[0], '> ', r)
                    : this._showIndicator(l, l, '\u2248 ', r));
              var p = this._hoverLinkDataIndices,
                v = [];
              (t || _(n)) && (v = this._hoverLinkDataIndices = n.findTargetDataIndices(u));
              var y = h.compressBatches(p, v);
              this._dispatchHighDown('downplay', c.makeHighDownBatch(y[0], n)),
                this._dispatchHighDown('highlight', c.makeHighDownBatch(y[1], n));
            }
          },
          _hoverLinkFromSeriesMouseOver: function(e) {
            var t = e.target,
              n = this.visualMapModel;
            if (t && null != t.dataIndex) {
              var i = this.ecModel.getSeriesByIndex(t.seriesIndex);
              if (n.isTargetSeries(i)) {
                var a = i.getData(t.dataType),
                  o = a.get(n.getDataDimension(a), t.dataIndex, !0);
                isNaN(o) || this._showIndicator(o, o);
              }
            }
          },
          _hideIndicator: function() {
            var e = this._shapes;
            e.indicator && e.indicator.attr('invisible', !0),
              e.indicatorLabel && e.indicatorLabel.attr('invisible', !0);
          },
          _clearHoverLinkToSeries: function() {
            this._hideIndicator();
            var e = this._hoverLinkDataIndices;
            this._dispatchHighDown('downplay', c.makeHighDownBatch(e, this.visualMapModel)),
              (e.length = 0);
          },
          _clearHoverLinkFromSeries: function() {
            this._hideIndicator();
            var e = this.api.getZr();
            e.off('mouseover', this._hoverLinkFromSeriesMouseOver),
              e.off('mouseout', this._hideIndicator);
          },
          _applyTransform: function(e, t, n, a) {
            var o = s.getTransform(t, a ? null : this.group);
            return s[i.isArray(e) ? 'applyTransform' : 'transformDirection'](e, o, n);
          },
          _dispatchHighDown: function(e, t) {
            t && t.length && this.api.dispatchAction({ type: e, batch: t });
          },
          dispose: function() {
            this._clearHoverLinkFromSeries(), this._clearHoverLinkToSeries();
          },
          remove: function() {
            this._clearHoverLinkFromSeries(), this._clearHoverLinkToSeries();
          }
        });
      function x(e, t, n, i) {
        return new s.Polygon({
          shape: { points: e },
          draggable: !!n,
          cursor: t,
          drift: n,
          onmousemove: function(e) {
            o.stop(e.event);
          },
          ondragend: i
        });
      }
      function _(e) {
        var t = e.get('hoverLinkOnHandle');
        return !!(null == t ? e.get('realtime') : t);
      }
      function b(e) {
        return 'vertical' === e ? 'ns-resize' : 'ew-resize';
      }
      var S = y;
      e.exports = S;
    },
    function(e, t, n) {
      n(23).__DEV__;
      var i = n(2),
        a = n(466),
        o = n(106),
        r = n(467),
        s = n(16).reformIntervals,
        l = a.extend({
          type: 'visualMap.piecewise',
          defaultOption: {
            selected: null,
            minOpen: !1,
            maxOpen: !1,
            align: 'auto',
            itemWidth: 20,
            itemHeight: 14,
            itemSymbol: 'roundRect',
            pieceList: null,
            categories: null,
            splitNumber: 5,
            selectedMode: 'multiple',
            itemGap: 10,
            hoverLink: !0,
            showLabel: null
          },
          optionUpdated: function(e, t) {
            l.superApply(this, 'optionUpdated', arguments),
              (this._pieceList = []),
              this.resetExtent();
            var n = (this._mode = this._determineMode());
            u[this._mode].call(this), this._resetSelected(e, t);
            var a = this.option.categories;
            this.resetVisual(function(e, t) {
              'categories' === n
                ? ((e.mappingMethod = 'category'), (e.categories = i.clone(a)))
                : ((e.dataExtent = this.getExtent()),
                  (e.mappingMethod = 'piecewise'),
                  (e.pieceList = i.map(this._pieceList, function(e) {
                    e = i.clone(e);
                    return 'inRange' !== t && (e.visual = null), e;
                  })));
            });
          },
          completeVisualOption: function() {
            var e = this.option,
              t = {},
              n = o.listVisualTypes(),
              s = this.isCategory();
            function l(e, t, n) {
              return e && e[t] && (i.isObject(e[t]) ? e[t].hasOwnProperty(n) : e[t] === n);
            }
            i.each(e.pieces, function(e) {
              i.each(n, function(n) {
                e.hasOwnProperty(n) && (t[n] = 1);
              });
            }),
              i.each(
                t,
                function(t, n) {
                  var a = 0;
                  i.each(
                    this.stateList,
                    function(t) {
                      a |= l(e, t, n) || l(e.target, t, n);
                    },
                    this
                  ),
                    !a &&
                      i.each(this.stateList, function(t) {
                        (e[t] || (e[t] = {}))[n] = r.get(
                          n,
                          'inRange' === t ? 'active' : 'inactive',
                          s
                        );
                      });
                },
                this
              ),
              a.prototype.completeVisualOption.apply(this, arguments);
          },
          _resetSelected: function(e, t) {
            var n = this.option,
              a = this._pieceList,
              o = (t ? n : e).selected || {};
            if (
              ((n.selected = o),
              i.each(
                a,
                function(e, t) {
                  var n = this.getSelectedMapKey(e);
                  o.hasOwnProperty(n) || (o[n] = !0);
                },
                this
              ),
              'single' === n.selectedMode)
            ) {
              var r = !1;
              i.each(
                a,
                function(e, t) {
                  var n = this.getSelectedMapKey(e);
                  o[n] && (r ? (o[n] = !1) : (r = !0));
                },
                this
              );
            }
          },
          getSelectedMapKey: function(e) {
            return 'categories' === this._mode ? e.value + '' : e.index + '';
          },
          getPieceList: function() {
            return this._pieceList;
          },
          _determineMode: function() {
            var e = this.option;
            return e.pieces && e.pieces.length > 0
              ? 'pieces'
              : this.option.categories
              ? 'categories'
              : 'splitNumber';
          },
          setSelected: function(e) {
            this.option.selected = i.clone(e);
          },
          getValueState: function(e) {
            var t = o.findPieceIndex(e, this._pieceList);
            return null != t && this.option.selected[this.getSelectedMapKey(this._pieceList[t])]
              ? 'inRange'
              : 'outOfRange';
          },
          findTargetDataIndices: function(e) {
            var t = [];
            return (
              this.eachTargetSeries(function(n) {
                var i = [],
                  a = n.getData();
                a.each(
                  this.getDataDimension(a),
                  function(t, n) {
                    o.findPieceIndex(t, this._pieceList) === e && i.push(n);
                  },
                  this
                ),
                  t.push({ seriesId: n.id, dataIndex: i });
              }, this),
              t
            );
          },
          getRepresentValue: function(e) {
            var t;
            if (this.isCategory()) t = e.value;
            else if (null != e.value) t = e.value;
            else {
              var n = e.interval || [];
              t = n[0] === -1 / 0 && n[1] === 1 / 0 ? 0 : (n[0] + n[1]) / 2;
            }
            return t;
          },
          getVisualMeta: function(e) {
            if (!this.isCategory()) {
              var t = [],
                n = [],
                a = this,
                o = this._pieceList.slice();
              if (o.length) {
                var r = o[0].interval[0];
                r !== -1 / 0 && o.unshift({ interval: [-1 / 0, r] }),
                  (r = o[o.length - 1].interval[1]) !== 1 / 0 && o.push({ interval: [r, 1 / 0] });
              } else o.push({ interval: [-1 / 0, 1 / 0] });
              var s = -1 / 0;
              return (
                i.each(
                  o,
                  function(e) {
                    var t = e.interval;
                    t && (t[0] > s && l([s, t[0]], 'outOfRange'), l(t.slice()), (s = t[1]));
                  },
                  this
                ),
                { stops: t, outerColors: n }
              );
            }
            function l(i, o) {
              var r = a.getRepresentValue({ interval: i });
              o || (o = a.getValueState(r));
              var s = e(r, o);
              i[0] === -1 / 0
                ? (n[0] = s)
                : i[1] === 1 / 0
                ? (n[1] = s)
                : t.push({ value: i[0], color: s }, { value: i[1], color: s });
            }
          }
        }),
        u = {
          splitNumber: function() {
            var e = this.option,
              t = this._pieceList,
              n = Math.min(e.precision, 20),
              a = this.getExtent(),
              o = e.splitNumber;
            (o = Math.max(parseInt(o, 10), 1)), (e.splitNumber = o);
            for (var r = (a[1] - a[0]) / o; +r.toFixed(n) !== r && n < 5; ) n++;
            (e.precision = n), (r = +r.toFixed(n));
            var l = 0;
            e.minOpen && t.push({ index: l++, interval: [-1 / 0, a[0]], close: [0, 0] });
            for (var u = a[0], c = l + o; l < c; u += r) {
              var h = l === o - 1 ? a[1] : u + r;
              t.push({ index: l++, interval: [u, h], close: [1, 1] });
            }
            e.maxOpen && t.push({ index: l++, interval: [a[1], 1 / 0], close: [0, 0] }),
              s(t),
              i.each(
                t,
                function(e) {
                  e.text = this.formatValueText(e.interval);
                },
                this
              );
          },
          categories: function() {
            var e = this.option;
            i.each(
              e.categories,
              function(e) {
                this._pieceList.push({ text: this.formatValueText(e, !0), value: e });
              },
              this
            ),
              c(e, this._pieceList);
          },
          pieces: function() {
            var e = this.option,
              t = this._pieceList;
            i.each(
              e.pieces,
              function(e, n) {
                i.isObject(e) || (e = { value: e });
                var a = { text: '', index: n };
                if ((null != e.label && (a.text = e.label), e.hasOwnProperty('value'))) {
                  var r = (a.value = e.value);
                  (a.interval = [r, r]), (a.close = [1, 1]);
                } else {
                  for (
                    var s = (a.interval = []),
                      l = (a.close = [0, 0]),
                      u = [1, 0, 1],
                      c = [-1 / 0, 1 / 0],
                      h = [],
                      d = 0;
                    d < 2;
                    d++
                  ) {
                    for (
                      var p = [
                          ['gte', 'gt', 'min'],
                          ['lte', 'lt', 'max']
                        ][d],
                        g = 0;
                      g < 3 && null == s[d];
                      g++
                    )
                      (s[d] = e[p[g]]), (l[d] = u[g]), (h[d] = 2 === g);
                    null == s[d] && (s[d] = c[d]);
                  }
                  h[0] && s[1] === 1 / 0 && (l[0] = 0),
                    h[1] && s[0] === -1 / 0 && (l[1] = 0),
                    s[0] === s[1] && l[0] && l[1] && (a.value = s[0]);
                }
                (a.visual = o.retrieveVisuals(e)), t.push(a);
              },
              this
            ),
              c(e, t),
              s(t),
              i.each(
                t,
                function(e) {
                  var t = e.close,
                    n = [['<', '\u2264'][t[1]], ['>', '\u2265'][t[0]]];
                  e.text =
                    e.text || this.formatValueText(null != e.value ? e.value : e.interval, !1, n);
                },
                this
              );
          }
        };
      function c(e, t) {
        var n = e.inverse;
        ('vertical' === e.orient ? !n : n) && t.reverse();
      }
      var h = l;
      e.exports = h;
    },
    function(e, t, n) {
      var i = n(2),
        a = n(468),
        o = n(6),
        r = n(54).createSymbol,
        s = n(25),
        l = n(469),
        u = a.extend({
          type: 'visualMap.piecewise',
          doRender: function() {
            var e = this.group;
            e.removeAll();
            var t = this.visualMapModel,
              n = t.get('textGap'),
              a = t.textStyleModel,
              r = a.getFont(),
              l = a.getTextColor(),
              u = this._getItemAlign(),
              c = t.itemSize,
              h = this._getViewData(),
              d = h.endsText,
              p = i.retrieve(t.get('showLabel', !0), !d);
            d && this._renderEndsText(e, d[0], c, p, u),
              i.each(
                h.viewPieceList,
                function(a) {
                  var s = a.piece,
                    h = new o.Group();
                  (h.onclick = i.bind(this._onItemClick, this, s)),
                    this._enableHoverLink(h, a.indexInModelPieceList);
                  var d = t.getRepresentValue(s);
                  if ((this._createItemSymbol(h, d, [0, 0, c[0], c[1]]), p)) {
                    var g = this.visualMapModel.getValueState(d);
                    h.add(
                      new o.Text({
                        style: {
                          x: 'right' === u ? -n : c[0] + n,
                          y: c[1] / 2,
                          text: s.text,
                          textVerticalAlign: 'middle',
                          textAlign: u,
                          textFont: r,
                          textFill: l,
                          opacity: 'outOfRange' === g ? 0.5 : 1
                        }
                      })
                    );
                  }
                  e.add(h);
                },
                this
              ),
              d && this._renderEndsText(e, d[1], c, p, u),
              s.box(t.get('orient'), e, t.get('itemGap')),
              this.renderBackground(e),
              this.positionGroup(e);
          },
          _enableHoverLink: function(e, t) {
            function n(e) {
              var n = this.visualMapModel;
              n.option.hoverLink &&
                this.api.dispatchAction({
                  type: e,
                  batch: l.makeHighDownBatch(n.findTargetDataIndices(t), n)
                });
            }
            e.on('mouseover', i.bind(n, this, 'highlight')).on(
              'mouseout',
              i.bind(n, this, 'downplay')
            );
          },
          _getItemAlign: function() {
            var e = this.visualMapModel,
              t = e.option;
            if ('vertical' === t.orient) return l.getItemAlign(e, this.api, e.itemSize);
            var n = t.align;
            return (n && 'auto' !== n) || (n = 'left'), n;
          },
          _renderEndsText: function(e, t, n, i, a) {
            if (t) {
              var r = new o.Group(),
                s = this.visualMapModel.textStyleModel;
              r.add(
                new o.Text({
                  style: {
                    x: i ? ('right' === a ? n[0] : 0) : n[0] / 2,
                    y: n[1] / 2,
                    textVerticalAlign: 'middle',
                    textAlign: i ? a : 'center',
                    text: t,
                    textFont: s.getFont(),
                    textFill: s.getTextColor()
                  }
                })
              ),
                e.add(r);
            }
          },
          _getViewData: function() {
            var e = this.visualMapModel,
              t = i.map(e.getPieceList(), function(e, t) {
                return { piece: e, indexInModelPieceList: t };
              }),
              n = e.get('text'),
              a = e.get('orient'),
              o = e.get('inverse');
            return (
              ('horizontal' === a ? o : !o) ? t.reverse() : n && (n = n.slice().reverse()),
              { viewPieceList: t, endsText: n }
            );
          },
          _createItemSymbol: function(e, t, n) {
            e.add(
              r(
                this.getControllerVisual(t, 'symbol'),
                n[0],
                n[1],
                n[2],
                n[3],
                this.getControllerVisual(t, 'color')
              )
            );
          },
          _onItemClick: function(e) {
            var t = this.visualMapModel,
              n = t.option,
              a = i.clone(n.selected),
              o = t.getSelectedMapKey(e);
            'single' === n.selectedMode
              ? ((a[o] = !0),
                i.each(a, function(e, t) {
                  a[t] = t === o;
                }))
              : (a[o] = !a[o]),
              this.api.dispatchAction({
                type: 'selectDataRange',
                from: this.uid,
                visualMapId: this.visualMapModel.id,
                selected: a
              });
          }
        });
      e.exports = u;
    },
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    function(e, t, n) {
      var i,
        a = n(180),
        o = a.util,
        r = a.graphic,
        s = a.matrix;
      function l(e, t) {
        (this._bmap = e),
          (this.dimensions = ['lng', 'lat']),
          (this._mapOffset = [0, 0]),
          (this._api = t),
          (this._projection = new BMap.MercatorProjection());
      }
      function u(e, t) {
        return (
          (t = t || [0, 0]),
          o.map(
            [0, 1],
            function(n) {
              var i = t[n],
                a = e[n] / 2,
                o = [],
                r = [];
              return (
                (o[n] = i - a),
                (r[n] = i + a),
                (o[1 - n] = r[1 - n] = t[1 - n]),
                Math.abs(this.dataToPoint(o)[n] - this.dataToPoint(r)[n])
              );
            },
            this
          )
        );
      }
      (l.prototype.dimensions = ['lng', 'lat']),
        (l.prototype.setZoom = function(e) {
          this._zoom = e;
        }),
        (l.prototype.setCenter = function(e) {
          this._center = this._projection.lngLatToPoint(new BMap.Point(e[0], e[1]));
        }),
        (l.prototype.setMapOffset = function(e) {
          this._mapOffset = e;
        }),
        (l.prototype.getBMap = function() {
          return this._bmap;
        }),
        (l.prototype.dataToPoint = function(e) {
          var t = new BMap.Point(e[0], e[1]),
            n = this._bmap.pointToOverlayPixel(t),
            i = this._mapOffset;
          return [n.x - i[0], n.y - i[1]];
        }),
        (l.prototype.pointToData = function(e) {
          var t = this._mapOffset;
          return [
            (e = this._bmap.overlayPixelToPoint({ x: e[0] + t[0], y: e[1] + t[1] })).lng,
            e.lat
          ];
        }),
        (l.prototype.getViewRect = function() {
          var e = this._api;
          return new r.BoundingRect(0, 0, e.getWidth(), e.getHeight());
        }),
        (l.prototype.getRoamTransform = function() {
          return s.create();
        }),
        (l.prototype.prepareCustoms = function(e) {
          var t = this.getViewRect();
          return {
            coordSys: { type: 'bmap', x: t.x, y: t.y, width: t.width, height: t.height },
            api: { coord: o.bind(this.dataToPoint, this), size: o.bind(u, this) }
          };
        }),
        (l.dimensions = l.prototype.dimensions),
        (l.create = function(e, t) {
          var n,
            a = t.getDom();
          e.eachComponent('bmap', function(e) {
            var o = t.getZr().painter,
              r = o.getViewportRoot();
            if ('undefined' === typeof BMap) throw new Error('BMap api is not loaded');
            if (
              ((i =
                i ||
                (function() {
                  function e(e) {
                    this._root = e;
                  }
                  return (
                    (e.prototype = new BMap.Overlay()),
                    (e.prototype.initialize = function(e) {
                      return e.getPanes().labelPane.appendChild(this._root), this._root;
                    }),
                    (e.prototype.draw = function() {}),
                    e
                  );
                })()),
              n)
            )
              throw new Error('Only one bmap component can exist');
            if (!e.__bmap) {
              var s = a.querySelector('.ec-extension-bmap');
              s && ((r.style.left = '0px'), (r.style.top = '0px'), a.removeChild(s)),
                ((s = document.createElement('div')).style.cssText = 'width:100%;height:100%'),
                s.classList.add('ec-extension-bmap'),
                a.appendChild(s);
              var u = (e.__bmap = new BMap.Map(s)),
                c = new i(r);
              u.addOverlay(c),
                (o.getViewportRootOffset = function() {
                  return { offsetLeft: 0, offsetTop: 0 };
                });
            }
            u = e.__bmap;
            var h = e.get('center'),
              d = e.get('zoom');
            if (h && d) {
              var p = new BMap.Point(h[0], h[1]);
              u.centerAndZoom(p, d);
            }
            (n = new l(u, t)).setMapOffset(e.__mapOffset || [0, 0]),
              n.setZoom(d),
              n.setCenter(h),
              (e.coordinateSystem = n);
          }),
            e.eachSeries(function(e) {
              'bmap' === e.get('coordinateSystem') && (e.coordinateSystem = n);
            });
        });
      var c = l;
      e.exports = c;
    },
    function(e, t, n) {
      var i = n(180).extendComponentModel({
        type: 'bmap',
        getBMap: function() {
          return this.__bmap;
        },
        setCenterAndZoom: function(e, t) {
          (this.option.center = e), (this.option.zoom = t);
        },
        centerOrZoomChanged: function(e, t) {
          var n,
            i,
            a = this.option;
          return (
            (n = e), (i = a.center), !(n && i && n[0] === i[0] && n[1] === i[1] && t === a.zoom)
          );
        },
        defaultOption: {
          center: [104.114129, 37.550339],
          zoom: 5,
          mapStyle: {},
          mapStyleV2: {},
          roam: !1
        }
      });
      e.exports = i;
    },
    function(e, t, n) {
      var i = n(180).extendComponentView({
        type: 'bmap',
        render: function(e, t, n) {
          var i = !0,
            a = e.getBMap(),
            o = n.getZr().painter.getViewportRoot(),
            r = e.coordinateSystem,
            s = function(t, a) {
              if (!i) {
                var s = o.parentNode.parentNode.parentNode,
                  l = [-parseInt(s.style.left, 10) || 0, -parseInt(s.style.top, 10) || 0];
                (o.style.left = l[0] + 'px'),
                  (o.style.top = l[1] + 'px'),
                  r.setMapOffset(l),
                  (e.__mapOffset = l),
                  n.dispatchAction({ type: 'bmapRoam' });
              }
            };
          function l() {
            i || n.dispatchAction({ type: 'bmapRoam' });
          }
          a.removeEventListener('moving', this._oldMoveHandler),
            a.removeEventListener('zoomend', this._oldZoomEndHandler),
            a.addEventListener('moving', s),
            a.addEventListener('zoomend', l),
            (this._oldMoveHandler = s),
            (this._oldZoomEndHandler = l);
          var u = e.get('roam');
          u && 'scale' !== u ? a.enableDragging() : a.disableDragging(),
            u && 'move' !== u
              ? (a.enableScrollWheelZoom(), a.enableDoubleClickZoom(), a.enablePinchToZoom())
              : (a.disableScrollWheelZoom(), a.disableDoubleClickZoom(), a.disablePinchToZoom());
          var c = e.__mapStyle,
            h = e.get('mapStyle') || {},
            d = JSON.stringify(h);
          JSON.stringify(c) !== d &&
            (Object.keys(h).length && a.setMapStyle(h), (e.__mapStyle = JSON.parse(d)));
          var p = e.__mapStyle2,
            g = e.get('mapStyleV2') || {},
            f = JSON.stringify(g);
          JSON.stringify(p) !== f &&
            (Object.keys(g).length && a.setMapStyleV2(g), (e.__mapStyle2 = JSON.parse(f))),
            (i = !1);
        }
      });
      e.exports = i;
    }
  ]
]);
